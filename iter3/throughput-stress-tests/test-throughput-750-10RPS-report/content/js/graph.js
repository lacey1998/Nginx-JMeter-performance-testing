/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 2901.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 2.0], [1.0, 2.0], [1.1, 2.0], [1.2, 2.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 3.0], [3.1, 3.0], [3.2, 3.0], [3.3, 3.0], [3.4, 3.0], [3.5, 3.0], [3.6, 3.0], [3.7, 3.0], [3.8, 3.0], [3.9, 3.0], [4.0, 3.0], [4.1, 3.0], [4.2, 3.0], [4.3, 3.0], [4.4, 3.0], [4.5, 3.0], [4.6, 3.0], [4.7, 3.0], [4.8, 3.0], [4.9, 3.0], [5.0, 3.0], [5.1, 3.0], [5.2, 3.0], [5.3, 3.0], [5.4, 3.0], [5.5, 3.0], [5.6, 3.0], [5.7, 3.0], [5.8, 4.0], [5.9, 4.0], [6.0, 4.0], [6.1, 4.0], [6.2, 4.0], [6.3, 4.0], [6.4, 4.0], [6.5, 4.0], [6.6, 4.0], [6.7, 4.0], [6.8, 4.0], [6.9, 4.0], [7.0, 4.0], [7.1, 4.0], [7.2, 4.0], [7.3, 4.0], [7.4, 4.0], [7.5, 4.0], [7.6, 4.0], [7.7, 4.0], [7.8, 4.0], [7.9, 4.0], [8.0, 4.0], [8.1, 4.0], [8.2, 4.0], [8.3, 4.0], [8.4, 4.0], [8.5, 4.0], [8.6, 4.0], [8.7, 4.0], [8.8, 4.0], [8.9, 4.0], [9.0, 4.0], [9.1, 5.0], [9.2, 5.0], [9.3, 5.0], [9.4, 5.0], [9.5, 5.0], [9.6, 5.0], [9.7, 5.0], [9.8, 5.0], [9.9, 5.0], [10.0, 5.0], [10.1, 5.0], [10.2, 5.0], [10.3, 5.0], [10.4, 5.0], [10.5, 5.0], [10.6, 5.0], [10.7, 5.0], [10.8, 5.0], [10.9, 5.0], [11.0, 5.0], [11.1, 5.0], [11.2, 5.0], [11.3, 5.0], [11.4, 5.0], [11.5, 5.0], [11.6, 5.0], [11.7, 5.0], [11.8, 5.0], [11.9, 5.0], [12.0, 5.0], [12.1, 5.0], [12.2, 5.0], [12.3, 5.0], [12.4, 5.0], [12.5, 5.0], [12.6, 5.0], [12.7, 5.0], [12.8, 6.0], [12.9, 6.0], [13.0, 6.0], [13.1, 6.0], [13.2, 6.0], [13.3, 6.0], [13.4, 6.0], [13.5, 6.0], [13.6, 6.0], [13.7, 6.0], [13.8, 6.0], [13.9, 6.0], [14.0, 6.0], [14.1, 6.0], [14.2, 6.0], [14.3, 6.0], [14.4, 6.0], [14.5, 6.0], [14.6, 6.0], [14.7, 6.0], [14.8, 6.0], [14.9, 6.0], [15.0, 6.0], [15.1, 6.0], [15.2, 6.0], [15.3, 6.0], [15.4, 6.0], [15.5, 6.0], [15.6, 6.0], [15.7, 6.0], [15.8, 6.0], [15.9, 6.0], [16.0, 6.0], [16.1, 6.0], [16.2, 6.0], [16.3, 6.0], [16.4, 7.0], [16.5, 7.0], [16.6, 7.0], [16.7, 7.0], [16.8, 7.0], [16.9, 7.0], [17.0, 7.0], [17.1, 7.0], [17.2, 7.0], [17.3, 7.0], [17.4, 7.0], [17.5, 7.0], [17.6, 7.0], [17.7, 7.0], [17.8, 7.0], [17.9, 7.0], [18.0, 7.0], [18.1, 7.0], [18.2, 7.0], [18.3, 7.0], [18.4, 7.0], [18.5, 7.0], [18.6, 7.0], [18.7, 7.0], [18.8, 7.0], [18.9, 7.0], [19.0, 7.0], [19.1, 7.0], [19.2, 7.0], [19.3, 7.0], [19.4, 7.0], [19.5, 7.0], [19.6, 7.0], [19.7, 7.0], [19.8, 7.0], [19.9, 8.0], [20.0, 8.0], [20.1, 8.0], [20.2, 8.0], [20.3, 8.0], [20.4, 8.0], [20.5, 8.0], [20.6, 8.0], [20.7, 8.0], [20.8, 8.0], [20.9, 8.0], [21.0, 8.0], [21.1, 8.0], [21.2, 8.0], [21.3, 8.0], [21.4, 8.0], [21.5, 8.0], [21.6, 8.0], [21.7, 8.0], [21.8, 8.0], [21.9, 8.0], [22.0, 8.0], [22.1, 8.0], [22.2, 8.0], [22.3, 8.0], [22.4, 8.0], [22.5, 8.0], [22.6, 8.0], [22.7, 8.0], [22.8, 8.0], [22.9, 8.0], [23.0, 8.0], [23.1, 8.0], [23.2, 8.0], [23.3, 9.0], [23.4, 9.0], [23.5, 9.0], [23.6, 9.0], [23.7, 9.0], [23.8, 9.0], [23.9, 9.0], [24.0, 9.0], [24.1, 9.0], [24.2, 9.0], [24.3, 9.0], [24.4, 9.0], [24.5, 9.0], [24.6, 9.0], [24.7, 9.0], [24.8, 9.0], [24.9, 9.0], [25.0, 9.0], [25.1, 9.0], [25.2, 9.0], [25.3, 9.0], [25.4, 9.0], [25.5, 9.0], [25.6, 9.0], [25.7, 9.0], [25.8, 9.0], [25.9, 9.0], [26.0, 9.0], [26.1, 9.0], [26.2, 9.0], [26.3, 9.0], [26.4, 9.0], [26.5, 10.0], [26.6, 10.0], [26.7, 10.0], [26.8, 10.0], [26.9, 10.0], [27.0, 10.0], [27.1, 10.0], [27.2, 10.0], [27.3, 10.0], [27.4, 10.0], [27.5, 10.0], [27.6, 10.0], [27.7, 10.0], [27.8, 10.0], [27.9, 10.0], [28.0, 10.0], [28.1, 10.0], [28.2, 10.0], [28.3, 10.0], [28.4, 10.0], [28.5, 10.0], [28.6, 10.0], [28.7, 10.0], [28.8, 10.0], [28.9, 10.0], [29.0, 10.0], [29.1, 10.0], [29.2, 10.0], [29.3, 10.0], [29.4, 10.0], [29.5, 10.0], [29.6, 11.0], [29.7, 11.0], [29.8, 11.0], [29.9, 11.0], [30.0, 11.0], [30.1, 11.0], [30.2, 11.0], [30.3, 11.0], [30.4, 11.0], [30.5, 11.0], [30.6, 11.0], [30.7, 11.0], [30.8, 11.0], [30.9, 11.0], [31.0, 11.0], [31.1, 11.0], [31.2, 11.0], [31.3, 11.0], [31.4, 11.0], [31.5, 11.0], [31.6, 11.0], [31.7, 11.0], [31.8, 11.0], [31.9, 11.0], [32.0, 11.0], [32.1, 11.0], [32.2, 11.0], [32.3, 11.0], [32.4, 11.0], [32.5, 11.0], [32.6, 12.0], [32.7, 12.0], [32.8, 12.0], [32.9, 12.0], [33.0, 12.0], [33.1, 12.0], [33.2, 12.0], [33.3, 12.0], [33.4, 12.0], [33.5, 12.0], [33.6, 12.0], [33.7, 12.0], [33.8, 12.0], [33.9, 12.0], [34.0, 12.0], [34.1, 12.0], [34.2, 12.0], [34.3, 12.0], [34.4, 12.0], [34.5, 12.0], [34.6, 12.0], [34.7, 12.0], [34.8, 12.0], [34.9, 12.0], [35.0, 12.0], [35.1, 12.0], [35.2, 12.0], [35.3, 12.0], [35.4, 12.0], [35.5, 13.0], [35.6, 13.0], [35.7, 13.0], [35.8, 13.0], [35.9, 13.0], [36.0, 13.0], [36.1, 13.0], [36.2, 13.0], [36.3, 13.0], [36.4, 13.0], [36.5, 13.0], [36.6, 13.0], [36.7, 13.0], [36.8, 13.0], [36.9, 13.0], [37.0, 13.0], [37.1, 13.0], [37.2, 13.0], [37.3, 13.0], [37.4, 13.0], [37.5, 13.0], [37.6, 13.0], [37.7, 13.0], [37.8, 13.0], [37.9, 13.0], [38.0, 13.0], [38.1, 13.0], [38.2, 14.0], [38.3, 14.0], [38.4, 14.0], [38.5, 14.0], [38.6, 14.0], [38.7, 14.0], [38.8, 14.0], [38.9, 14.0], [39.0, 14.0], [39.1, 14.0], [39.2, 14.0], [39.3, 14.0], [39.4, 14.0], [39.5, 14.0], [39.6, 14.0], [39.7, 14.0], [39.8, 14.0], [39.9, 14.0], [40.0, 14.0], [40.1, 14.0], [40.2, 14.0], [40.3, 14.0], [40.4, 14.0], [40.5, 14.0], [40.6, 14.0], [40.7, 14.0], [40.8, 14.0], [40.9, 15.0], [41.0, 15.0], [41.1, 15.0], [41.2, 15.0], [41.3, 15.0], [41.4, 15.0], [41.5, 15.0], [41.6, 15.0], [41.7, 15.0], [41.8, 15.0], [41.9, 15.0], [42.0, 15.0], [42.1, 15.0], [42.2, 15.0], [42.3, 15.0], [42.4, 15.0], [42.5, 15.0], [42.6, 15.0], [42.7, 15.0], [42.8, 15.0], [42.9, 15.0], [43.0, 15.0], [43.1, 15.0], [43.2, 15.0], [43.3, 15.0], [43.4, 15.0], [43.5, 16.0], [43.6, 16.0], [43.7, 16.0], [43.8, 16.0], [43.9, 16.0], [44.0, 16.0], [44.1, 16.0], [44.2, 16.0], [44.3, 16.0], [44.4, 16.0], [44.5, 16.0], [44.6, 16.0], [44.7, 16.0], [44.8, 16.0], [44.9, 16.0], [45.0, 16.0], [45.1, 16.0], [45.2, 16.0], [45.3, 16.0], [45.4, 16.0], [45.5, 16.0], [45.6, 16.0], [45.7, 16.0], [45.8, 16.0], [45.9, 17.0], [46.0, 17.0], [46.1, 17.0], [46.2, 17.0], [46.3, 17.0], [46.4, 17.0], [46.5, 17.0], [46.6, 17.0], [46.7, 17.0], [46.8, 17.0], [46.9, 17.0], [47.0, 17.0], [47.1, 17.0], [47.2, 17.0], [47.3, 17.0], [47.4, 17.0], [47.5, 17.0], [47.6, 17.0], [47.7, 17.0], [47.8, 17.0], [47.9, 17.0], [48.0, 17.0], [48.1, 17.0], [48.2, 17.0], [48.3, 18.0], [48.4, 18.0], [48.5, 18.0], [48.6, 18.0], [48.7, 18.0], [48.8, 18.0], [48.9, 18.0], [49.0, 18.0], [49.1, 18.0], [49.2, 18.0], [49.3, 18.0], [49.4, 18.0], [49.5, 18.0], [49.6, 18.0], [49.7, 18.0], [49.8, 18.0], [49.9, 18.0], [50.0, 18.0], [50.1, 18.0], [50.2, 18.0], [50.3, 18.0], [50.4, 18.0], [50.5, 18.0], [50.6, 19.0], [50.7, 19.0], [50.8, 19.0], [50.9, 19.0], [51.0, 19.0], [51.1, 19.0], [51.2, 19.0], [51.3, 19.0], [51.4, 19.0], [51.5, 19.0], [51.6, 19.0], [51.7, 19.0], [51.8, 19.0], [51.9, 19.0], [52.0, 19.0], [52.1, 19.0], [52.2, 19.0], [52.3, 19.0], [52.4, 19.0], [52.5, 19.0], [52.6, 19.0], [52.7, 20.0], [52.8, 20.0], [52.9, 20.0], [53.0, 20.0], [53.1, 20.0], [53.2, 20.0], [53.3, 20.0], [53.4, 20.0], [53.5, 20.0], [53.6, 20.0], [53.7, 20.0], [53.8, 20.0], [53.9, 20.0], [54.0, 20.0], [54.1, 20.0], [54.2, 20.0], [54.3, 20.0], [54.4, 20.0], [54.5, 20.0], [54.6, 20.0], [54.7, 20.0], [54.8, 21.0], [54.9, 21.0], [55.0, 21.0], [55.1, 21.0], [55.2, 21.0], [55.3, 21.0], [55.4, 21.0], [55.5, 21.0], [55.6, 21.0], [55.7, 21.0], [55.8, 21.0], [55.9, 21.0], [56.0, 21.0], [56.1, 21.0], [56.2, 21.0], [56.3, 21.0], [56.4, 21.0], [56.5, 21.0], [56.6, 21.0], [56.7, 22.0], [56.8, 22.0], [56.9, 22.0], [57.0, 22.0], [57.1, 22.0], [57.2, 22.0], [57.3, 22.0], [57.4, 22.0], [57.5, 22.0], [57.6, 22.0], [57.7, 22.0], [57.8, 22.0], [57.9, 22.0], [58.0, 22.0], [58.1, 22.0], [58.2, 22.0], [58.3, 22.0], [58.4, 22.0], [58.5, 22.0], [58.6, 23.0], [58.7, 23.0], [58.8, 23.0], [58.9, 23.0], [59.0, 23.0], [59.1, 23.0], [59.2, 23.0], [59.3, 23.0], [59.4, 23.0], [59.5, 23.0], [59.6, 23.0], [59.7, 23.0], [59.8, 23.0], [59.9, 23.0], [60.0, 23.0], [60.1, 23.0], [60.2, 23.0], [60.3, 23.0], [60.4, 24.0], [60.5, 24.0], [60.6, 24.0], [60.7, 24.0], [60.8, 24.0], [60.9, 24.0], [61.0, 24.0], [61.1, 24.0], [61.2, 24.0], [61.3, 24.0], [61.4, 24.0], [61.5, 24.0], [61.6, 24.0], [61.7, 24.0], [61.8, 24.0], [61.9, 24.0], [62.0, 24.0], [62.1, 25.0], [62.2, 25.0], [62.3, 25.0], [62.4, 25.0], [62.5, 25.0], [62.6, 25.0], [62.7, 25.0], [62.8, 25.0], [62.9, 25.0], [63.0, 25.0], [63.1, 25.0], [63.2, 25.0], [63.3, 25.0], [63.4, 25.0], [63.5, 25.0], [63.6, 25.0], [63.7, 25.0], [63.8, 26.0], [63.9, 26.0], [64.0, 26.0], [64.1, 26.0], [64.2, 26.0], [64.3, 26.0], [64.4, 26.0], [64.5, 26.0], [64.6, 26.0], [64.7, 26.0], [64.8, 26.0], [64.9, 26.0], [65.0, 26.0], [65.1, 26.0], [65.2, 26.0], [65.3, 26.0], [65.4, 27.0], [65.5, 27.0], [65.6, 27.0], [65.7, 27.0], [65.8, 27.0], [65.9, 27.0], [66.0, 27.0], [66.1, 27.0], [66.2, 27.0], [66.3, 27.0], [66.4, 27.0], [66.5, 27.0], [66.6, 27.0], [66.7, 27.0], [66.8, 28.0], [66.9, 28.0], [67.0, 28.0], [67.1, 28.0], [67.2, 28.0], [67.3, 28.0], [67.4, 28.0], [67.5, 28.0], [67.6, 28.0], [67.7, 28.0], [67.8, 28.0], [67.9, 28.0], [68.0, 28.0], [68.1, 28.0], [68.2, 28.0], [68.3, 29.0], [68.4, 29.0], [68.5, 29.0], [68.6, 29.0], [68.7, 29.0], [68.8, 29.0], [68.9, 29.0], [69.0, 29.0], [69.1, 29.0], [69.2, 29.0], [69.3, 29.0], [69.4, 29.0], [69.5, 29.0], [69.6, 30.0], [69.7, 30.0], [69.8, 30.0], [69.9, 30.0], [70.0, 30.0], [70.1, 30.0], [70.2, 30.0], [70.3, 30.0], [70.4, 30.0], [70.5, 30.0], [70.6, 30.0], [70.7, 30.0], [70.8, 30.0], [70.9, 31.0], [71.0, 31.0], [71.1, 31.0], [71.2, 31.0], [71.3, 31.0], [71.4, 31.0], [71.5, 31.0], [71.6, 31.0], [71.7, 31.0], [71.8, 31.0], [71.9, 31.0], [72.0, 31.0], [72.1, 32.0], [72.2, 32.0], [72.3, 32.0], [72.4, 32.0], [72.5, 32.0], [72.6, 32.0], [72.7, 32.0], [72.8, 32.0], [72.9, 32.0], [73.0, 32.0], [73.1, 32.0], [73.2, 32.0], [73.3, 33.0], [73.4, 33.0], [73.5, 33.0], [73.6, 33.0], [73.7, 33.0], [73.8, 33.0], [73.9, 33.0], [74.0, 33.0], [74.1, 33.0], [74.2, 33.0], [74.3, 33.0], [74.4, 34.0], [74.5, 34.0], [74.6, 34.0], [74.7, 34.0], [74.8, 34.0], [74.9, 34.0], [75.0, 34.0], [75.1, 34.0], [75.2, 34.0], [75.3, 34.0], [75.4, 34.0], [75.5, 35.0], [75.6, 35.0], [75.7, 35.0], [75.8, 35.0], [75.9, 35.0], [76.0, 35.0], [76.1, 35.0], [76.2, 35.0], [76.3, 35.0], [76.4, 35.0], [76.5, 36.0], [76.6, 36.0], [76.7, 36.0], [76.8, 36.0], [76.9, 36.0], [77.0, 36.0], [77.1, 36.0], [77.2, 36.0], [77.3, 36.0], [77.4, 37.0], [77.5, 37.0], [77.6, 37.0], [77.7, 37.0], [77.8, 37.0], [77.9, 37.0], [78.0, 37.0], [78.1, 37.0], [78.2, 37.0], [78.3, 38.0], [78.4, 38.0], [78.5, 38.0], [78.6, 38.0], [78.7, 38.0], [78.8, 38.0], [78.9, 38.0], [79.0, 38.0], [79.1, 39.0], [79.2, 39.0], [79.3, 39.0], [79.4, 39.0], [79.5, 39.0], [79.6, 39.0], [79.7, 39.0], [79.8, 39.0], [79.9, 39.0], [80.0, 40.0], [80.1, 40.0], [80.2, 40.0], [80.3, 40.0], [80.4, 40.0], [80.5, 40.0], [80.6, 40.0], [80.7, 41.0], [80.8, 41.0], [80.9, 41.0], [81.0, 41.0], [81.1, 41.0], [81.2, 41.0], [81.3, 41.0], [81.4, 41.0], [81.5, 42.0], [81.6, 42.0], [81.7, 42.0], [81.8, 42.0], [81.9, 42.0], [82.0, 42.0], [82.1, 43.0], [82.2, 43.0], [82.3, 43.0], [82.4, 43.0], [82.5, 43.0], [82.6, 43.0], [82.7, 43.0], [82.8, 44.0], [82.9, 44.0], [83.0, 44.0], [83.1, 44.0], [83.2, 44.0], [83.3, 44.0], [83.4, 45.0], [83.5, 45.0], [83.6, 45.0], [83.7, 45.0], [83.8, 45.0], [83.9, 45.0], [84.0, 46.0], [84.1, 46.0], [84.2, 46.0], [84.3, 46.0], [84.4, 46.0], [84.5, 46.0], [84.6, 47.0], [84.7, 47.0], [84.8, 47.0], [84.9, 47.0], [85.0, 47.0], [85.1, 48.0], [85.2, 48.0], [85.3, 48.0], [85.4, 48.0], [85.5, 48.0], [85.6, 49.0], [85.7, 49.0], [85.8, 49.0], [85.9, 49.0], [86.0, 49.0], [86.1, 50.0], [86.2, 50.0], [86.3, 50.0], [86.4, 50.0], [86.5, 50.0], [86.6, 51.0], [86.7, 51.0], [86.8, 51.0], [86.9, 51.0], [87.0, 52.0], [87.1, 52.0], [87.2, 52.0], [87.3, 52.0], [87.4, 52.0], [87.5, 53.0], [87.6, 53.0], [87.7, 53.0], [87.8, 53.0], [87.9, 54.0], [88.0, 54.0], [88.1, 54.0], [88.2, 55.0], [88.3, 55.0], [88.4, 55.0], [88.5, 55.0], [88.6, 56.0], [88.7, 56.0], [88.8, 56.0], [88.9, 57.0], [89.0, 57.0], [89.1, 57.0], [89.2, 57.0], [89.3, 58.0], [89.4, 58.0], [89.5, 58.0], [89.6, 59.0], [89.7, 59.0], [89.8, 59.0], [89.9, 60.0], [90.0, 60.0], [90.1, 60.0], [90.2, 61.0], [90.3, 61.0], [90.4, 61.0], [90.5, 62.0], [90.6, 62.0], [90.7, 63.0], [90.8, 63.0], [90.9, 63.0], [91.0, 64.0], [91.1, 64.0], [91.2, 65.0], [91.3, 65.0], [91.4, 65.0], [91.5, 66.0], [91.6, 66.0], [91.7, 67.0], [91.8, 67.0], [91.9, 68.0], [92.0, 68.0], [92.1, 69.0], [92.2, 69.0], [92.3, 70.0], [92.4, 70.0], [92.5, 71.0], [92.6, 71.0], [92.7, 72.0], [92.8, 72.0], [92.9, 73.0], [93.0, 73.0], [93.1, 74.0], [93.2, 74.0], [93.3, 75.0], [93.4, 76.0], [93.5, 76.0], [93.6, 77.0], [93.7, 78.0], [93.8, 78.0], [93.9, 79.0], [94.0, 80.0], [94.1, 80.0], [94.2, 81.0], [94.3, 82.0], [94.4, 83.0], [94.5, 84.0], [94.6, 84.0], [94.7, 85.0], [94.8, 86.0], [94.9, 87.0], [95.0, 88.0], [95.1, 89.0], [95.2, 90.0], [95.3, 91.0], [95.4, 92.0], [95.5, 93.0], [95.6, 94.0], [95.7, 95.0], [95.8, 96.0], [95.9, 97.0], [96.0, 98.0], [96.1, 99.0], [96.2, 100.0], [96.3, 101.0], [96.4, 103.0], [96.5, 104.0], [96.6, 105.0], [96.7, 107.0], [96.8, 108.0], [96.9, 110.0], [97.0, 111.0], [97.1, 113.0], [97.2, 115.0], [97.3, 116.0], [97.4, 118.0], [97.5, 120.0], [97.6, 122.0], [97.7, 124.0], [97.8, 127.0], [97.9, 129.0], [98.0, 132.0], [98.1, 135.0], [98.2, 138.0], [98.3, 141.0], [98.4, 145.0], [98.5, 149.0], [98.6, 154.0], [98.7, 159.0], [98.8, 165.0], [98.9, 172.0], [99.0, 180.0], [99.1, 190.0], [99.2, 201.0], [99.3, 215.0], [99.4, 234.0], [99.5, 261.0], [99.6, 299.0], [99.7, 357.0], [99.8, 448.0], [99.9, 613.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1770874.0, "series": [{"data": [[0.0, 1770874.0], [600.0, 645.0], [700.0, 282.0], [800.0, 214.0], [900.0, 213.0], [1000.0, 216.0], [1100.0, 115.0], [1200.0, 83.0], [1300.0, 28.0], [1400.0, 10.0], [1500.0, 15.0], [100.0, 56055.0], [1600.0, 15.0], [1700.0, 19.0], [1800.0, 11.0], [1900.0, 40.0], [2000.0, 8.0], [2100.0, 19.0], [2200.0, 1.0], [2300.0, 1.0], [2400.0, 1.0], [2600.0, 7.0], [2700.0, 3.0], [2900.0, 1.0], [200.0, 7660.0], [300.0, 2822.0], [400.0, 1512.0], [500.0, 1080.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 140.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1838937.0, "series": [{"data": [[0.0, 1838937.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2873.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 140.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 554.4792501021594, "minX": 1.74314202E12, "maxY": 750.0, "series": [{"data": [[1.7431422E12, 750.0], [1.74314238E12, 750.0], [1.7431425E12, 750.0], [1.74314202E12, 554.4792501021594], [1.74314232E12, 750.0], [1.74314262E12, 747.135971779067], [1.74314214E12, 750.0], [1.74314244E12, 750.0], [1.74314208E12, 750.0], [1.74314226E12, 750.0], [1.74314256E12, 750.0]], "isOverall": false, "label": "Throughput Stress Test Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74314262E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 12.0, "maxY": 149.7122302158274, "series": [{"data": [[12.0, 52.89999999999999], [13.0, 9.25], [14.0, 3.0], [15.0, 6.166666666666667], [16.0, 3.0], [17.0, 3.8461538461538463], [18.0, 3.0], [19.0, 2.5], [20.0, 5.000000000000001], [21.0, 5.8], [22.0, 5.0], [23.0, 4.142857142857143], [24.0, 3.166666666666667], [25.0, 4.352941176470588], [26.0, 4.0], [27.0, 3.9411764705882355], [28.0, 2.5], [29.0, 3.1249999999999996], [30.0, 4.833333333333334], [31.0, 3.7777777777777772], [32.0, 3.9473684210526314], [33.0, 4.2727272727272725], [34.0, 2.1], [35.0, 4.684210526315789], [36.0, 3.0909090909090913], [37.0, 3.571428571428571], [38.0, 3.0], [39.0, 3.4285714285714284], [40.0, 5.05], [41.0, 3.8461538461538454], [42.0, 3.2173913043478257], [43.0, 4.153846153846154], [44.0, 8.4], [45.0, 4.625], [46.0, 4.133333333333333], [47.0, 3.1599999999999997], [48.0, 3.6874999999999996], [49.0, 3.9374999999999996], [50.0, 3.653846153846154], [51.0, 4.294117647058824], [52.0, 3.3703703703703707], [53.0, 4.0], [54.0, 3.6666666666666665], [55.0, 4.000000000000001], [56.0, 4.000000000000001], [57.0, 3.689655172413792], [58.0, 3.9999999999999996], [59.0, 4.75], [60.0, 3.3666666666666667], [61.0, 5.095238095238095], [62.0, 4.387096774193549], [63.0, 4.7272727272727275], [64.0, 4.090909090909092], [65.0, 5.062499999999999], [66.0, 3.3913043478260865], [67.0, 3.9090909090909096], [68.0, 3.583333333333333], [69.0, 4.583333333333334], [70.0, 3.5882352941176476], [71.0, 4.666666666666667], [72.0, 10.536585365853663], [73.0, 5.4074074074074066], [74.0, 3.192307692307692], [75.0, 5.888888888888889], [76.0, 5.407407407407408], [77.0, 4.108108108108109], [78.0, 5.0], [79.0, 4.642857142857143], [80.0, 5.578947368421051], [81.0, 6.0], [82.0, 5.564102564102564], [83.0, 5.866666666666667], [84.0, 5.266666666666667], [85.0, 5.349999999999999], [86.0, 4.967741935483871], [87.0, 5.365853658536586], [88.0, 5.0625], [89.0, 5.4375], [90.0, 5.642857142857142], [91.0, 5.787878787878787], [92.0, 5.000000000000001], [93.0, 5.029411764705881], [94.0, 4.352941176470588], [95.0, 4.727272727272726], [96.0, 4.135135135135134], [97.0, 4.44186046511628], [98.0, 4.638888888888889], [99.0, 3.916666666666666], [100.0, 3.891304347826087], [101.0, 4.189189189189189], [102.0, 4.617021276595746], [103.0, 4.342105263157894], [104.0, 4.263157894736842], [105.0, 4.645833333333333], [106.0, 4.461538461538463], [107.0, 5.204081632653061], [108.0, 4.575], [109.0, 3.9], [110.0, 4.159999999999999], [111.0, 4.666666666666666], [112.0, 3.877551020408163], [113.0, 4.080645161290323], [114.0, 3.6086956521739135], [115.0, 4.288461538461537], [116.0, 3.651162790697674], [117.0, 3.5576923076923075], [118.0, 4.111111111111111], [119.0, 4.431818181818182], [120.0, 4.259259259259259], [121.0, 5.266666666666666], [122.0, 4.222222222222224], [123.0, 4.776119402985073], [124.0, 4.23076923076923], [125.0, 6.321428571428572], [126.0, 4.574468085106383], [127.0, 6.061538461538462], [128.0, 6.125], [129.0, 10.687499999999998], [130.0, 4.741379310344827], [131.0, 5.734693877551021], [132.0, 5.706896551724139], [133.0, 4.352941176470587], [134.0, 3.923076923076923], [135.0, 4.068965517241379], [136.0, 3.980392156862745], [137.0, 4.466666666666665], [138.0, 4.679245283018868], [139.0, 5.480769230769231], [140.0, 4.435483870967744], [141.0, 4.796296296296296], [142.0, 5.032786885245903], [143.0, 5.436363636363635], [144.0, 3.833333333333333], [145.0, 5.171875], [146.0, 4.163636363636363], [147.0, 5.046874999999999], [148.0, 4.263157894736842], [149.0, 4.392857142857143], [150.0, 4.636363636363638], [151.0, 4.6923076923076925], [152.0, 4.724137931034483], [153.0, 5.847457627118644], [154.0, 5.189655172413793], [155.0, 5.397058823529413], [156.0, 4.1694915254237275], [157.0, 5.397058823529411], [158.0, 4.622950819672132], [159.0, 5.316666666666667], [160.0, 5.557142857142856], [161.0, 5.754098360655737], [162.0, 5.385714285714286], [163.0, 6.412698412698414], [164.0, 6.032258064516128], [165.0, 6.972222222222226], [166.0, 5.365079365079366], [167.0, 5.930555555555556], [168.0, 5.769230769230768], [169.0, 4.968750000000001], [170.0, 6.945945945945944], [171.0, 5.169230769230771], [172.0, 6.027027027027025], [173.0, 6.701492537313433], [174.0, 4.984848484848486], [175.0, 7.813953488372094], [176.0, 10.949999999999998], [177.0, 5.986842105263157], [178.0, 4.782608695652174], [179.0, 4.9411764705882355], [180.0, 5.551282051282048], [181.0, 6.260869565217392], [182.0, 7.415584415584414], [183.0, 6.602739726027399], [184.0, 5.859154929577465], [185.0, 8.3125], [186.0, 6.217391304347825], [187.0, 7.050000000000001], [188.0, 5.8767123287671215], [189.0, 5.749999999999998], [190.0, 7.158536585365851], [191.0, 5.589041095890411], [192.0, 6.548780487804876], [193.0, 6.986666666666668], [194.0, 5.499999999999999], [195.0, 7.91666666666667], [196.0, 5.253333333333334], [197.0, 6.741176470588234], [198.0, 6.644736842105265], [199.0, 6.0394736842105265], [200.0, 6.720930232558142], [201.0, 6.467532467532467], [202.0, 6.8488372093023235], [203.0, 7.177215189873418], [204.0, 6.012820512820513], [205.0, 8.29545454545455], [206.0, 7.130952380952381], [207.0, 7.963414634146339], [208.0, 7.878048780487804], [209.0, 5.787499999999999], [210.0, 6.258064516129031], [211.0, 18.932203389830516], [212.0, 23.641025641025642], [213.0, 11.915094339622641], [214.0, 6.337349397590361], [215.0, 8.659090909090905], [216.0, 9.264367816091953], [217.0, 7.217391304347826], [218.0, 7.238095238095238], [219.0, 8.494117647058822], [220.0, 6.787234042553189], [221.0, 6.779069767441861], [222.0, 6.819148936170215], [223.0, 6.741176470588237], [224.0, 6.8275862068965525], [225.0, 7.74489795918367], [226.0, 9.011494252873565], [227.0, 8.53125], [228.0, 8.06818181818182], [229.0, 6.586956521739131], [230.0, 6.56842105263158], [231.0, 7.168539325842694], [232.0, 6.959183673469388], [233.0, 10.411111111111108], [234.0, 8.999999999999996], [235.0, 10.609756097560975], [236.0, 11.965909090909092], [237.0, 12.010526315789475], [238.0, 13.757894736842106], [239.0, 12.676767676767676], [240.0, 12.807692307692305], [241.0, 13.889908256880732], [242.0, 11.617647058823529], [243.0, 28.44859813084113], [244.0, 39.489583333333336], [245.0, 29.73737373737373], [246.0, 27.38461538461538], [247.0, 23.778846153846146], [248.0, 22.521367521367523], [249.0, 9.599999999999998], [250.0, 13.044943820224718], [251.0, 9.140127388535031], [252.0, 16.512195121951223], [253.0, 15.36046511627907], [254.0, 14.833333333333334], [255.0, 20.301075268817197], [257.0, 18.857142857142858], [256.0, 23.742268041237118], [258.0, 23.222222222222214], [259.0, 22.52054794520548], [260.0, 33.46341463414635], [261.0, 34.808695652173895], [262.0, 29.646341463414636], [263.0, 34.19047619047618], [264.0, 36.36190476190475], [270.0, 34.53658536585364], [271.0, 43.45161290322582], [268.0, 38.13829787234044], [269.0, 41.89719626168223], [265.0, 35.29591836734694], [266.0, 36.72440944881889], [267.0, 31.213483146067425], [273.0, 24.921259842519685], [272.0, 38.97590361445782], [274.0, 46.63333333333332], [275.0, 36.620689655172434], [276.0, 39.8888888888889], [277.0, 65.43678160919542], [278.0, 78.46846846846844], [279.0, 54.07407407407407], [280.0, 56.51425313568983], [286.0, 12.142857142857142], [287.0, 34.69565217391304], [284.0, 32.0], [285.0, 31.285714285714285], [281.0, 37.0], [282.0, 57.01282051282051], [283.0, 42.06666666666667], [290.0, 30.593749999999996], [288.0, 38.50000000000001], [289.0, 1.0], [291.0, 29.80188679245283], [300.0, 47.00000000000001], [301.0, 53.625000000000014], [303.0, 121.26829268292693], [302.0, 115.91269841269842], [292.0, 26.791304347826102], [293.0, 29.674157303370777], [294.0, 43.7710843373494], [295.0, 32.848837209302324], [296.0, 40.35185185185187], [297.0, 41.90410958904112], [298.0, 40.112149532710255], [299.0, 30.516853932584276], [305.0, 11.590909090909086], [304.0, 42.05263157894736], [306.0, 2.9350649350649345], [307.0, 5.232558139534885], [308.0, 4.129411764705883], [309.0, 5.91358024691358], [310.0, 10.22222222222222], [311.0, 11.409090909090907], [312.0, 14.946808510638293], [318.0, 19.769230769230774], [319.0, 9.52], [316.0, 21.930693069306933], [317.0, 21.410526315789475], [313.0, 18.23529411764707], [314.0, 20.835164835164825], [315.0, 20.595238095238084], [321.0, 6.209876543209877], [320.0, 15.07291666666667], [322.0, 14.173913043478262], [323.0, 23.519607843137248], [324.0, 15.428571428571427], [325.0, 26.894736842105267], [326.0, 30.01063829787234], [327.0, 26.230769230769234], [328.0, 28.463087248322147], [334.0, 25.816091954022994], [335.0, 19.697478991596643], [332.0, 13.870967741935484], [333.0, 13.40506329113924], [329.0, 21.68354430379747], [330.0, 22.177083333333336], [331.0, 16.078947368421066], [337.0, 11.429824561403507], [336.0, 10.847826086956529], [338.0, 8.54320987654321], [339.0, 13.548611111111109], [340.0, 13.875], [341.0, 10.365591397849464], [342.0, 16.876404494382026], [343.0, 20.30392156862745], [344.0, 20.792207792207797], [351.0, 13.388349514563108], [350.0, 35.79651162790698], [348.0, 44.94545454545456], [349.0, 43.07500000000002], [345.0, 34.04878048780487], [346.0, 37.31999999999999], [347.0, 39.27142857142858], [353.0, 2.576923076923076], [352.0, 3.0744680851063833], [354.0, 5.284313725490195], [355.0, 8.709999999999999], [356.0, 6.066666666666669], [357.0, 10.156862745098044], [358.0, 11.839285714285717], [359.0, 11.576923076923078], [360.0, 22.099999999999994], [366.0, 31.50877192982457], [367.0, 3.012195121951219], [364.0, 41.098484848484844], [365.0, 64.0161290322581], [361.0, 22.325301204819276], [362.0, 26.61904761904762], [363.0, 31.87323943661972], [369.0, 3.9777777777777783], [368.0, 5.20909090909091], [370.0, 7.695652173913043], [371.0, 14.439999999999998], [372.0, 17.66101694915254], [373.0, 23.75925925925926], [374.0, 26.18367346938775], [375.0, 32.4712643678161], [376.0, 41.69863013698629], [382.0, 89.30555555555559], [383.0, 100.49541284403671], [380.0, 74.40776699029124], [381.0, 88.06015037593986], [377.0, 49.42424242424245], [378.0, 56.5421686746988], [379.0, 61.37179487179486], [385.0, 94.3478260869565], [384.0, 107.0923076923077], [386.0, 69.82456140350875], [387.0, 50.423728813559315], [388.0, 37.59756097560976], [389.0, 27.01851851851852], [390.0, 21.588235294117656], [391.0, 17.867924528301888], [393.0, 28.439655172413794], [392.0, 19.69642857142857], [398.0, 7.7722772277227765], [399.0, 12.67647058823529], [396.0, 22.74489795918368], [397.0, 7.821428571428572], [394.0, 42.16161616161615], [395.0, 41.03603603603606], [401.0, 16.94252873563218], [400.0, 15.196721311475413], [402.0, 23.34939759036145], [403.0, 30.44578313253012], [404.0, 31.82022471910112], [405.0, 36.50666666666667], [406.0, 40.58241758241757], [407.0, 49.51724137931034], [408.0, 56.08783783783783], [414.0, 31.341880341880355], [415.0, 9.10666666666667], [412.0, 70.88028169014089], [413.0, 62.97894736842103], [409.0, 68.36363636363636], [410.0, 66.65116279069763], [411.0, 69.20454545454547], [417.0, 7.3258426966292145], [416.0, 12.846938775510203], [418.0, 10.96470588235294], [419.0, 15.219780219780223], [420.0, 13.09090909090909], [421.0, 22.873417721518983], [422.0, 26.368421052631575], [423.0, 27.53731343283582], [425.0, 28.589285714285705], [428.0, 38.83703703703704], [429.0, 22.74358974358974], [430.0, 28.38202247191012], [431.0, 32.08988764044944], [424.0, 22.8], [426.0, 41.386666666666656], [427.0, 53.05999999999998], [433.0, 53.48421052631578], [432.0, 35.72527472527473], [434.0, 46.54716981132074], [435.0, 56.53508771929824], [436.0, 34.303370786516844], [437.0, 31.65384615384616], [438.0, 31.324324324324333], [439.0, 27.416666666666664], [440.0, 32.75999999999999], [446.0, 19.413461538461537], [447.0, 16.650485436893195], [444.0, 31.095477386934665], [445.0, 19.848484848484844], [441.0, 46.06185567010307], [442.0, 34.747572815533964], [443.0, 43.409090909090914], [449.0, 15.911504424778766], [448.0, 13.19587628865979], [450.0, 12.28125], [451.0, 17.810000000000006], [452.0, 8.865384615384617], [453.0, 11.500000000000002], [454.0, 26.990196078431367], [455.0, 24.428571428571427], [456.0, 18.99230769230769], [462.0, 8.873417721518988], [463.0, 22.747368421052627], [460.0, 12.258823529411767], [461.0, 13.903508771929822], [457.0, 5.625000000000003], [458.0, 11.096153846153847], [459.0, 5.700000000000002], [465.0, 24.223684210526304], [464.0, 20.642857142857142], [466.0, 18.72727272727273], [467.0, 11.70731707317073], [468.0, 19.723076923076924], [469.0, 9.315789473684207], [470.0, 28.44285714285714], [471.0, 31.850467289719614], [472.0, 28.555555555555557], [478.0, 61.33613445378152], [479.0, 64.64835164835165], [476.0, 51.38095238095239], [477.0, 60.173913043478265], [473.0, 41.26190476190475], [474.0, 47.97222222222222], [475.0, 49.422535211267615], [481.0, 47.575757575757564], [480.0, 67.34545454545453], [482.0, 23.473684210526315], [483.0, 36.45263157894735], [484.0, 18.88636363636364], [485.0, 8.3304347826087], [486.0, 6.554347826086956], [487.0, 15.666666666666664], [488.0, 14.831460674157302], [494.0, 47.59036144578312], [495.0, 52.26241134751773], [492.0, 39.64556962025316], [493.0, 39.71875000000001], [489.0, 20.396039603960396], [490.0, 24.273809523809522], [491.0, 26.602150537634405], [497.0, 2.5517241379310343], [496.0, 39.048780487804905], [498.0, 4.142857142857143], [499.0, 4.0], [500.0, 7.486486486486487], [501.0, 6.715789473684214], [502.0, 8.58333333333333], [503.0, 14.152777777777779], [504.0, 14.345454545454547], [510.0, 31.689655172413794], [511.0, 36.143790849673195], [508.0, 20.352941176470583], [509.0, 33.08333333333334], [505.0, 19.358490566037737], [506.0, 22.24770642201835], [507.0, 23.803149606299204], [515.0, 48.38947368421055], [512.0, 39.67948717948718], [514.0, 80.6857142857143], [513.0, 56.01612903225807], [526.0, 25.163265306122447], [527.0, 26.775700934579437], [524.0, 20.36274509803922], [525.0, 22.45744680851064], [516.0, 4.329545454545455], [517.0, 2.1527777777777786], [518.0, 5.7979797979797985], [519.0, 6.274725274725277], [528.0, 29.742424242424246], [542.0, 4.5340909090909065], [543.0, 9.359375000000002], [540.0, 71.60919540229882], [541.0, 14.148514851485142], [538.0, 83.53424657534246], [539.0, 74.16129032258065], [536.0, 93.41269841269842], [537.0, 82.04210526315788], [529.0, 39.81818181818181], [530.0, 39.36458333333333], [531.0, 46.00000000000001], [532.0, 58.449735449735435], [533.0, 68.9878048780488], [534.0, 70.72619047619048], [535.0, 81.86274509803923], [520.0, 7.079545454545456], [521.0, 12.937499999999998], [522.0, 11.562500000000002], [523.0, 15.797619047619044], [547.0, 23.487999999999992], [544.0, 13.970873786407765], [558.0, 63.180000000000014], [559.0, 69.24336283185833], [556.0, 64.14285714285714], [557.0, 64.08461538461538], [554.0, 45.861538461538444], [555.0, 51.25862068965516], [545.0, 12.462962962962965], [546.0, 8.27710843373494], [548.0, 29.298245614035096], [549.0, 25.83505154639176], [550.0, 31.758620689655178], [551.0, 37.44186046511628], [560.0, 50.328244274809165], [575.0, 36.44230769230769], [572.0, 26.285714285714278], [573.0, 30.884057971014492], [574.0, 45.46052631578947], [570.0, 22.356321839080465], [571.0, 25.425531914893615], [568.0, 12.257731958762884], [569.0, 16.201923076923077], [561.0, 4.026666666666667], [562.0, 15.42696629213483], [563.0, 12.134831460674157], [564.0, 11.102040816326534], [565.0, 9.275510204081638], [566.0, 12.196428571428568], [567.0, 13.037037037037038], [552.0, 37.287234042553195], [553.0, 44.499999999999986], [579.0, 5.795698924731184], [576.0, 6.946808510638295], [590.0, 31.63999999999999], [591.0, 34.75999999999999], [588.0, 24.27358490566037], [589.0, 23.60483870967742], [586.0, 18.456310679611647], [587.0, 18.87640449438203], [577.0, 5.765432098765432], [578.0, 4.709677419354837], [580.0, 8.362637362637361], [581.0, 10.5625], [582.0, 12.247311827956988], [583.0, 15.999999999999995], [592.0, 31.019230769230756], [606.0, 8.505617977528091], [607.0, 11.603960396039602], [604.0, 21.51546391752578], [603.0, 55.5], [602.0, 34.666666666666636], [605.0, 3.0972222222222228], [600.0, 20.273684210526312], [601.0, 21.784615384615382], [593.0, 27.534883720930225], [594.0, 15.842592592592585], [595.0, 14.000000000000002], [596.0, 9.323529411764705], [597.0, 12.928571428571425], [598.0, 13.905172413793109], [599.0, 13.5679012345679], [584.0, 10.488188976377955], [585.0, 13.264367816091951], [611.0, 13.082474226804127], [608.0, 7.694444444444444], [622.0, 86.30188679245289], [623.0, 81.06250000000001], [620.0, 67.11267605633803], [621.0, 77.72649572649576], [618.0, 52.42028985507246], [619.0, 60.16981132075472], [609.0, 5.920353982300888], [610.0, 8.035087719298245], [612.0, 13.692307692307693], [613.0, 20.075757575757578], [614.0, 29.107526881720435], [615.0, 37.66999999999996], [624.0, 97.19266055045868], [638.0, 6.9702970297029685], [639.0, 16.419047619047618], [636.0, 10.876288659793815], [637.0, 10.171717171717171], [634.0, 12.622641509433965], [635.0, 14.638888888888891], [632.0, 7.713043478260868], [633.0, 4.60185185185185], [625.0, 105.27906976744185], [626.0, 109.5185185185185], [627.0, 93.45771144278612], [629.0, 85.5488721804511], [628.0, 68.4], [630.0, 26.439393939393938], [631.0, 15.854166666666666], [616.0, 39.78651685393259], [617.0, 46.50406504065043], [643.0, 18.2], [640.0, 11.97637795275591], [654.0, 18.121951219512205], [655.0, 22.64189189189188], [652.0, 32.42391304347826], [653.0, 24.516393442622952], [650.0, 36.095238095238074], [651.0, 27.931372549019603], [641.0, 23.120689655172413], [642.0, 25.150442477876112], [644.0, 25.41463414634147], [645.0, 29.515873015873012], [646.0, 27.550000000000004], [647.0, 32.72727272727272], [656.0, 17.540229885057464], [670.0, 9.731092436974793], [671.0, 16.51724137931035], [668.0, 12.615384615384617], [669.0, 13.7304347826087], [666.0, 20.747826086956533], [667.0, 14.90697674418605], [664.0, 22.55140186915887], [665.0, 14.914285714285722], [657.0, 23.35051546391751], [658.0, 21.69607843137254], [659.0, 22.468085106382972], [660.0, 25.45901639344262], [661.0, 25.392857142857146], [662.0, 27.26851851851852], [663.0, 39.8314606741573], [648.0, 35.93103448275864], [649.0, 35.35632183908046], [675.0, 32.626865671641774], [672.0, 13.824561403508774], [686.0, 33.43548387096775], [687.0, 38.533898305084726], [684.0, 35.32407407407406], [685.0, 29.314516129032253], [682.0, 21.105960264900677], [683.0, 19.924528301886788], [673.0, 14.85227272727273], [674.0, 26.965909090909097], [676.0, 38.208333333333314], [677.0, 30.67567567567566], [678.0, 14.342857142857143], [679.0, 23.064000000000007], [688.0, 36.84905660377358], [702.0, 49.722222222222214], [703.0, 45.614678899082584], [700.0, 43.06000000000001], [701.0, 45.1904761904762], [698.0, 44.52380952380951], [699.0, 46.42528735632184], [696.0, 28.268518518518526], [697.0, 36.937499999999986], [689.0, 51.689655172413794], [690.0, 16.990740740740748], [691.0, 11.330508474576266], [692.0, 11.069306930693065], [693.0, 11.988636363636363], [694.0, 18.914285714285718], [695.0, 23.79746835443038], [680.0, 7.725000000000001], [681.0, 24.106666666666662], [707.0, 49.45833333333332], [704.0, 54.3469387755102], [718.0, 95.88990825688076], [719.0, 61.33333333333334], [716.0, 89.79687500000001], [717.0, 149.7122302158274], [714.0, 110.85314685314684], [715.0, 27.777777777777775], [705.0, 50.36538461538463], [706.0, 49.82758620689655], [708.0, 49.08421052631581], [709.0, 60.417266187050345], [710.0, 61.95999999999998], [711.0, 58.00000000000001], [720.0, 36.13559322033898], [734.0, 11.822033898305085], [735.0, 13.13], [732.0, 14.025862068965523], [733.0, 6.87962962962963], [730.0, 13.705035971223014], [731.0, 6.971153846153843], [728.0, 12.166666666666668], [729.0, 14.391891891891891], [721.0, 68.88549618320609], [722.0, 52.272727272727266], [723.0, 62.96551724137931], [724.0, 67.22222222222221], [725.0, 61.10958904109588], [726.0, 41.1513157894737], [727.0, 26.80851063829788], [712.0, 60.62237762237764], [713.0, 58.1758241758242], [737.0, 18.491071428571423], [736.0, 10.44859813084112], [749.0, 8.173469387755102], [750.0, 29.50596156449178], [738.0, 13.357798165137611], [739.0, 17.695652173913047], [740.0, 22.761006289308188], [741.0, 23.53278688524591], [743.0, 32.470588235294116], [742.0, 39.39999999999999], [745.0, 46.951219512195124], [744.0, 44.207650273224054], [746.0, 5.172839506172838], [747.0, 10.842592592592592], [748.0, 4.199999999999999]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[739.5317174733093, 29.43227340590164]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 750.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 90826.2, "minX": 1.74314202E12, "maxY": 948041.2666666667, "series": [{"data": [[1.7431422E12, 938502.6], [1.74314238E12, 939329.9333333333], [1.7431425E12, 941159.8], [1.74314202E12, 476349.3333333333], [1.74314232E12, 947841.7333333333], [1.74314262E12, 245567.13333333333], [1.74314214E12, 878253.2666666667], [1.74314244E12, 940493.0666666667], [1.74314208E12, 806114.6666666666], [1.74314226E12, 948041.2666666667], [1.74314256E12, 902503.8666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7431422E12, 347117.4], [1.74314238E12, 347423.4], [1.7431425E12, 348100.2], [1.74314202E12, 176184.0], [1.74314232E12, 350571.6], [1.74314262E12, 90826.2], [1.74314214E12, 324833.4], [1.74314244E12, 347853.6], [1.74314208E12, 298152.0], [1.74314226E12, 350645.4], [1.74314256E12, 333802.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74314262E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 26.04067869868074, "minX": 1.74314202E12, "maxY": 33.051672301376094, "series": [{"data": [[1.7431422E12, 29.708099334691784], [1.74314238E12, 31.70398885049213], [1.7431425E12, 29.16035555279816], [1.74314202E12, 27.64257253780153], [1.74314232E12, 29.928019839599177], [1.74314262E12, 29.584078162468533], [1.74314214E12, 26.04067869868074], [1.74314244E12, 27.960336762361834], [1.74314208E12, 33.051672301376094], [1.74314226E12, 26.318321586423057], [1.74314256E12, 32.319850522525115]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74314262E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 25.060993112161178, "minX": 1.74314202E12, "maxY": 31.30735933349411, "series": [{"data": [[1.7431422E12, 28.61688005268533], [1.74314238E12, 30.615098464870574], [1.7431425E12, 28.039536891964346], [1.74314202E12, 27.119452390682305], [1.74314232E12, 28.93991641079944], [1.74314262E12, 29.124516934540758], [1.74314214E12, 25.060993112161178], [1.74314244E12, 26.80480408999667], [1.74314208E12, 31.30735933349411], [1.74314226E12, 25.354491460603338], [1.74314256E12, 30.965644985602268]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74314262E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 15.8017765414517, "minX": 1.74314202E12, "maxY": 21.401098768413572, "series": [{"data": [[1.7431422E12, 17.949845210870805], [1.74314238E12, 19.434530316611173], [1.7431425E12, 18.110285486765363], [1.74314202E12, 19.34405394360434], [1.74314232E12, 18.118652509216677], [1.74314262E12, 18.21728532075554], [1.74314214E12, 15.8017765414517], [1.74314244E12, 17.17177053795071], [1.74314208E12, 21.401098768413572], [1.74314226E12, 16.139484504858782], [1.74314256E12, 20.069475750353266]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74314262E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74314202E12, "maxY": 2901.0, "series": [{"data": [[1.7431422E12, 2901.0], [1.74314238E12, 1267.0], [1.7431425E12, 910.0], [1.74314202E12, 1033.0], [1.74314232E12, 868.0], [1.74314262E12, 1198.0], [1.74314214E12, 1246.0], [1.74314244E12, 1032.0], [1.74314208E12, 2047.0], [1.74314226E12, 860.0], [1.74314256E12, 1147.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7431422E12, 0.0], [1.74314238E12, 0.0], [1.7431425E12, 0.0], [1.74314202E12, 0.0], [1.74314232E12, 0.0], [1.74314262E12, 0.0], [1.74314214E12, 0.0], [1.74314244E12, 0.0], [1.74314208E12, 0.0], [1.74314226E12, 0.0], [1.74314256E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7431422E12, 45.0], [1.74314238E12, 61.0], [1.7431425E12, 59.0], [1.74314202E12, 69.0], [1.74314232E12, 80.0], [1.74314262E12, 57.0], [1.74314214E12, 42.0], [1.74314244E12, 46.0], [1.74314208E12, 51.0], [1.74314226E12, 43.0], [1.74314256E12, 73.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7431422E12, 219.0], [1.74314238E12, 638.9900000000016], [1.7431425E12, 137.0], [1.74314202E12, 193.9900000000016], [1.74314232E12, 145.0], [1.74314262E12, 193.0], [1.74314214E12, 128.9900000000016], [1.74314244E12, 114.0], [1.74314208E12, 220.9900000000016], [1.74314226E12, 131.0], [1.74314256E12, 191.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7431422E12, 16.0], [1.74314238E12, 20.0], [1.7431425E12, 15.0], [1.74314202E12, 23.0], [1.74314232E12, 18.0], [1.74314262E12, 16.0], [1.74314214E12, 15.0], [1.74314244E12, 17.0], [1.74314208E12, 18.0], [1.74314226E12, 15.0], [1.74314256E12, 22.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7431422E12, 74.0], [1.74314238E12, 103.0], [1.7431425E12, 87.0], [1.74314202E12, 98.0], [1.74314232E12, 105.0], [1.74314262E12, 89.0], [1.74314214E12, 59.0], [1.74314244E12, 59.0], [1.74314208E12, 69.0], [1.74314226E12, 66.0], [1.74314256E12, 106.95000000000073]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74314262E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 127.0, "maxY": 115.0, "series": [{"data": [[127.0, 4.0], [390.0, 4.0], [641.0, 4.0], [895.0, 5.0], [1139.0, 4.0], [1204.0, 18.0], [1395.0, 5.0], [1608.0, 6.0], [1688.0, 83.0], [1685.0, 41.0], [1767.0, 38.0], [1770.0, 46.0], [1847.0, 46.0], [1915.0, 6.0], [1934.0, 95.0], [2108.0, 115.0], [2212.0, 14.0], [2294.0, 15.0], [2364.0, 35.0], [2426.0, 14.0], [2372.0, 24.0], [2410.0, 12.0], [2330.0, 57.0], [2456.0, 20.0], [2512.0, 39.0], [2508.0, 48.0], [2556.0, 21.0], [2468.0, 17.0], [2566.0, 16.0], [2590.0, 11.0], [2680.0, 28.0], [2572.0, 18.0], [2594.0, 23.0], [2602.0, 17.5], [2610.0, 17.0], [2612.0, 13.0], [2636.0, 49.0], [2648.0, 14.0], [2748.0, 23.0], [2754.0, 21.0], [2720.0, 22.0], [2736.0, 29.0], [2744.0, 20.0], [2756.0, 24.0], [2768.0, 22.0], [2776.0, 19.0], [2782.0, 24.0], [2810.0, 27.0], [2808.0, 38.0], [2790.0, 28.0], [2834.0, 30.0], [2864.0, 14.0], [2862.0, 15.0], [2870.0, 25.0], [2856.0, 28.0], [2836.0, 23.0], [2886.0, 17.0], [2892.0, 13.0], [2880.0, 24.0], [2884.0, 19.0], [2896.0, 12.0], [2838.0, 13.0], [2934.0, 15.0], [2938.0, 21.0], [2922.0, 26.0], [2846.0, 20.0], [2872.0, 16.0], [3042.0, 15.0], [2982.0, 18.0], [2980.0, 22.0], [2988.0, 17.0], [3040.0, 18.0], [3002.0, 35.0], [2990.0, 35.0], [2964.0, 29.0], [2970.0, 21.0], [2956.0, 14.0], [2946.0, 14.0], [3020.0, 17.0], [3024.0, 34.0], [3026.0, 28.0], [3022.0, 15.0], [3034.0, 11.0], [3044.0, 24.0], [3056.0, 20.0], [3046.0, 35.0], [3052.0, 20.0], [3014.0, 15.0], [3066.0, 35.0], [3094.0, 15.0], [3166.0, 17.0], [3164.0, 19.0], [3150.0, 17.0], [3152.0, 18.0], [3160.0, 24.0], [3154.0, 34.0], [3158.0, 34.0], [3148.0, 16.0], [3144.0, 18.0], [3128.0, 21.0], [3130.0, 15.0], [3132.0, 14.0], [3134.0, 19.0], [3074.0, 19.0], [3086.0, 18.0], [3082.0, 23.0], [3090.0, 12.0], [3142.0, 26.0], [3126.0, 20.0], [3116.0, 16.0], [3118.0, 17.0], [3114.0, 15.0], [3110.0, 19.0], [3120.0, 16.0], [3124.0, 17.0], [3192.0, 21.0], [3190.0, 19.0], [3196.0, 23.0], [3136.0, 21.0], [3140.0, 20.0], [3170.0, 13.0], [3178.0, 17.0], [3186.0, 20.0], [3184.0, 30.0], [3182.0, 23.0], [3180.0, 18.0], [3188.0, 18.0], [3096.0, 24.0], [3306.0, 12.0], [3218.0, 14.0], [3228.0, 13.0], [3230.0, 20.0], [3298.0, 14.0], [3300.0, 16.0], [3304.0, 30.0], [3308.0, 15.0], [3222.0, 14.0], [3224.0, 15.0], [3244.0, 14.0], [3236.0, 14.0], [3246.0, 14.0], [3250.0, 27.0], [3252.0, 14.0], [3254.0, 28.0], [3270.0, 12.0], [3326.0, 24.0], [3264.0, 16.0], [3268.0, 20.0], [3266.0, 20.0], [3312.0, 17.0], [3322.0, 13.0], [3324.0, 22.0], [3314.0, 17.0], [3318.0, 16.0], [3284.0, 14.0], [3278.0, 14.0], [3276.0, 18.0], [3280.0, 17.0], [3282.0, 11.0], [3286.0, 18.0], [3294.0, 24.0], [3292.0, 15.0], [3274.0, 18.0], [3214.0, 36.0], [3212.0, 15.0], [3258.0, 20.0], [3260.0, 19.0], [3200.0, 24.0], [3204.0, 14.0], [3208.0, 15.0], [3206.0, 16.0], [3202.0, 19.0], [3210.0, 22.0], [3384.0, 23.0], [3444.0, 19.0], [3366.0, 18.0], [3364.0, 24.0], [3330.0, 22.0], [3334.0, 16.0], [3378.0, 38.0], [3376.0, 14.0], [3368.0, 17.0], [3374.0, 16.0], [3370.0, 17.0], [3452.0, 15.0], [3416.0, 12.0], [3360.0, 11.0], [3432.0, 24.0], [3434.0, 19.0], [3440.0, 16.0], [3438.0, 12.0], [3356.0, 15.0], [3428.0, 25.0], [3426.0, 43.0], [3358.0, 53.0], [3348.0, 12.0], [3344.0, 18.0], [3350.0, 22.0], [3352.0, 29.0], [3464.0, 15.0], [3484.0, 17.0], [3486.0, 13.0], [3498.0, 19.0], [3502.0, 21.0], [3474.0, 19.0], [3468.0, 25.0], [3512.0, 21.0], [3456.0, 30.0], [3506.0, 20.0], [3612.0, 16.0], [2139.0, 8.0], [2163.0, 28.0], [2299.0, 27.0], [2239.0, 41.0], [2321.0, 11.0], [2373.0, 26.0], [2357.0, 34.0], [2339.0, 10.0], [2385.0, 42.0], [2337.0, 18.0], [2427.0, 26.0], [2305.0, 26.0], [2451.0, 28.0], [2459.0, 27.0], [2481.0, 23.0], [2479.0, 16.0], [2487.0, 25.0], [2527.0, 22.0], [2525.0, 17.0], [2433.0, 20.0], [2493.0, 24.0], [2477.0, 21.0], [2587.0, 13.0], [2597.0, 14.0], [2659.0, 11.0], [2571.0, 17.0], [2627.0, 11.0], [2651.0, 25.0], [2707.0, 38.0], [2693.0, 20.0], [2737.0, 32.0], [2721.0, 31.0], [2731.0, 18.0], [2769.0, 46.0], [2779.0, 35.0], [2815.0, 14.0], [2801.0, 17.0], [2795.0, 15.0], [2787.0, 21.0], [2799.0, 19.0], [2717.0, 18.0], [2749.0, 15.0], [2829.0, 18.0], [2817.0, 28.0], [2863.0, 36.0], [2859.0, 17.0], [2861.0, 24.0], [2887.0, 22.0], [2893.0, 19.0], [2889.0, 14.0], [2903.0, 18.0], [2905.0, 8.0], [2939.0, 18.0], [2931.0, 20.0], [2871.0, 39.0], [3045.0, 17.0], [2971.0, 15.0], [2981.0, 14.0], [3001.0, 12.0], [2973.0, 33.0], [2951.0, 12.0], [3023.0, 11.0], [3029.0, 10.0], [3031.0, 15.0], [3035.0, 12.0], [3065.0, 9.0], [3063.0, 19.0], [3057.0, 15.0], [3053.0, 23.0], [3055.0, 13.0], [3049.0, 12.0], [3071.0, 15.0], [3143.0, 13.0], [3095.0, 17.0], [3165.0, 17.5], [3151.0, 14.0], [3163.0, 24.0], [3161.0, 19.0], [3155.0, 20.0], [3159.0, 15.0], [3153.0, 22.0], [3147.0, 29.0], [3145.0, 10.0], [3075.0, 14.0], [3127.0, 26.0], [3135.0, 23.0], [3133.0, 19.0], [3131.0, 30.0], [3089.0, 17.0], [3083.0, 18.0], [3087.0, 23.0], [3077.0, 28.0], [3119.0, 19.0], [3117.0, 12.0], [3115.0, 16.0], [3111.0, 23.0], [3113.0, 19.0], [3121.0, 24.0], [3125.0, 20.0], [3193.0, 36.0], [3189.0, 15.0], [3199.0, 17.0], [3139.0, 23.0], [3141.0, 25.0], [3137.0, 38.0], [3195.0, 30.0], [3173.0, 18.0], [3099.0, 16.0], [3101.0, 27.0], [3171.0, 22.0], [3175.0, 24.0], [3179.0, 17.0], [3177.0, 13.0], [3185.0, 26.0], [3183.0, 25.0], [3097.0, 26.0], [3227.0, 16.0], [3231.0, 11.0], [3299.0, 16.0], [3301.0, 19.0], [3303.0, 19.0], [3223.0, 17.0], [3221.0, 23.0], [3219.0, 15.0], [3225.0, 11.0], [3257.0, 12.0], [3241.0, 28.0], [3235.0, 22.0], [3245.0, 21.0], [3249.0, 20.0], [3247.0, 48.0], [3251.0, 22.0], [3255.0, 22.0], [3309.0, 26.0], [3273.0, 18.0], [3327.0, 16.0], [3265.0, 19.0], [3267.0, 11.0], [3269.0, 20.0], [3323.0, 13.0], [3311.0, 15.0], [3317.0, 16.0], [3313.0, 40.0], [3319.0, 16.0], [3321.0, 11.0], [3279.0, 10.0], [3275.0, 18.0], [3281.0, 16.0], [3283.0, 30.0], [3285.0, 12.0], [3289.0, 17.0], [3291.0, 25.0], [3293.0, 30.0], [3217.0, 20.0], [3215.0, 22.0], [3213.0, 17.0], [3263.0, 18.0], [3261.0, 29.0], [3259.0, 20.0], [3201.0, 26.0], [3205.0, 24.0], [3209.0, 15.0], [3207.0, 19.0], [3357.0, 15.0], [3339.0, 17.0], [3363.0, 22.0], [3335.0, 9.0], [3333.0, 20.0], [3331.0, 14.0], [3379.0, 11.0], [3389.0, 13.0], [3377.0, 25.0], [3375.0, 14.0], [3455.0, 11.0], [3449.0, 22.0], [3397.0, 12.0], [3399.0, 14.0], [3419.0, 16.0], [3417.0, 16.0], [3361.0, 18.0], [3437.0, 13.0], [3441.0, 20.0], [3433.0, 26.0], [3359.0, 15.0], [3353.0, 21.0], [3345.0, 13.0], [3347.0, 20.0], [3343.0, 25.0], [3349.0, 16.0], [3491.0, 18.0], [3507.0, 16.0], [3483.0, 11.0], [3479.0, 15.0], [3461.0, 16.0], [3469.0, 17.0], [3595.0, 13.0], [3593.0, 12.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3612.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 127.0, "maxY": 114.5, "series": [{"data": [[127.0, 4.0], [390.0, 4.0], [641.0, 4.0], [895.0, 5.0], [1139.0, 4.0], [1204.0, 18.0], [1395.0, 5.0], [1608.0, 6.0], [1688.0, 83.0], [1685.0, 41.0], [1767.0, 37.0], [1770.0, 46.0], [1847.0, 46.0], [1915.0, 6.0], [1934.0, 95.0], [2108.0, 114.5], [2212.0, 14.0], [2294.0, 15.0], [2364.0, 34.5], [2426.0, 14.0], [2372.0, 24.0], [2410.0, 12.0], [2330.0, 56.0], [2456.0, 19.0], [2512.0, 38.0], [2508.0, 48.0], [2556.0, 21.0], [2468.0, 17.0], [2566.0, 16.0], [2590.0, 11.0], [2680.0, 27.0], [2572.0, 18.0], [2594.0, 23.0], [2602.0, 17.0], [2610.0, 16.0], [2612.0, 13.0], [2636.0, 49.0], [2648.0, 14.0], [2748.0, 22.0], [2754.0, 21.0], [2720.0, 22.0], [2736.0, 29.0], [2744.0, 20.0], [2756.0, 23.0], [2768.0, 22.0], [2776.0, 19.0], [2782.0, 24.0], [2810.0, 27.0], [2808.0, 38.0], [2790.0, 28.0], [2834.0, 30.0], [2864.0, 14.0], [2862.0, 14.0], [2870.0, 25.0], [2856.0, 27.0], [2836.0, 22.0], [2886.0, 17.0], [2892.0, 13.0], [2880.0, 23.0], [2884.0, 19.0], [2896.0, 12.0], [2838.0, 13.0], [2934.0, 15.0], [2938.0, 20.5], [2922.0, 25.0], [2846.0, 20.0], [2872.0, 16.0], [3042.0, 15.0], [2982.0, 18.0], [2980.0, 21.0], [2988.0, 17.0], [3040.0, 18.0], [3002.0, 34.0], [2990.0, 35.0], [2964.0, 29.0], [2970.0, 21.0], [2956.0, 14.0], [2946.0, 14.0], [3020.0, 17.0], [3024.0, 34.0], [3026.0, 26.0], [3022.0, 14.0], [3034.0, 11.0], [3044.0, 24.0], [3056.0, 20.0], [3046.0, 34.0], [3052.0, 19.0], [3014.0, 15.0], [3066.0, 34.0], [3094.0, 15.0], [3166.0, 16.0], [3164.0, 19.0], [3150.0, 17.0], [3152.0, 18.0], [3160.0, 24.0], [3154.0, 34.0], [3158.0, 34.0], [3148.0, 15.0], [3144.0, 17.0], [3128.0, 21.0], [3130.0, 15.0], [3132.0, 14.0], [3134.0, 19.0], [3074.0, 18.0], [3086.0, 18.0], [3082.0, 23.0], [3090.0, 12.0], [3142.0, 26.0], [3126.0, 20.0], [3116.0, 15.0], [3118.0, 17.0], [3114.0, 15.0], [3110.0, 19.0], [3120.0, 16.0], [3124.0, 17.0], [3192.0, 20.0], [3190.0, 19.0], [3196.0, 22.0], [3136.0, 21.0], [3140.0, 20.0], [3170.0, 13.0], [3178.0, 17.0], [3186.0, 20.0], [3184.0, 29.0], [3182.0, 22.0], [3180.0, 18.0], [3188.0, 18.0], [3096.0, 24.0], [3306.0, 12.0], [3218.0, 14.0], [3228.0, 13.0], [3230.0, 20.0], [3298.0, 14.0], [3300.0, 16.0], [3304.0, 30.0], [3308.0, 15.0], [3222.0, 13.0], [3224.0, 15.0], [3244.0, 14.0], [3236.0, 14.0], [3246.0, 13.0], [3250.0, 27.0], [3252.0, 14.0], [3254.0, 28.0], [3270.0, 12.0], [3326.0, 24.0], [3264.0, 16.0], [3268.0, 20.0], [3266.0, 20.0], [3312.0, 17.0], [3322.0, 13.0], [3324.0, 22.0], [3314.0, 17.0], [3318.0, 16.0], [3284.0, 14.0], [3278.0, 14.0], [3276.0, 18.0], [3280.0, 17.0], [3282.0, 11.0], [3286.0, 18.0], [3294.0, 23.5], [3292.0, 15.0], [3274.0, 18.0], [3214.0, 36.0], [3212.0, 15.0], [3258.0, 20.0], [3260.0, 19.0], [3200.0, 24.0], [3204.0, 14.0], [3208.0, 15.0], [3206.0, 16.0], [3202.0, 19.0], [3210.0, 22.0], [3384.0, 23.0], [3444.0, 19.0], [3366.0, 17.0], [3364.0, 24.0], [3330.0, 20.0], [3334.0, 16.0], [3378.0, 37.0], [3376.0, 14.0], [3368.0, 16.0], [3374.0, 16.0], [3370.0, 17.0], [3452.0, 14.0], [3416.0, 12.0], [3360.0, 10.0], [3432.0, 24.0], [3434.0, 19.0], [3440.0, 16.0], [3438.0, 12.0], [3356.0, 15.0], [3428.0, 25.0], [3426.0, 43.0], [3358.0, 53.0], [3348.0, 12.0], [3344.0, 18.0], [3350.0, 22.0], [3352.0, 29.0], [3464.0, 15.0], [3484.0, 17.0], [3486.0, 13.0], [3498.0, 18.0], [3502.0, 20.0], [3474.0, 19.0], [3468.0, 25.0], [3512.0, 21.0], [3456.0, 30.0], [3506.0, 20.0], [3612.0, 16.0], [2139.0, 7.0], [2163.0, 28.0], [2299.0, 26.0], [2239.0, 41.0], [2321.0, 11.0], [2373.0, 26.0], [2357.0, 34.0], [2339.0, 9.0], [2385.0, 41.0], [2337.0, 18.0], [2427.0, 26.0], [2305.0, 26.0], [2451.0, 28.0], [2459.0, 27.0], [2481.0, 23.0], [2479.0, 16.0], [2487.0, 24.0], [2527.0, 22.0], [2525.0, 17.0], [2433.0, 20.0], [2493.0, 24.0], [2477.0, 21.0], [2587.0, 13.0], [2597.0, 13.0], [2659.0, 11.0], [2571.0, 17.0], [2627.0, 11.0], [2651.0, 24.0], [2707.0, 37.0], [2693.0, 19.0], [2737.0, 32.0], [2721.0, 31.0], [2731.0, 18.0], [2769.0, 46.0], [2779.0, 35.0], [2815.0, 14.0], [2801.0, 17.0], [2795.0, 15.0], [2787.0, 21.0], [2799.0, 19.0], [2717.0, 18.0], [2749.0, 15.0], [2829.0, 18.0], [2817.0, 28.0], [2863.0, 36.0], [2859.0, 17.0], [2861.0, 24.0], [2887.0, 22.0], [2893.0, 19.0], [2889.0, 13.0], [2903.0, 18.0], [2905.0, 8.0], [2939.0, 17.0], [2931.0, 20.0], [2871.0, 37.0], [3045.0, 17.0], [2971.0, 14.0], [2981.0, 14.0], [3001.0, 12.0], [2973.0, 32.0], [2951.0, 12.0], [3023.0, 11.0], [3029.0, 10.0], [3031.0, 15.0], [3035.0, 12.0], [3065.0, 9.0], [3063.0, 19.0], [3057.0, 15.0], [3053.0, 23.0], [3055.0, 13.0], [3049.0, 12.0], [3071.0, 15.0], [3143.0, 13.0], [3095.0, 17.0], [3165.0, 17.0], [3151.0, 14.0], [3163.0, 23.0], [3161.0, 18.0], [3155.0, 20.0], [3159.0, 15.0], [3153.0, 22.0], [3147.0, 29.0], [3145.0, 10.0], [3075.0, 14.0], [3127.0, 26.0], [3135.0, 23.0], [3133.0, 18.5], [3131.0, 30.0], [3089.0, 17.0], [3083.0, 18.0], [3087.0, 23.0], [3077.0, 28.0], [3119.0, 19.0], [3117.0, 12.0], [3115.0, 16.0], [3111.0, 23.0], [3113.0, 19.0], [3121.0, 24.0], [3125.0, 20.0], [3193.0, 35.0], [3189.0, 15.0], [3199.0, 16.0], [3139.0, 22.0], [3141.0, 25.0], [3137.0, 38.0], [3195.0, 30.0], [3173.0, 17.0], [3099.0, 16.0], [3101.0, 27.0], [3171.0, 21.0], [3175.0, 23.0], [3179.0, 17.0], [3177.0, 13.0], [3185.0, 26.0], [3183.0, 25.0], [3097.0, 25.0], [3227.0, 16.0], [3231.0, 11.0], [3299.0, 15.0], [3301.0, 18.0], [3303.0, 19.0], [3223.0, 17.0], [3221.0, 23.0], [3219.0, 15.0], [3225.0, 11.0], [3257.0, 12.0], [3241.0, 28.0], [3235.0, 22.0], [3245.0, 21.0], [3249.0, 20.0], [3247.0, 48.0], [3251.0, 22.0], [3255.0, 21.0], [3309.0, 26.0], [3273.0, 18.0], [3327.0, 16.0], [3265.0, 18.0], [3267.0, 11.0], [3269.0, 20.0], [3323.0, 13.0], [3311.0, 15.0], [3317.0, 16.0], [3313.0, 40.0], [3319.0, 15.0], [3321.0, 11.0], [3279.0, 10.0], [3275.0, 18.0], [3281.0, 16.0], [3283.0, 30.0], [3285.0, 12.0], [3289.0, 17.0], [3291.0, 25.0], [3293.0, 30.0], [3217.0, 20.0], [3215.0, 22.0], [3213.0, 16.0], [3263.0, 18.0], [3261.0, 29.0], [3259.0, 20.0], [3201.0, 25.0], [3205.0, 24.0], [3209.0, 15.0], [3207.0, 19.0], [3357.0, 15.0], [3339.0, 16.0], [3363.0, 21.5], [3335.0, 8.0], [3333.0, 20.0], [3331.0, 14.0], [3379.0, 11.0], [3389.0, 13.0], [3377.0, 25.0], [3375.0, 14.0], [3455.0, 11.0], [3449.0, 22.0], [3397.0, 12.0], [3399.0, 14.0], [3419.0, 16.0], [3417.0, 15.0], [3361.0, 18.0], [3437.0, 13.0], [3441.0, 20.0], [3433.0, 26.0], [3359.0, 15.0], [3353.0, 20.0], [3345.0, 12.0], [3347.0, 19.0], [3343.0, 25.0], [3349.0, 16.0], [3491.0, 18.0], [3507.0, 15.0], [3483.0, 11.0], [3479.0, 15.0], [3461.0, 16.0], [3469.0, 17.0], [3595.0, 13.0], [3593.0, 12.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3612.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 838.15, "minX": 1.74314202E12, "maxY": 3249.7833333333333, "series": [{"data": [[1.7431422E12, 3213.483333333333], [1.74314238E12, 3211.9166666666665], [1.7431425E12, 3225.75], [1.74314202E12, 1636.1333333333334], [1.74314232E12, 3249.7833333333333], [1.74314262E12, 838.15], [1.74314214E12, 3008.233333333333], [1.74314244E12, 3222.4666666666667], [1.74314208E12, 2756.5333333333333], [1.74314226E12, 3247.5], [1.74314256E12, 3089.2166666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74314262E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 840.9833333333333, "minX": 1.74314202E12, "maxY": 3246.7166666666667, "series": [{"data": [[1.7431422E12, 3214.05], [1.74314238E12, 3216.883333333333], [1.7431425E12, 3223.15], [1.74314202E12, 1631.3333333333333], [1.74314232E12, 3246.0333333333333], [1.74314262E12, 840.9833333333333], [1.74314214E12, 3007.7166666666667], [1.74314244E12, 3220.866666666667], [1.74314208E12, 2760.6666666666665], [1.74314226E12, 3246.7166666666667], [1.74314256E12, 3090.766666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74314262E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 840.9833333333333, "minX": 1.74314202E12, "maxY": 3246.7166666666667, "series": [{"data": [[1.7431422E12, 3214.05], [1.74314238E12, 3216.883333333333], [1.7431425E12, 3223.15], [1.74314202E12, 1631.3333333333333], [1.74314232E12, 3246.0333333333333], [1.74314262E12, 840.9833333333333], [1.74314214E12, 3007.7166666666667], [1.74314244E12, 3220.866666666667], [1.74314208E12, 2760.6666666666665], [1.74314226E12, 3246.7166666666667], [1.74314256E12, 3090.766666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74314262E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 840.9833333333333, "minX": 1.74314202E12, "maxY": 3246.7166666666667, "series": [{"data": [[1.7431422E12, 3214.05], [1.74314238E12, 3216.883333333333], [1.7431425E12, 3223.15], [1.74314202E12, 1631.3333333333333], [1.74314232E12, 3246.0333333333333], [1.74314262E12, 840.9833333333333], [1.74314214E12, 3007.7166666666667], [1.74314244E12, 3220.866666666667], [1.74314208E12, 2760.6666666666665], [1.74314226E12, 3246.7166666666667], [1.74314256E12, 3090.766666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74314262E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

