/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 3211.0, "series": [{"data": [[0.0, 0.0], [0.1, 2.0], [0.2, 3.0], [0.3, 3.0], [0.4, 3.0], [0.5, 4.0], [0.6, 4.0], [0.7, 4.0], [0.8, 4.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 6.0], [1.8, 6.0], [1.9, 6.0], [2.0, 6.0], [2.1, 6.0], [2.2, 6.0], [2.3, 6.0], [2.4, 6.0], [2.5, 6.0], [2.6, 6.0], [2.7, 6.0], [2.8, 7.0], [2.9, 7.0], [3.0, 7.0], [3.1, 7.0], [3.2, 7.0], [3.3, 7.0], [3.4, 7.0], [3.5, 7.0], [3.6, 7.0], [3.7, 7.0], [3.8, 7.0], [3.9, 7.0], [4.0, 7.0], [4.1, 7.0], [4.2, 8.0], [4.3, 8.0], [4.4, 8.0], [4.5, 8.0], [4.6, 8.0], [4.7, 8.0], [4.8, 8.0], [4.9, 8.0], [5.0, 8.0], [5.1, 8.0], [5.2, 8.0], [5.3, 8.0], [5.4, 8.0], [5.5, 8.0], [5.6, 8.0], [5.7, 8.0], [5.8, 8.0], [5.9, 8.0], [6.0, 8.0], [6.1, 9.0], [6.2, 9.0], [6.3, 9.0], [6.4, 9.0], [6.5, 9.0], [6.6, 9.0], [6.7, 9.0], [6.8, 9.0], [6.9, 9.0], [7.0, 9.0], [7.1, 9.0], [7.2, 9.0], [7.3, 9.0], [7.4, 9.0], [7.5, 9.0], [7.6, 9.0], [7.7, 9.0], [7.8, 9.0], [7.9, 9.0], [8.0, 9.0], [8.1, 9.0], [8.2, 9.0], [8.3, 9.0], [8.4, 9.0], [8.5, 10.0], [8.6, 10.0], [8.7, 10.0], [8.8, 10.0], [8.9, 10.0], [9.0, 10.0], [9.1, 10.0], [9.2, 10.0], [9.3, 10.0], [9.4, 10.0], [9.5, 10.0], [9.6, 10.0], [9.7, 10.0], [9.8, 10.0], [9.9, 10.0], [10.0, 10.0], [10.1, 10.0], [10.2, 10.0], [10.3, 10.0], [10.4, 10.0], [10.5, 10.0], [10.6, 10.0], [10.7, 10.0], [10.8, 10.0], [10.9, 10.0], [11.0, 10.0], [11.1, 10.0], [11.2, 11.0], [11.3, 11.0], [11.4, 11.0], [11.5, 11.0], [11.6, 11.0], [11.7, 11.0], [11.8, 11.0], [11.9, 11.0], [12.0, 11.0], [12.1, 11.0], [12.2, 11.0], [12.3, 11.0], [12.4, 11.0], [12.5, 11.0], [12.6, 11.0], [12.7, 11.0], [12.8, 11.0], [12.9, 11.0], [13.0, 11.0], [13.1, 11.0], [13.2, 11.0], [13.3, 11.0], [13.4, 11.0], [13.5, 11.0], [13.6, 11.0], [13.7, 11.0], [13.8, 11.0], [13.9, 11.0], [14.0, 11.0], [14.1, 11.0], [14.2, 11.0], [14.3, 12.0], [14.4, 12.0], [14.5, 12.0], [14.6, 12.0], [14.7, 12.0], [14.8, 12.0], [14.9, 12.0], [15.0, 12.0], [15.1, 12.0], [15.2, 12.0], [15.3, 12.0], [15.4, 12.0], [15.5, 12.0], [15.6, 12.0], [15.7, 12.0], [15.8, 12.0], [15.9, 12.0], [16.0, 12.0], [16.1, 12.0], [16.2, 12.0], [16.3, 12.0], [16.4, 12.0], [16.5, 12.0], [16.6, 12.0], [16.7, 12.0], [16.8, 12.0], [16.9, 12.0], [17.0, 12.0], [17.1, 12.0], [17.2, 12.0], [17.3, 12.0], [17.4, 12.0], [17.5, 12.0], [17.6, 12.0], [17.7, 13.0], [17.8, 13.0], [17.9, 13.0], [18.0, 13.0], [18.1, 13.0], [18.2, 13.0], [18.3, 13.0], [18.4, 13.0], [18.5, 13.0], [18.6, 13.0], [18.7, 13.0], [18.8, 13.0], [18.9, 13.0], [19.0, 13.0], [19.1, 13.0], [19.2, 13.0], [19.3, 13.0], [19.4, 13.0], [19.5, 13.0], [19.6, 13.0], [19.7, 13.0], [19.8, 13.0], [19.9, 13.0], [20.0, 13.0], [20.1, 13.0], [20.2, 13.0], [20.3, 13.0], [20.4, 13.0], [20.5, 13.0], [20.6, 13.0], [20.7, 13.0], [20.8, 13.0], [20.9, 13.0], [21.0, 13.0], [21.1, 13.0], [21.2, 13.0], [21.3, 13.0], [21.4, 14.0], [21.5, 14.0], [21.6, 14.0], [21.7, 14.0], [21.8, 14.0], [21.9, 14.0], [22.0, 14.0], [22.1, 14.0], [22.2, 14.0], [22.3, 14.0], [22.4, 14.0], [22.5, 14.0], [22.6, 14.0], [22.7, 14.0], [22.8, 14.0], [22.9, 14.0], [23.0, 14.0], [23.1, 14.0], [23.2, 14.0], [23.3, 14.0], [23.4, 14.0], [23.5, 14.0], [23.6, 14.0], [23.7, 14.0], [23.8, 14.0], [23.9, 14.0], [24.0, 14.0], [24.1, 14.0], [24.2, 14.0], [24.3, 14.0], [24.4, 14.0], [24.5, 14.0], [24.6, 14.0], [24.7, 14.0], [24.8, 14.0], [24.9, 14.0], [25.0, 14.0], [25.1, 14.0], [25.2, 15.0], [25.3, 15.0], [25.4, 15.0], [25.5, 15.0], [25.6, 15.0], [25.7, 15.0], [25.8, 15.0], [25.9, 15.0], [26.0, 15.0], [26.1, 15.0], [26.2, 15.0], [26.3, 15.0], [26.4, 15.0], [26.5, 15.0], [26.6, 15.0], [26.7, 15.0], [26.8, 15.0], [26.9, 15.0], [27.0, 15.0], [27.1, 15.0], [27.2, 15.0], [27.3, 15.0], [27.4, 15.0], [27.5, 15.0], [27.6, 15.0], [27.7, 15.0], [27.8, 15.0], [27.9, 15.0], [28.0, 15.0], [28.1, 15.0], [28.2, 15.0], [28.3, 15.0], [28.4, 15.0], [28.5, 15.0], [28.6, 15.0], [28.7, 15.0], [28.8, 15.0], [28.9, 15.0], [29.0, 15.0], [29.1, 15.0], [29.2, 16.0], [29.3, 16.0], [29.4, 16.0], [29.5, 16.0], [29.6, 16.0], [29.7, 16.0], [29.8, 16.0], [29.9, 16.0], [30.0, 16.0], [30.1, 16.0], [30.2, 16.0], [30.3, 16.0], [30.4, 16.0], [30.5, 16.0], [30.6, 16.0], [30.7, 16.0], [30.8, 16.0], [30.9, 16.0], [31.0, 16.0], [31.1, 16.0], [31.2, 16.0], [31.3, 16.0], [31.4, 16.0], [31.5, 16.0], [31.6, 16.0], [31.7, 16.0], [31.8, 16.0], [31.9, 16.0], [32.0, 16.0], [32.1, 16.0], [32.2, 16.0], [32.3, 16.0], [32.4, 16.0], [32.5, 16.0], [32.6, 16.0], [32.7, 16.0], [32.8, 16.0], [32.9, 16.0], [33.0, 16.0], [33.1, 16.0], [33.2, 16.0], [33.3, 17.0], [33.4, 17.0], [33.5, 17.0], [33.6, 17.0], [33.7, 17.0], [33.8, 17.0], [33.9, 17.0], [34.0, 17.0], [34.1, 17.0], [34.2, 17.0], [34.3, 17.0], [34.4, 17.0], [34.5, 17.0], [34.6, 17.0], [34.7, 17.0], [34.8, 17.0], [34.9, 17.0], [35.0, 17.0], [35.1, 17.0], [35.2, 17.0], [35.3, 17.0], [35.4, 17.0], [35.5, 17.0], [35.6, 17.0], [35.7, 17.0], [35.8, 17.0], [35.9, 17.0], [36.0, 17.0], [36.1, 17.0], [36.2, 17.0], [36.3, 17.0], [36.4, 17.0], [36.5, 17.0], [36.6, 17.0], [36.7, 17.0], [36.8, 17.0], [36.9, 17.0], [37.0, 17.0], [37.1, 17.0], [37.2, 17.0], [37.3, 17.0], [37.4, 18.0], [37.5, 18.0], [37.6, 18.0], [37.7, 18.0], [37.8, 18.0], [37.9, 18.0], [38.0, 18.0], [38.1, 18.0], [38.2, 18.0], [38.3, 18.0], [38.4, 18.0], [38.5, 18.0], [38.6, 18.0], [38.7, 18.0], [38.8, 18.0], [38.9, 18.0], [39.0, 18.0], [39.1, 18.0], [39.2, 18.0], [39.3, 18.0], [39.4, 18.0], [39.5, 18.0], [39.6, 18.0], [39.7, 18.0], [39.8, 18.0], [39.9, 18.0], [40.0, 18.0], [40.1, 18.0], [40.2, 18.0], [40.3, 18.0], [40.4, 18.0], [40.5, 18.0], [40.6, 18.0], [40.7, 18.0], [40.8, 18.0], [40.9, 18.0], [41.0, 18.0], [41.1, 18.0], [41.2, 18.0], [41.3, 18.0], [41.4, 19.0], [41.5, 19.0], [41.6, 19.0], [41.7, 19.0], [41.8, 19.0], [41.9, 19.0], [42.0, 19.0], [42.1, 19.0], [42.2, 19.0], [42.3, 19.0], [42.4, 19.0], [42.5, 19.0], [42.6, 19.0], [42.7, 19.0], [42.8, 19.0], [42.9, 19.0], [43.0, 19.0], [43.1, 19.0], [43.2, 19.0], [43.3, 19.0], [43.4, 19.0], [43.5, 19.0], [43.6, 19.0], [43.7, 19.0], [43.8, 19.0], [43.9, 19.0], [44.0, 19.0], [44.1, 19.0], [44.2, 19.0], [44.3, 19.0], [44.4, 19.0], [44.5, 19.0], [44.6, 19.0], [44.7, 19.0], [44.8, 19.0], [44.9, 19.0], [45.0, 19.0], [45.1, 19.0], [45.2, 19.0], [45.3, 19.0], [45.4, 20.0], [45.5, 20.0], [45.6, 20.0], [45.7, 20.0], [45.8, 20.0], [45.9, 20.0], [46.0, 20.0], [46.1, 20.0], [46.2, 20.0], [46.3, 20.0], [46.4, 20.0], [46.5, 20.0], [46.6, 20.0], [46.7, 20.0], [46.8, 20.0], [46.9, 20.0], [47.0, 20.0], [47.1, 20.0], [47.2, 20.0], [47.3, 20.0], [47.4, 20.0], [47.5, 20.0], [47.6, 20.0], [47.7, 20.0], [47.8, 20.0], [47.9, 20.0], [48.0, 20.0], [48.1, 20.0], [48.2, 20.0], [48.3, 20.0], [48.4, 20.0], [48.5, 20.0], [48.6, 20.0], [48.7, 20.0], [48.8, 20.0], [48.9, 20.0], [49.0, 20.0], [49.1, 20.0], [49.2, 21.0], [49.3, 21.0], [49.4, 21.0], [49.5, 21.0], [49.6, 21.0], [49.7, 21.0], [49.8, 21.0], [49.9, 21.0], [50.0, 21.0], [50.1, 21.0], [50.2, 21.0], [50.3, 21.0], [50.4, 21.0], [50.5, 21.0], [50.6, 21.0], [50.7, 21.0], [50.8, 21.0], [50.9, 21.0], [51.0, 21.0], [51.1, 21.0], [51.2, 21.0], [51.3, 21.0], [51.4, 21.0], [51.5, 21.0], [51.6, 21.0], [51.7, 21.0], [51.8, 21.0], [51.9, 21.0], [52.0, 21.0], [52.1, 21.0], [52.2, 21.0], [52.3, 21.0], [52.4, 21.0], [52.5, 21.0], [52.6, 21.0], [52.7, 21.0], [52.8, 21.0], [52.9, 21.0], [53.0, 22.0], [53.1, 22.0], [53.2, 22.0], [53.3, 22.0], [53.4, 22.0], [53.5, 22.0], [53.6, 22.0], [53.7, 22.0], [53.8, 22.0], [53.9, 22.0], [54.0, 22.0], [54.1, 22.0], [54.2, 22.0], [54.3, 22.0], [54.4, 22.0], [54.5, 22.0], [54.6, 22.0], [54.7, 22.0], [54.8, 22.0], [54.9, 22.0], [55.0, 22.0], [55.1, 22.0], [55.2, 22.0], [55.3, 22.0], [55.4, 22.0], [55.5, 22.0], [55.6, 22.0], [55.7, 22.0], [55.8, 22.0], [55.9, 22.0], [56.0, 22.0], [56.1, 22.0], [56.2, 22.0], [56.3, 22.0], [56.4, 22.0], [56.5, 23.0], [56.6, 23.0], [56.7, 23.0], [56.8, 23.0], [56.9, 23.0], [57.0, 23.0], [57.1, 23.0], [57.2, 23.0], [57.3, 23.0], [57.4, 23.0], [57.5, 23.0], [57.6, 23.0], [57.7, 23.0], [57.8, 23.0], [57.9, 23.0], [58.0, 23.0], [58.1, 23.0], [58.2, 23.0], [58.3, 23.0], [58.4, 23.0], [58.5, 23.0], [58.6, 23.0], [58.7, 23.0], [58.8, 23.0], [58.9, 23.0], [59.0, 23.0], [59.1, 23.0], [59.2, 23.0], [59.3, 23.0], [59.4, 23.0], [59.5, 23.0], [59.6, 23.0], [59.7, 23.0], [59.8, 23.0], [59.9, 24.0], [60.0, 24.0], [60.1, 24.0], [60.2, 24.0], [60.3, 24.0], [60.4, 24.0], [60.5, 24.0], [60.6, 24.0], [60.7, 24.0], [60.8, 24.0], [60.9, 24.0], [61.0, 24.0], [61.1, 24.0], [61.2, 24.0], [61.3, 24.0], [61.4, 24.0], [61.5, 24.0], [61.6, 24.0], [61.7, 24.0], [61.8, 24.0], [61.9, 24.0], [62.0, 24.0], [62.1, 24.0], [62.2, 24.0], [62.3, 24.0], [62.4, 24.0], [62.5, 24.0], [62.6, 24.0], [62.7, 24.0], [62.8, 24.0], [62.9, 24.0], [63.0, 24.0], [63.1, 25.0], [63.2, 25.0], [63.3, 25.0], [63.4, 25.0], [63.5, 25.0], [63.6, 25.0], [63.7, 25.0], [63.8, 25.0], [63.9, 25.0], [64.0, 25.0], [64.1, 25.0], [64.2, 25.0], [64.3, 25.0], [64.4, 25.0], [64.5, 25.0], [64.6, 25.0], [64.7, 25.0], [64.8, 25.0], [64.9, 25.0], [65.0, 25.0], [65.1, 25.0], [65.2, 25.0], [65.3, 25.0], [65.4, 25.0], [65.5, 25.0], [65.6, 25.0], [65.7, 25.0], [65.8, 25.0], [65.9, 25.0], [66.0, 25.0], [66.1, 26.0], [66.2, 26.0], [66.3, 26.0], [66.4, 26.0], [66.5, 26.0], [66.6, 26.0], [66.7, 26.0], [66.8, 26.0], [66.9, 26.0], [67.0, 26.0], [67.1, 26.0], [67.2, 26.0], [67.3, 26.0], [67.4, 26.0], [67.5, 26.0], [67.6, 26.0], [67.7, 26.0], [67.8, 26.0], [67.9, 26.0], [68.0, 26.0], [68.1, 26.0], [68.2, 26.0], [68.3, 26.0], [68.4, 26.0], [68.5, 26.0], [68.6, 26.0], [68.7, 26.0], [68.8, 26.0], [68.9, 26.0], [69.0, 27.0], [69.1, 27.0], [69.2, 27.0], [69.3, 27.0], [69.4, 27.0], [69.5, 27.0], [69.6, 27.0], [69.7, 27.0], [69.8, 27.0], [69.9, 27.0], [70.0, 27.0], [70.1, 27.0], [70.2, 27.0], [70.3, 27.0], [70.4, 27.0], [70.5, 27.0], [70.6, 27.0], [70.7, 27.0], [70.8, 27.0], [70.9, 27.0], [71.0, 27.0], [71.1, 27.0], [71.2, 27.0], [71.3, 27.0], [71.4, 27.0], [71.5, 27.0], [71.6, 28.0], [71.7, 28.0], [71.8, 28.0], [71.9, 28.0], [72.0, 28.0], [72.1, 28.0], [72.2, 28.0], [72.3, 28.0], [72.4, 28.0], [72.5, 28.0], [72.6, 28.0], [72.7, 28.0], [72.8, 28.0], [72.9, 28.0], [73.0, 28.0], [73.1, 28.0], [73.2, 28.0], [73.3, 28.0], [73.4, 28.0], [73.5, 28.0], [73.6, 28.0], [73.7, 28.0], [73.8, 28.0], [73.9, 28.0], [74.0, 29.0], [74.1, 29.0], [74.2, 29.0], [74.3, 29.0], [74.4, 29.0], [74.5, 29.0], [74.6, 29.0], [74.7, 29.0], [74.8, 29.0], [74.9, 29.0], [75.0, 29.0], [75.1, 29.0], [75.2, 29.0], [75.3, 29.0], [75.4, 29.0], [75.5, 29.0], [75.6, 29.0], [75.7, 29.0], [75.8, 29.0], [75.9, 29.0], [76.0, 29.0], [76.1, 29.0], [76.2, 29.0], [76.3, 30.0], [76.4, 30.0], [76.5, 30.0], [76.6, 30.0], [76.7, 30.0], [76.8, 30.0], [76.9, 30.0], [77.0, 30.0], [77.1, 30.0], [77.2, 30.0], [77.3, 30.0], [77.4, 30.0], [77.5, 30.0], [77.6, 30.0], [77.7, 30.0], [77.8, 30.0], [77.9, 30.0], [78.0, 30.0], [78.1, 30.0], [78.2, 30.0], [78.3, 31.0], [78.4, 31.0], [78.5, 31.0], [78.6, 31.0], [78.7, 31.0], [78.8, 31.0], [78.9, 31.0], [79.0, 31.0], [79.1, 31.0], [79.2, 31.0], [79.3, 31.0], [79.4, 31.0], [79.5, 31.0], [79.6, 31.0], [79.7, 31.0], [79.8, 31.0], [79.9, 31.0], [80.0, 31.0], [80.1, 31.0], [80.2, 32.0], [80.3, 32.0], [80.4, 32.0], [80.5, 32.0], [80.6, 32.0], [80.7, 32.0], [80.8, 32.0], [80.9, 32.0], [81.0, 32.0], [81.1, 32.0], [81.2, 32.0], [81.3, 32.0], [81.4, 32.0], [81.5, 32.0], [81.6, 32.0], [81.7, 32.0], [81.8, 32.0], [81.9, 32.0], [82.0, 33.0], [82.1, 33.0], [82.2, 33.0], [82.3, 33.0], [82.4, 33.0], [82.5, 33.0], [82.6, 33.0], [82.7, 33.0], [82.8, 33.0], [82.9, 33.0], [83.0, 33.0], [83.1, 33.0], [83.2, 33.0], [83.3, 33.0], [83.4, 33.0], [83.5, 33.0], [83.6, 34.0], [83.7, 34.0], [83.8, 34.0], [83.9, 34.0], [84.0, 34.0], [84.1, 34.0], [84.2, 34.0], [84.3, 34.0], [84.4, 34.0], [84.5, 34.0], [84.6, 34.0], [84.7, 34.0], [84.8, 34.0], [84.9, 34.0], [85.0, 34.0], [85.1, 35.0], [85.2, 35.0], [85.3, 35.0], [85.4, 35.0], [85.5, 35.0], [85.6, 35.0], [85.7, 35.0], [85.8, 35.0], [85.9, 35.0], [86.0, 35.0], [86.1, 35.0], [86.2, 35.0], [86.3, 35.0], [86.4, 35.0], [86.5, 36.0], [86.6, 36.0], [86.7, 36.0], [86.8, 36.0], [86.9, 36.0], [87.0, 36.0], [87.1, 36.0], [87.2, 36.0], [87.3, 36.0], [87.4, 36.0], [87.5, 36.0], [87.6, 36.0], [87.7, 37.0], [87.8, 37.0], [87.9, 37.0], [88.0, 37.0], [88.1, 37.0], [88.2, 37.0], [88.3, 37.0], [88.4, 37.0], [88.5, 37.0], [88.6, 37.0], [88.7, 37.0], [88.8, 38.0], [88.9, 38.0], [89.0, 38.0], [89.1, 38.0], [89.2, 38.0], [89.3, 38.0], [89.4, 38.0], [89.5, 38.0], [89.6, 38.0], [89.7, 38.0], [89.8, 39.0], [89.9, 39.0], [90.0, 39.0], [90.1, 39.0], [90.2, 39.0], [90.3, 39.0], [90.4, 39.0], [90.5, 39.0], [90.6, 39.0], [90.7, 40.0], [90.8, 40.0], [90.9, 40.0], [91.0, 40.0], [91.1, 40.0], [91.2, 40.0], [91.3, 40.0], [91.4, 40.0], [91.5, 41.0], [91.6, 41.0], [91.7, 41.0], [91.8, 41.0], [91.9, 41.0], [92.0, 41.0], [92.1, 41.0], [92.2, 42.0], [92.3, 42.0], [92.4, 42.0], [92.5, 42.0], [92.6, 42.0], [92.7, 42.0], [92.8, 42.0], [92.9, 43.0], [93.0, 43.0], [93.1, 43.0], [93.2, 43.0], [93.3, 43.0], [93.4, 43.0], [93.5, 44.0], [93.6, 44.0], [93.7, 44.0], [93.8, 44.0], [93.9, 44.0], [94.0, 45.0], [94.1, 45.0], [94.2, 45.0], [94.3, 45.0], [94.4, 45.0], [94.5, 46.0], [94.6, 46.0], [94.7, 46.0], [94.8, 46.0], [94.9, 47.0], [95.0, 47.0], [95.1, 47.0], [95.2, 47.0], [95.3, 48.0], [95.4, 48.0], [95.5, 48.0], [95.6, 49.0], [95.7, 49.0], [95.8, 49.0], [95.9, 50.0], [96.0, 50.0], [96.1, 50.0], [96.2, 51.0], [96.3, 51.0], [96.4, 52.0], [96.5, 52.0], [96.6, 53.0], [96.7, 53.0], [96.8, 54.0], [96.9, 54.0], [97.0, 55.0], [97.1, 55.0], [97.2, 56.0], [97.3, 57.0], [97.4, 58.0], [97.5, 58.0], [97.6, 59.0], [97.7, 60.0], [97.8, 61.0], [97.9, 63.0], [98.0, 64.0], [98.1, 66.0], [98.2, 67.0], [98.3, 69.0], [98.4, 72.0], [98.5, 75.0], [98.6, 78.0], [98.7, 83.0], [98.8, 89.0], [98.9, 96.0], [99.0, 107.0], [99.1, 120.0], [99.2, 137.0], [99.3, 159.0], [99.4, 189.0], [99.5, 229.0], [99.6, 285.0], [99.7, 356.0], [99.8, 461.0], [99.9, 680.0], [100.0, 3211.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1883807.0, "series": [{"data": [[0.0, 1883807.0], [600.0, 555.0], [700.0, 412.0], [800.0, 334.0], [900.0, 234.0], [1000.0, 188.0], [1100.0, 166.0], [1200.0, 106.0], [1300.0, 93.0], [1400.0, 74.0], [1500.0, 31.0], [100.0, 9410.0], [1600.0, 24.0], [1700.0, 18.0], [1800.0, 8.0], [1900.0, 9.0], [2000.0, 18.0], [2100.0, 12.0], [2300.0, 7.0], [2200.0, 5.0], [2400.0, 9.0], [2500.0, 12.0], [2600.0, 10.0], [2700.0, 1.0], [2900.0, 14.0], [200.0, 3704.0], [3200.0, 1.0], [300.0, 2332.0], [400.0, 1516.0], [500.0, 994.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 179.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1900784.0, "series": [{"data": [[0.0, 1900784.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3141.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 179.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 544.3597136626543, "minX": 1.74314124E12, "maxY": 700.0, "series": [{"data": [[1.74314124E12, 544.3597136626543], [1.74314172E12, 700.0], [1.74314142E12, 700.0], [1.74314136E12, 700.0], [1.74314184E12, 697.7310514742891], [1.74314154E12, 700.0], [1.74314148E12, 700.0], [1.74314166E12, 700.0], [1.7431416E12, 700.0], [1.7431413E12, 700.0], [1.74314178E12, 700.0]], "isOverall": false, "label": "Throughput Stress Test Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74314184E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7.8141592920354, "minX": 11.0, "maxY": 465.47222222222234, "series": [{"data": [[11.0, 32.833333333333336], [12.0, 13.833333333333332], [13.0, 17.382352941176467], [14.0, 16.0], [15.0, 17.86111111111111], [16.0, 16.96666666666667], [17.0, 13.515151515151514], [18.0, 14.892857142857144], [19.0, 19.74285714285714], [20.0, 19.97142857142857], [21.0, 21.842105263157897], [22.0, 24.05405405405405], [23.0, 24.205128205128208], [24.0, 28.175438596491226], [25.0, 33.66666666666667], [26.0, 35.0], [27.0, 21.6060606060606], [28.0, 30.361111111111107], [29.0, 33.35714285714287], [30.0, 28.15000000000001], [31.0, 30.485294117647058], [32.0, 29.71428571428571], [33.0, 29.825], [34.0, 31.044444444444448], [35.0, 29.243243243243246], [36.0, 34.1904761904762], [37.0, 30.042553191489354], [38.0, 24.999999999999996], [39.0, 33.977777777777774], [40.0, 37.77551020408163], [41.0, 34.523809523809526], [42.0, 23.454545454545457], [43.0, 59.940000000000005], [44.0, 35.79545454545455], [45.0, 45.61904761904762], [46.0, 42.69767441860465], [47.0, 35.666666666666664], [48.0, 38.264705882352935], [49.0, 36.775], [50.0, 45.606060606060616], [51.0, 51.91666666666667], [52.0, 45.18181818181819], [53.0, 46.37499999999999], [54.0, 37.92], [55.0, 12.299999999999999], [56.0, 15.925000000000002], [57.0, 15.589743589743588], [58.0, 17.880952380952383], [59.0, 23.069767441860467], [60.0, 29.37209302325581], [61.0, 31.066666666666652], [62.0, 23.456521739130427], [63.0, 21.02439024390243], [64.0, 26.431372549019606], [65.0, 27.52830188679246], [66.0, 26.534883720930228], [67.0, 34.67346938775511], [68.0, 37.531914893617014], [69.0, 42.15217391304346], [70.0, 43.45454545454546], [71.0, 39.28301886792454], [72.0, 33.83333333333335], [73.0, 35.625], [74.0, 28.984126984127], [75.0, 28.88095238095238], [76.0, 23.97777777777777], [77.0, 28.75555555555556], [78.0, 35.22727272727273], [79.0, 37.5], [80.0, 33.61333333333334], [81.0, 9.942857142857138], [82.0, 14.909090909090908], [83.0, 17.693877551020403], [84.0, 23.097560975609763], [85.0, 25.79245283018868], [86.0, 26.812499999999996], [87.0, 28.708333333333332], [88.0, 34.62], [89.0, 37.744680851063826], [90.0, 24.9433962264151], [91.0, 19.325000000000003], [92.0, 23.979591836734688], [93.0, 27.272727272727277], [94.0, 30.120000000000005], [95.0, 31.6875], [96.0, 35.06122448979591], [97.0, 38.34782608695652], [98.0, 38.48936170212765], [99.0, 43.19230769230769], [100.0, 44.42307692307692], [101.0, 41.2037037037037], [102.0, 37.80597014925373], [103.0, 20.6923076923077], [104.0, 23.416666666666664], [105.0, 35.26530612244898], [106.0, 39.30357142857142], [107.0, 40.539473684210535], [108.0, 62.6829268292683], [109.0, 46.1304347826087], [110.0, 42.800000000000004], [111.0, 45.57894736842105], [112.0, 49.69811320754716], [113.0, 50.230769230769226], [114.0, 43.58823529411764], [115.0, 55.67857142857142], [116.0, 48.59016393442623], [117.0, 36.96428571428574], [118.0, 49.39344262295083], [119.0, 46.9795918367347], [120.0, 38.16326530612245], [121.0, 43.90909090909092], [122.0, 61.65714285714286], [123.0, 79.4], [124.0, 67.29347826086956], [125.0, 72.9148936170213], [126.0, 36.5], [127.0, 59.4313725490196], [128.0, 62.91666666666665], [129.0, 61.92307692307693], [130.0, 66.97999999999999], [131.0, 80.03448275862067], [132.0, 69.55102040816328], [133.0, 79.55999999999997], [134.0, 74.51923076923076], [135.0, 97.33333333333334], [136.0, 67.99999999999999], [137.0, 79.94444444444449], [138.0, 13.250000000000002], [139.0, 16.68627450980392], [140.0, 23.297872340425528], [141.0, 26.163636363636364], [142.0, 28.62068965517241], [143.0, 26.054054054054046], [144.0, 21.276315789473685], [145.0, 24.771428571428572], [146.0, 27.269841269841272], [147.0, 27.623188405797098], [148.0, 17.45999999999999], [149.0, 18.6734693877551], [150.0, 24.66666666666666], [151.0, 24.249999999999993], [152.0, 28.42857142857142], [154.0, 23.000000000000007], [155.0, 25.740740740740733], [156.0, 27.29411764705882], [157.0, 28.140350877192983], [158.0, 21.447761194029862], [159.0, 27.63829787234043], [160.0, 29.851851851851855], [161.0, 35.89473684210527], [162.0, 36.29310344827585], [163.0, 35.76190476190476], [164.0, 23.888888888888886], [165.0, 30.160714285714278], [166.0, 32.95081967213115], [167.0, 35.00000000000001], [168.0, 31.272727272727266], [169.0, 45.38636363636363], [170.0, 30.64814814814815], [171.0, 42.23214285714287], [172.0, 43.10169491525422], [173.0, 47.71428571428571], [174.0, 72.10126582278481], [175.0, 91.24999999999999], [176.0, 73.19718309859155], [177.0, 119.08823529411762], [178.0, 41.40983606557378], [179.0, 54.43939393939393], [180.0, 49.777777777777786], [181.0, 65.6065573770492], [182.0, 70.125], [183.0, 80.32692307692308], [184.0, 55.08064516129033], [185.0, 55.62637362637361], [186.0, 48.77777777777778], [187.0, 65.59090909090911], [188.0, 48.83870967741936], [189.0, 57.47368421052632], [190.0, 69.53521126760562], [191.0, 74.00000000000004], [192.0, 61.96491228070175], [193.0, 61.95652173913045], [194.0, 45.41176470588235], [195.0, 22.52542372881356], [196.0, 24.34920634920635], [197.0, 24.44827586206896], [198.0, 25.866666666666674], [199.0, 34.64285714285714], [200.0, 40.20634920634923], [201.0, 44.123287671232895], [202.0, 44.17460317460318], [203.0, 37.969696969696955], [204.0, 74.875], [205.0, 56.693877551020414], [206.0, 52.35087719298245], [207.0, 63.084745762711876], [208.0, 62.36923076923077], [209.0, 51.1864406779661], [210.0, 45.37974683544305], [211.0, 21.189873417721525], [212.0, 22.69491525423729], [213.0, 35.40909090909092], [214.0, 42.22058823529412], [215.0, 35.234374999999986], [216.0, 53.22222222222223], [217.0, 36.34146341463414], [218.0, 52.579710144927525], [219.0, 24.11267605633802], [220.0, 59.43548387096776], [221.0, 51.86363636363636], [222.0, 67.83823529411764], [223.0, 62.63333333333332], [224.0, 57.80722891566265], [225.0, 68.45], [226.0, 33.27272727272727], [228.0, 415.7313432835822], [229.0, 465.47222222222234], [230.0, 67.65217391304348], [231.0, 38.27142857142858], [227.0, 94.22222222222221], [232.0, 35.50746268656717], [233.0, 37.7258064516129], [234.0, 45.95384615384617], [235.0, 41.3013698630137], [236.0, 40.93846153846154], [237.0, 37.14473684210526], [238.0, 39.55384615384616], [239.0, 40.506329113924046], [240.0, 33.599999999999994], [241.0, 27.985074626865664], [242.0, 26.283582089552244], [243.0, 26.776119402985078], [244.0, 27.790123456790116], [245.0, 35.86440677966101], [246.0, 38.26027397260273], [247.0, 35.214285714285715], [248.0, 42.84000000000001], [249.0, 40.545454545454554], [250.0, 48.29113924050634], [251.0, 225.30487804878055], [252.0, 100.73255813953486], [253.0, 13.558823529411766], [254.0, 19.063492063492067], [255.0, 26.08219178082192], [257.0, 33.779069767441854], [256.0, 30.58064516129032], [258.0, 22.46478873239437], [259.0, 28.013888888888886], [260.0, 29.560975609756092], [261.0, 31.557142857142857], [262.0, 34.65656565656565], [263.0, 45.307692307692314], [264.0, 43.262295081967224], [270.0, 20.272727272727273], [271.0, 19.6025641025641], [268.0, 14.822580645161292], [269.0, 19.666666666666668], [265.0, 56.94202898550726], [266.0, 100.01694915254235], [267.0, 17.369230769230768], [273.0, 18.930555555555557], [272.0, 18.808823529411764], [274.0, 26.183673469387756], [275.0, 30.824561403508767], [276.0, 29.756756756756758], [277.0, 29.803738317757016], [278.0, 19.541666666666668], [279.0, 22.8955223880597], [280.0, 26.6], [286.0, 22.378378378378386], [287.0, 22.25641025641026], [284.0, 25.500000000000004], [285.0, 23.311688311688314], [281.0, 27.135802469135797], [282.0, 20.418918918918923], [283.0, 21.67816091954023], [289.0, 21.35443037974684], [288.0, 20.4625], [290.0, 29.316455696202517], [291.0, 28.83720930232558], [292.0, 30.272727272727273], [293.0, 23.04], [294.0, 21.114285714285717], [295.0, 24.3], [296.0, 26.866666666666674], [302.0, 40.31578947368421], [303.0, 36.0], [300.0, 27.360000000000007], [301.0, 27.46987951807229], [297.0, 20.8], [298.0, 24.72], [299.0, 25.808219178082197], [305.0, 19.15909090909091], [304.0, 19.46846846846847], [306.0, 18.276315789473685], [307.0, 22.824999999999996], [308.0, 22.941860465116278], [309.0, 22.648648648648642], [310.0, 20.614457831325304], [311.0, 19.37007874015748], [312.0, 11.705882352941178], [318.0, 22.078651685393254], [319.0, 16.688172043010752], [316.0, 17.857142857142854], [317.0, 18.313253012048193], [313.0, 14.066037735849052], [314.0, 14.888888888888893], [315.0, 15.891566265060241], [321.0, 15.141176470588237], [320.0, 17.172413793103445], [322.0, 16.28735632183908], [323.0, 19.244444444444436], [324.0, 24.328947368421055], [325.0, 26.64583333333333], [326.0, 31.411764705882348], [327.0, 29.178082191780828], [328.0, 30.176470588235297], [334.0, 21.96610169491526], [335.0, 53.523809523809526], [332.0, 14.246753246753249], [333.0, 20.05454545454546], [329.0, 34.92307692307693], [330.0, 32.76923076923078], [331.0, 28.967032967032967], [337.0, 23.18987341772152], [336.0, 39.96202531645569], [338.0, 24.963414634146343], [339.0, 32.38095238095238], [340.0, 34.521276595744716], [341.0, 43.25000000000001], [342.0, 32.54074074074076], [343.0, 25.31944444444445], [344.0, 9.512195121951219], [350.0, 25.299999999999997], [351.0, 25.478260869565222], [348.0, 20.179775280898884], [349.0, 22.58139534883721], [345.0, 11.070588235294116], [346.0, 15.02298850574713], [347.0, 16.79569892473118], [353.0, 11.376344086021504], [352.0, 25.34782608695652], [354.0, 13.313725490196077], [355.0, 11.558139534883718], [356.0, 10.685714285714287], [357.0, 15.716216216216214], [358.0, 15.44791666666667], [359.0, 15.305970149253731], [360.0, 15.510638297872338], [366.0, 25.72727272727273], [367.0, 35.57142857142858], [364.0, 24.7103448275862], [365.0, 23.082352941176474], [361.0, 17.755555555555556], [362.0, 20.600000000000005], [363.0, 22.729166666666668], [369.0, 31.058823529411768], [368.0, 34.28125000000001], [370.0, 31.51376146788992], [371.0, 26.009174311926603], [372.0, 22.659340659340668], [373.0, 28.04950495049504], [374.0, 31.45783132530121], [375.0, 32.57575757575757], [376.0, 34.78571428571429], [382.0, 29.260273972602736], [383.0, 31.586538461538463], [380.0, 29.36633663366336], [381.0, 27.88135593220339], [377.0, 34.386138613861384], [378.0, 35.888000000000005], [379.0, 34.1818181818182], [385.0, 31.95744680851064], [384.0, 26.872611464968152], [386.0, 33.33333333333333], [387.0, 36.932692307692314], [388.0, 40.86021505376345], [389.0, 37.369230769230775], [390.0, 55.52857142857142], [391.0, 46.616161616161605], [392.0, 46.45588235294118], [398.0, 37.39583333333333], [399.0, 30.71111111111111], [396.0, 36.270491803278674], [397.0, 34.96638655462186], [393.0, 52.61538461538461], [394.0, 43.505154639175245], [395.0, 32.411214953271035], [401.0, 34.73033707865169], [400.0, 38.42622950819672], [402.0, 42.45394736842106], [403.0, 30.89285714285715], [404.0, 44.751824817518234], [405.0, 96.51298701298701], [406.0, 49.687499999999986], [407.0, 68.37037037037037], [408.0, 82.93333333333334], [414.0, 103.93478260869561], [415.0, 86.46464646464644], [412.0, 75.96629213483143], [413.0, 76.31547619047618], [409.0, 48.8543689320388], [410.0, 125.58771929824562], [411.0, 62.47826086956522], [417.0, 57.763636363636344], [416.0, 71.68686868686869], [418.0, 62.81904761904762], [419.0, 51.93617021276596], [420.0, 47.06896551724139], [421.0, 162.5277777777778], [422.0, 71.44954128440368], [423.0, 70.60730593607306], [424.0, 30.333333333333332], [430.0, 42.76923076923079], [431.0, 39.16853932584268], [428.0, 40.16521739130435], [429.0, 37.97333333333332], [425.0, 35.90090090090091], [426.0, 37.90825688073393], [427.0, 35.73148148148147], [433.0, 41.76744186046512], [432.0, 45.061403508771946], [434.0, 37.10483870967741], [435.0, 41.028571428571446], [436.0, 43.819819819819806], [437.0, 48.556603773584904], [438.0, 40.91428571428572], [439.0, 51.09909909909909], [440.0, 51.03968253968254], [446.0, 67.4767441860465], [447.0, 124.421686746988], [444.0, 51.122807017543856], [445.0, 48.31730769230771], [441.0, 38.575], [442.0, 38.89814814814817], [443.0, 56.78301886792454], [449.0, 46.25984251968505], [448.0, 73.8867924528302], [450.0, 61.9125], [451.0, 57.33333333333335], [453.0, 64.07216494845363], [454.0, 93.61538461538461], [455.0, 70.23863636363637], [456.0, 68.13821138211378], [462.0, 62.1764705882353], [463.0, 70.7606837606837], [460.0, 78.51578947368422], [461.0, 68.50000000000001], [457.0, 77.94444444444444], [458.0, 91.17241379310343], [465.0, 60.980099502487526], [464.0, 77.55357142857143], [466.0, 9.23255813953488], [467.0, 10.560439560439564], [468.0, 11.047619047619051], [469.0, 12.022727272727272], [470.0, 14.53153153153153], [471.0, 14.980582524271847], [472.0, 16.62037037037037], [478.0, 35.63076923076922], [479.0, 28.75862068965517], [476.0, 27.917431192660544], [477.0, 31.494505494505514], [473.0, 18.39506172839506], [474.0, 18.44554455445544], [475.0, 23.35294117647059], [481.0, 21.08108108108108], [480.0, 17.963302752293583], [482.0, 27.813084112149532], [483.0, 29.32989690721649], [484.0, 31.778947368421054], [485.0, 34.79629629629631], [486.0, 37.38461538461538], [487.0, 38.18421052631578], [488.0, 28.079207920792072], [494.0, 30.780487804878035], [495.0, 24.387596899224807], [492.0, 27.63829787234043], [493.0, 34.82051282051281], [489.0, 25.71818181818181], [490.0, 27.069620253164565], [491.0, 30.358024691358025], [497.0, 33.254716981132084], [496.0, 27.999999999999993], [498.0, 61.3597122302158], [499.0, 30.24999999999999], [500.0, 53.293333333333344], [501.0, 37.82608695652174], [502.0, 21.79816513761468], [503.0, 14.941860465116278], [504.0, 17.113207547169814], [510.0, 23.634408602150536], [511.0, 28.11764705882353], [508.0, 23.447619047619042], [509.0, 20.565573770491802], [505.0, 16.792452830188676], [506.0, 19.050000000000008], [507.0, 15.76315789473684], [515.0, 16.84615384615386], [512.0, 22.55652173913045], [526.0, 22.407766990291265], [527.0, 26.16964285714287], [524.0, 38.241758241758255], [525.0, 25.372727272727268], [522.0, 34.2051282051282], [523.0, 39.706666666666685], [513.0, 8.989690721649481], [514.0, 14.72641509433962], [516.0, 22.000000000000007], [517.0, 25.877777777777766], [518.0, 28.539062499999996], [519.0, 21.36144578313253], [528.0, 70.32075471698113], [542.0, 66.93577981651377], [543.0, 52.122222222222206], [540.0, 75.00000000000003], [541.0, 31.749999999999993], [538.0, 45.41975308641975], [539.0, 48.102362204724386], [536.0, 43.870967741935495], [537.0, 53.877697841726615], [529.0, 37.937500000000014], [530.0, 24.60194174757282], [531.0, 26.673913043478265], [532.0, 24.355932203389827], [533.0, 25.093220338983052], [534.0, 31.37272727272729], [535.0, 39.1875], [520.0, 18.227272727272727], [521.0, 24.991150442477874], [547.0, 73.81666666666662], [544.0, 55.757575757575765], [558.0, 46.77000000000001], [559.0, 36.440677966101696], [556.0, 166.99999999999997], [557.0, 48.921052631578945], [554.0, 41.618644067796616], [555.0, 33.1864406779661], [545.0, 56.77272727272726], [546.0, 93.2277227722772], [548.0, 64.05555555555554], [549.0, 39.363636363636374], [550.0, 43.170454545454554], [551.0, 44.40760869565221], [560.0, 44.61855670103093], [574.0, 69.33962264150945], [575.0, 82.77777777777779], [572.0, 72.67777777777779], [573.0, 59.1864406779661], [570.0, 51.2758620689655], [571.0, 62.67647058823532], [568.0, 30.4782608695652], [569.0, 58.04], [561.0, 41.788990825688074], [562.0, 35.41121495327103], [563.0, 50.514851485148505], [564.0, 52.22018348623855], [565.0, 48.11607142857145], [566.0, 59.164948453608275], [567.0, 57.63128491620111], [552.0, 133.00000000000003], [553.0, 52.01052631578948], [579.0, 64.80000000000003], [576.0, 64.50450450450455], [590.0, 49.35344827586208], [591.0, 126.79824561403498], [588.0, 45.75229357798165], [589.0, 37.592233009708735], [586.0, 50.841121495327116], [587.0, 35.81372549019607], [577.0, 75.03539823008849], [578.0, 72.04901960784312], [580.0, 63.70967741935481], [581.0, 61.38842975206612], [582.0, 69.99999999999999], [583.0, 42.66666666666668], [592.0, 75.76190476190474], [606.0, 18.53246753246754], [607.0, 28.809160305343514], [604.0, 52.86792452830189], [605.0, 39.82014388489209], [602.0, 58.235849056603776], [603.0, 53.348837209302324], [600.0, 66.0676691729323], [601.0, 56.60740740740738], [593.0, 42.98181818181818], [594.0, 46.841584158415834], [595.0, 53.08080808080809], [596.0, 58.72164948453608], [597.0, 55.62135922330098], [598.0, 56.14782608695652], [599.0, 57.33018867924528], [584.0, 27.89189189189189], [585.0, 30.61320754716981], [611.0, 29.09848484848486], [608.0, 30.404494382022477], [622.0, 25.283687943262418], [623.0, 29.131313131313146], [620.0, 28.943396226415096], [621.0, 30.46788990825688], [618.0, 37.275862068965495], [619.0, 19.142857142857135], [609.0, 56.419354838709666], [610.0, 63.781818181818196], [612.0, 38.1984126984127], [613.0, 39.37037037037035], [614.0, 34.77647058823529], [615.0, 59.202531645569614], [624.0, 30.064285714285706], [638.0, 15.999999999999998], [639.0, 16.346405228758176], [636.0, 28.96581196581196], [637.0, 19.180180180180177], [634.0, 26.94666666666667], [635.0, 77.80612244897961], [632.0, 27.53333333333332], [633.0, 27.739495798319332], [625.0, 31.814159292035388], [626.0, 32.684210526315766], [627.0, 40.51063829787237], [628.0, 37.16528925619834], [629.0, 24.15625], [630.0, 19.614285714285714], [631.0, 25.64634146341463], [616.0, 34.91525423728815], [617.0, 57.2987012987013], [643.0, 27.722627737226297], [640.0, 18.764044943820224], [654.0, 7.8141592920354], [655.0, 12.173553719008265], [652.0, 20.89743589743592], [653.0, 18.72185430463577], [650.0, 40.342105263157904], [651.0, 28.36220472440946], [641.0, 20.506849315068504], [642.0, 28.38532110091743], [644.0, 33.39215686274511], [645.0, 36.40624999999999], [646.0, 35.56896551724138], [647.0, 38.991803278688515], [656.0, 14.049586776859506], [670.0, 19.586206896551733], [671.0, 22.271929824561404], [668.0, 26.158415841584162], [669.0, 29.2991452991453], [666.0, 24.91089108910891], [667.0, 25.82142857142857], [664.0, 14.81981981981982], [665.0, 20.56310679611651], [657.0, 16.484375000000004], [658.0, 16.5], [659.0, 12.190909090909093], [660.0, 12.211009174311927], [661.0, 35.48888888888888], [662.0, 11.38655462184874], [663.0, 13.61864406779661], [648.0, 42.43000000000001], [649.0, 39.16216216216214], [675.0, 25.500000000000004], [672.0, 35.78000000000003], [686.0, 15.017094017094019], [687.0, 23.299145299145305], [684.0, 32.53124999999999], [685.0, 41.92982456140349], [682.0, 30.513761467889896], [683.0, 32.396341463414636], [673.0, 24.791469194312796], [674.0, 39.62393162393163], [676.0, 30.72058823529411], [677.0, 27.434782608695645], [678.0, 32.470085470085486], [679.0, 38.99029126213593], [688.0, 39.08333333333334], [700.0, 25.53310880627039], [698.0, 16.463917525773198], [699.0, 18.909090909090907], [696.0, 22.548872180451124], [697.0, 20.50757575757575], [689.0, 24.776000000000003], [690.0, 26.515151515151505], [691.0, 28.47619047619047], [692.0, 25.329787234042563], [693.0, 32.88775510204082], [694.0, 22.55555555555555], [695.0, 16.92523364485981], [680.0, 39.4952380952381], [681.0, 34.94545454545453]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[691.3339838580488, 25.943238394541275]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 700.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 67944.6, "minX": 1.74314124E12, "maxY": 1044985.2666666667, "series": [{"data": [[1.74314124E12, 513287.3333333333], [1.74314172E12, 1043408.4666666667], [1.74314142E12, 906377.7333333333], [1.74314136E12, 849734.6], [1.74314184E12, 183702.06666666668], [1.74314154E12, 976491.8], [1.74314148E12, 937626.6], [1.74314166E12, 1013546.6], [1.7431416E12, 1017882.8], [1.7431413E12, 779596.2], [1.74314178E12, 1044985.2666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74314124E12, 189846.0], [1.74314172E12, 385918.2], [1.74314142E12, 335235.6], [1.74314136E12, 314285.4], [1.74314184E12, 67944.6], [1.74314154E12, 361168.2], [1.74314148E12, 346793.4], [1.74314166E12, 374873.4], [1.7431416E12, 376477.2], [1.7431413E12, 288343.8], [1.74314178E12, 386501.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74314184E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 20.786502798419214, "minX": 1.74314124E12, "maxY": 36.33085237508287, "series": [{"data": [[1.74314124E12, 36.33085237508287], [1.74314172E12, 25.818231428318363], [1.74314142E12, 24.717781166439842], [1.74314136E12, 29.910391001299754], [1.74314184E12, 23.92613982568163], [1.74314154E12, 20.786502798419214], [1.74314148E12, 24.012394699553266], [1.74314166E12, 26.467855548032723], [1.7431416E12, 24.871247979956994], [1.7431413E12, 30.58314137498353], [1.74314178E12, 22.78238474685963]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74314184E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 20.24565784030864, "minX": 1.74314124E12, "maxY": 33.71338769318283, "series": [{"data": [[1.74314124E12, 33.71338769318283], [1.74314172E12, 24.715912854071128], [1.74314142E12, 23.88395206237019], [1.74314136E12, 28.217018035199604], [1.74314184E12, 23.339921053329057], [1.74314154E12, 20.24565784030864], [1.74314148E12, 23.617087868454046], [1.74314166E12, 24.33677129398832], [1.7431416E12, 23.7723925911052], [1.7431413E12, 29.712524423969416], [1.74314178E12, 22.271363570740146]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74314184E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 15.055385274783173, "minX": 1.74314124E12, "maxY": 27.80238930501576, "series": [{"data": [[1.74314124E12, 27.80238930501576], [1.74314172E12, 18.012807895559003], [1.74314142E12, 18.168436765069206], [1.74314136E12, 22.562911290183784], [1.74314184E12, 16.87034731236934], [1.74314154E12, 15.055385274783173], [1.74314148E12, 17.623539548330843], [1.74314166E12, 17.520284448029518], [1.7431416E12, 17.191820381154255], [1.7431413E12, 24.425204911636936], [1.74314178E12, 16.274465241264256]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74314184E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74314124E12, "maxY": 3211.0, "series": [{"data": [[1.74314124E12, 2086.0], [1.74314172E12, 1190.0], [1.74314142E12, 1067.0], [1.74314136E12, 3211.0], [1.74314184E12, 571.0], [1.74314154E12, 1282.0], [1.74314148E12, 697.0], [1.74314166E12, 2181.0], [1.7431416E12, 912.0], [1.7431413E12, 1851.0], [1.74314178E12, 861.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74314124E12, 0.0], [1.74314172E12, 0.0], [1.74314142E12, 0.0], [1.74314136E12, 0.0], [1.74314184E12, 0.0], [1.74314154E12, 0.0], [1.74314148E12, 0.0], [1.74314166E12, 0.0], [1.7431416E12, 0.0], [1.7431413E12, 0.0], [1.74314178E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74314124E12, 40.0], [1.74314172E12, 35.0], [1.74314142E12, 40.0], [1.74314136E12, 48.0], [1.74314184E12, 39.0], [1.74314154E12, 41.0], [1.74314148E12, 41.0], [1.74314166E12, 36.0], [1.7431416E12, 42.0], [1.7431413E12, 40.0], [1.74314178E12, 33.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74314124E12, 410.9800000000032], [1.74314172E12, 74.0], [1.74314142E12, 105.0], [1.74314136E12, 420.9800000000032], [1.74314184E12, 80.0], [1.74314154E12, 126.9800000000032], [1.74314148E12, 104.0], [1.74314166E12, 91.0], [1.7431416E12, 73.0], [1.7431413E12, 360.9900000000016], [1.74314178E12, 73.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74314124E12, 23.0], [1.74314172E12, 20.0], [1.74314142E12, 21.0], [1.74314136E12, 24.0], [1.74314184E12, 21.0], [1.74314154E12, 22.0], [1.74314148E12, 22.0], [1.74314166E12, 18.0], [1.7431416E12, 24.0], [1.7431413E12, 20.0], [1.74314178E12, 19.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.74314124E12, 52.0], [1.74314172E12, 41.0], [1.74314142E12, 48.0], [1.74314136E12, 63.0], [1.74314184E12, 46.0], [1.74314154E12, 48.0], [1.74314148E12, 50.0], [1.74314166E12, 45.0], [1.7431416E12, 49.0], [1.7431413E12, 52.0], [1.74314178E12, 39.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74314184E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 12.0, "minX": 195.0, "maxY": 43.0, "series": [{"data": [[195.0, 15.0], [865.0, 26.0], [1026.0, 32.0], [1125.0, 29.0], [1163.0, 32.0], [1203.0, 33.0], [1296.0, 25.0], [1336.0, 30.0], [1421.0, 43.0], [1511.0, 27.0], [1574.0, 35.0], [1658.0, 23.0], [1782.0, 23.0], [1832.0, 20.0], [2033.0, 20.0], [2108.0, 17.0], [2160.0, 26.0], [2420.0, 27.0], [2428.0, 27.0], [2384.0, 23.5], [2552.0, 27.0], [2456.0, 23.0], [2518.0, 27.0], [2482.0, 29.0], [2488.0, 23.0], [2516.0, 32.5], [2496.0, 20.0], [2550.0, 22.0], [2528.0, 38.0], [2506.0, 23.0], [2500.0, 22.0], [2682.0, 33.0], [2572.0, 22.0], [2600.0, 21.0], [2646.0, 16.0], [2640.0, 24.0], [2634.0, 31.0], [2670.0, 22.0], [2612.0, 31.0], [2592.0, 20.0], [2666.0, 26.0], [2660.0, 17.0], [2656.0, 19.0], [2590.0, 23.0], [2698.0, 24.0], [2690.0, 27.0], [2762.0, 25.0], [2776.0, 20.0], [2774.0, 18.0], [2766.0, 22.0], [2728.0, 24.0], [2730.0, 27.0], [2748.0, 23.0], [2812.0, 19.0], [2784.0, 16.0], [2786.0, 30.0], [2792.0, 24.0], [2794.0, 23.0], [2802.0, 21.0], [2842.0, 19.0], [2858.0, 24.0], [2866.0, 19.0], [2894.0, 19.0], [2898.0, 22.0], [2892.0, 18.0], [2828.0, 20.0], [2876.0, 23.0], [2928.0, 26.0], [2926.0, 29.0], [2890.0, 19.0], [3044.0, 30.0], [3030.0, 26.0], [3068.0, 16.0], [3040.0, 23.0], [3054.0, 21.0], [3064.0, 22.0], [2990.0, 20.0], [2976.0, 19.0], [3024.0, 23.0], [3028.0, 18.0], [2944.0, 23.0], [2994.0, 23.0], [3006.0, 36.0], [3178.0, 23.0], [3098.0, 18.0], [3084.0, 18.0], [3152.0, 28.0], [3150.0, 17.0], [3142.0, 19.0], [3108.0, 19.0], [3118.0, 17.0], [3120.0, 17.0], [3128.0, 18.0], [3124.0, 18.0], [3072.0, 20.0], [3136.0, 27.0], [3122.0, 20.0], [3182.0, 21.0], [3186.0, 23.0], [3192.0, 21.0], [3194.0, 25.0], [3198.0, 25.0], [3176.0, 16.0], [3168.0, 22.0], [3170.0, 16.0], [3174.0, 30.0], [3088.0, 25.0], [3090.0, 17.0], [3092.0, 21.0], [3094.0, 29.0], [3222.0, 21.0], [3218.0, 22.0], [3210.0, 18.0], [3214.0, 17.0], [3204.0, 27.0], [3226.0, 22.0], [3308.0, 12.0], [3298.0, 19.0], [3230.0, 20.0], [3296.0, 26.0], [3316.0, 21.0], [3236.0, 21.0], [3232.0, 24.0], [3238.0, 18.0], [3266.0, 21.0], [3320.0, 15.0], [3318.0, 21.0], [3326.0, 21.0], [3274.0, 18.0], [3282.0, 16.0], [3288.0, 21.0], [3200.0, 19.0], [3246.0, 20.0], [3256.0, 22.0], [3252.0, 16.0], [3434.0, 19.0], [3342.0, 18.0], [3344.0, 27.0], [3328.0, 16.0], [3338.0, 16.0], [3336.0, 23.0], [3390.0, 31.0], [3388.0, 18.0], [3384.0, 15.0], [3386.0, 25.0], [3382.0, 12.0], [3402.0, 18.0], [3400.0, 27.0], [3412.0, 23.0], [3416.0, 23.0], [3398.0, 18.0], [3394.0, 17.0], [3392.0, 20.0], [3436.0, 16.0], [3440.0, 20.0], [3442.0, 20.0], [3438.0, 17.0], [3446.0, 29.0], [3448.0, 27.0], [3454.0, 22.0], [3452.0, 28.0], [3364.0, 17.0], [3362.0, 32.0], [3360.0, 29.0], [3368.0, 29.0], [3366.0, 31.0], [3372.0, 22.0], [3370.0, 18.0], [3374.0, 20.0], [3430.0, 24.0], [3352.0, 13.0], [3354.0, 21.0], [3356.0, 22.0], [3358.0, 29.0], [3424.0, 16.0], [3428.0, 29.0], [3350.0, 23.0], [3346.0, 18.0], [3378.0, 22.0], [3482.0, 22.0], [3512.0, 22.0], [3508.0, 20.0], [3532.0, 19.0], [3550.0, 21.0], [3484.0, 19.0], [3570.0, 22.5], [3520.0, 22.0], [3552.0, 21.0], [3560.0, 21.0], [3566.0, 19.0], [3486.0, 21.0], [3480.0, 15.0], [3474.0, 22.0], [3456.0, 16.0], [3464.0, 26.0], [3460.0, 14.0], [3514.0, 19.0], [3516.0, 21.0], [3518.0, 21.0], [3522.0, 24.0], [3526.0, 17.0], [3506.0, 17.0], [3504.0, 27.0], [3502.0, 20.5], [3500.0, 18.0], [3498.0, 23.0], [3492.0, 18.0], [3488.0, 18.0], [3490.0, 21.0], [3548.0, 19.0], [3546.0, 23.0], [3534.0, 22.0], [3538.0, 23.0], [3612.0, 28.0], [3688.0, 13.0], [3628.0, 24.0], [3630.0, 25.0], [3646.0, 15.0], [3598.0, 21.0], [3592.0, 20.0], [3634.0, 21.0], [3632.0, 20.0], [3682.0, 15.0], [3668.0, 18.0], [3698.0, 19.0], [3662.0, 18.0], [3652.0, 18.0], [3670.0, 17.0], [3608.0, 15.0], [3602.0, 17.0], [3808.0, 24.0], [3718.0, 20.0], [3770.0, 20.0], [3720.0, 17.0], [3772.0, 22.0], [3780.0, 18.0], [3832.0, 17.0], [3782.0, 18.0], [3734.0, 18.0], [3796.0, 16.0], [3932.0, 21.0], [2297.0, 28.0], [2411.0, 25.0], [2367.0, 35.0], [2371.0, 24.0], [2421.0, 17.0], [2431.0, 21.0], [2349.0, 21.0], [2333.0, 25.0], [2339.0, 37.0], [2389.0, 41.0], [2385.0, 25.0], [2403.0, 24.0], [2359.0, 20.0], [2507.0, 18.0], [2519.0, 26.0], [2447.0, 24.0], [2479.0, 19.0], [2493.0, 20.0], [2517.0, 19.0], [2453.0, 22.0], [2503.0, 19.0], [2581.0, 33.0], [2575.0, 15.0], [2583.0, 21.0], [2587.0, 15.0], [2647.0, 21.0], [2677.0, 16.0], [2613.0, 19.0], [2607.0, 27.0], [2597.0, 19.0], [2565.0, 28.0], [2615.0, 20.0], [2665.0, 24.0], [2705.0, 20.0], [2701.0, 26.0], [2767.0, 20.0], [2775.0, 14.0], [2777.0, 15.0], [2783.0, 28.0], [2765.0, 21.0], [2721.0, 33.0], [2737.0, 29.0], [2733.0, 21.0], [2743.0, 19.0], [2811.0, 20.0], [2713.0, 19.0], [2795.0, 34.0], [2807.0, 22.0], [2837.0, 17.0], [2863.0, 24.0], [2895.0, 18.0], [2905.0, 20.0], [2893.0, 22.0], [2875.0, 19.0], [2879.0, 28.0], [2819.0, 18.0], [2873.0, 20.0], [2841.0, 20.0], [2839.0, 27.0], [2923.0, 16.0], [2931.0, 15.0], [2933.0, 23.0], [2939.0, 20.0], [2889.0, 16.0], [2887.0, 19.0], [2891.0, 21.0], [3055.0, 25.0], [3011.0, 25.0], [3049.0, 23.0], [3057.0, 29.0], [3007.0, 18.0], [2987.0, 22.0], [2981.0, 20.0], [3013.0, 18.0], [3015.0, 20.0], [3019.0, 18.0], [2975.0, 20.0], [2945.0, 17.0], [2995.0, 27.0], [3003.0, 23.0], [2993.0, 26.0], [3005.0, 20.0], [3031.0, 34.0], [3037.0, 19.0], [3075.0, 26.0], [3165.0, 21.0], [3153.0, 22.0], [3151.0, 22.0], [3149.0, 15.0], [3147.0, 19.0], [3077.0, 18.0], [3079.0, 23.0], [3083.0, 21.0], [3107.0, 22.0], [3105.0, 21.0], [3113.0, 22.0], [3111.0, 16.0], [3119.0, 22.0], [3127.0, 25.0], [3135.0, 22.0], [3131.0, 23.0], [3103.0, 20.0], [3101.0, 17.0], [3181.0, 21.0], [3189.0, 20.0], [3195.0, 19.0], [3199.0, 18.0], [3177.0, 16.0], [3175.0, 23.0], [3095.0, 21.0], [3217.0, 19.0], [3219.0, 26.0], [3205.0, 26.0], [3215.0, 19.0], [3209.0, 16.0], [3203.0, 17.0], [3221.0, 27.0], [3303.0, 18.0], [3301.0, 18.0], [3305.0, 21.0], [3309.0, 15.0], [3315.0, 19.0], [3237.0, 34.0], [3317.0, 22.0], [3323.0, 15.0], [3321.0, 19.0], [3265.0, 20.0], [3271.0, 27.0], [3259.0, 19.0], [3263.0, 24.0], [3261.0, 19.0], [3255.0, 13.0], [3239.0, 24.0], [3453.0, 15.0], [3329.0, 25.0], [3339.0, 17.0], [3345.0, 19.0], [3389.0, 18.0], [3383.0, 29.0], [3381.0, 13.0], [3379.0, 26.0], [3407.0, 23.0], [3421.0, 28.0], [3419.0, 27.0], [3417.0, 28.0], [3411.0, 21.0], [3401.0, 19.0], [3397.0, 17.0], [3399.0, 19.0], [3455.0, 22.0], [3395.0, 26.0], [3437.0, 19.0], [3443.0, 24.0], [3445.0, 25.0], [3447.0, 14.0], [3451.0, 21.0], [3361.0, 13.0], [3365.0, 15.0], [3367.0, 27.0], [3373.0, 26.0], [3377.0, 17.0], [3369.0, 21.0], [3351.0, 28.0], [3427.0, 20.0], [3433.0, 20.0], [3429.0, 18.0], [3483.0, 22.0], [3503.0, 19.0], [3501.0, 18.0], [3549.0, 20.0], [3551.0, 22.0], [3487.0, 21.0], [3575.0, 20.0], [3579.0, 19.0], [3481.0, 18.0], [3477.0, 26.0], [3479.0, 18.0], [3473.0, 36.0], [3461.0, 23.0], [3463.0, 20.0], [3465.0, 22.0], [3471.0, 19.0], [3583.0, 21.0], [3539.0, 20.0], [3541.0, 21.0], [3533.0, 18.0], [3527.0, 23.0], [3525.0, 19.0], [3521.0, 18.0], [3523.0, 18.0], [3505.0, 19.0], [3511.0, 20.0], [3513.0, 30.0], [3493.0, 19.0], [3489.0, 20.0], [3605.0, 22.0], [3635.0, 17.0], [3695.0, 21.0], [3691.0, 21.0], [3609.0, 13.0], [3615.0, 26.0], [3633.0, 17.0], [3631.0, 22.0], [3629.0, 20.0], [3625.0, 16.0], [3623.0, 18.0], [3589.0, 22.0], [3637.0, 19.0], [3585.0, 26.0], [3587.0, 18.0], [3593.0, 19.0], [3603.0, 23.0], [3591.0, 17.0], [3697.0, 20.0], [3673.0, 23.0], [3667.0, 30.0], [3677.0, 23.0], [3675.0, 20.0], [3651.0, 22.0], [3711.0, 17.0], [3655.0, 20.0], [3721.0, 16.0], [3755.0, 19.0], [3719.0, 21.0], [3759.0, 18.0], [3745.0, 21.0], [3733.0, 19.0], [3825.0, 26.0], [3739.0, 16.0], [3809.0, 25.0], [3851.0, 18.0], [3857.0, 19.0], [3859.0, 25.0], [3855.0, 19.0], [4019.0, 15.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4019.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 12.0, "minX": 195.0, "maxY": 43.0, "series": [{"data": [[195.0, 15.0], [865.0, 26.0], [1026.0, 32.0], [1125.0, 29.0], [1163.0, 32.0], [1203.0, 32.0], [1296.0, 25.0], [1336.0, 30.0], [1421.0, 43.0], [1511.0, 26.0], [1574.0, 34.0], [1658.0, 22.0], [1782.0, 23.0], [1832.0, 20.0], [2033.0, 20.0], [2108.0, 17.0], [2160.0, 26.0], [2420.0, 26.0], [2428.0, 26.0], [2384.0, 23.0], [2552.0, 27.0], [2456.0, 22.0], [2518.0, 27.0], [2482.0, 28.0], [2488.0, 23.0], [2516.0, 32.0], [2496.0, 20.0], [2550.0, 22.0], [2528.0, 38.0], [2506.0, 22.0], [2500.0, 21.0], [2682.0, 32.0], [2572.0, 22.0], [2600.0, 21.0], [2646.0, 16.0], [2640.0, 24.0], [2634.0, 31.0], [2670.0, 22.0], [2612.0, 31.0], [2592.0, 20.0], [2666.0, 26.0], [2660.0, 17.0], [2656.0, 19.0], [2590.0, 23.0], [2698.0, 24.0], [2690.0, 27.0], [2762.0, 25.0], [2776.0, 20.0], [2774.0, 18.0], [2766.0, 22.0], [2728.0, 24.0], [2730.0, 27.0], [2748.0, 23.0], [2812.0, 19.0], [2784.0, 16.0], [2786.0, 30.0], [2792.0, 24.0], [2794.0, 23.0], [2802.0, 21.0], [2842.0, 19.0], [2858.0, 23.0], [2866.0, 19.0], [2894.0, 19.0], [2898.0, 22.0], [2892.0, 18.0], [2828.0, 20.0], [2876.0, 23.0], [2928.0, 26.0], [2926.0, 29.0], [2890.0, 19.0], [3044.0, 30.0], [3030.0, 26.0], [3068.0, 16.0], [3040.0, 23.0], [3054.0, 21.0], [3064.0, 22.0], [2990.0, 20.0], [2976.0, 19.0], [3024.0, 23.0], [3028.0, 18.0], [2944.0, 23.0], [2994.0, 23.0], [3006.0, 34.0], [3178.0, 23.0], [3098.0, 18.0], [3084.0, 17.0], [3152.0, 27.0], [3150.0, 16.0], [3142.0, 18.0], [3108.0, 19.0], [3118.0, 17.0], [3120.0, 17.0], [3128.0, 18.0], [3124.0, 18.0], [3072.0, 20.0], [3136.0, 27.0], [3122.0, 20.0], [3182.0, 21.0], [3186.0, 23.0], [3192.0, 21.0], [3194.0, 25.0], [3198.0, 25.0], [3176.0, 16.0], [3168.0, 22.0], [3170.0, 16.0], [3174.0, 30.0], [3088.0, 25.0], [3090.0, 17.0], [3092.0, 21.0], [3094.0, 28.0], [3222.0, 21.0], [3218.0, 22.0], [3210.0, 17.0], [3214.0, 16.0], [3204.0, 26.0], [3226.0, 22.0], [3308.0, 12.0], [3298.0, 19.0], [3230.0, 20.0], [3296.0, 25.0], [3316.0, 20.0], [3236.0, 21.0], [3232.0, 23.0], [3238.0, 17.0], [3266.0, 21.0], [3320.0, 15.0], [3318.0, 21.0], [3326.0, 21.0], [3274.0, 18.0], [3282.0, 16.0], [3288.0, 21.0], [3200.0, 19.0], [3246.0, 20.0], [3256.0, 22.0], [3252.0, 16.0], [3434.0, 19.0], [3342.0, 18.0], [3344.0, 26.0], [3328.0, 16.0], [3338.0, 16.0], [3336.0, 23.0], [3390.0, 31.0], [3388.0, 18.0], [3384.0, 15.0], [3386.0, 25.0], [3382.0, 12.0], [3402.0, 18.0], [3400.0, 27.0], [3412.0, 23.0], [3416.0, 23.0], [3398.0, 18.0], [3394.0, 17.0], [3392.0, 20.0], [3436.0, 16.0], [3440.0, 20.0], [3442.0, 20.0], [3438.0, 17.0], [3446.0, 29.0], [3448.0, 26.0], [3454.0, 22.0], [3452.0, 28.0], [3364.0, 17.0], [3362.0, 32.0], [3360.0, 29.0], [3368.0, 29.0], [3366.0, 30.0], [3372.0, 22.0], [3370.0, 17.0], [3374.0, 20.0], [3430.0, 24.0], [3352.0, 13.0], [3354.0, 21.0], [3356.0, 22.0], [3358.0, 29.0], [3424.0, 16.0], [3428.0, 28.0], [3350.0, 23.0], [3346.0, 18.0], [3378.0, 22.0], [3482.0, 22.0], [3512.0, 22.0], [3508.0, 20.0], [3532.0, 19.0], [3550.0, 21.0], [3484.0, 19.0], [3570.0, 22.0], [3520.0, 22.0], [3552.0, 20.0], [3560.0, 20.0], [3566.0, 18.0], [3486.0, 21.0], [3480.0, 15.0], [3474.0, 22.0], [3456.0, 16.0], [3464.0, 26.0], [3460.0, 14.0], [3514.0, 18.0], [3516.0, 21.0], [3518.0, 21.0], [3522.0, 24.0], [3526.0, 17.0], [3506.0, 17.0], [3504.0, 26.0], [3502.0, 20.0], [3500.0, 18.0], [3498.0, 23.0], [3492.0, 17.0], [3488.0, 18.0], [3490.0, 21.0], [3548.0, 19.0], [3546.0, 23.0], [3534.0, 22.0], [3538.0, 23.0], [3612.0, 28.0], [3688.0, 13.0], [3628.0, 24.0], [3630.0, 25.0], [3646.0, 15.0], [3598.0, 20.0], [3592.0, 20.0], [3634.0, 21.0], [3632.0, 20.0], [3682.0, 15.0], [3668.0, 18.0], [3698.0, 19.0], [3662.0, 18.0], [3652.0, 18.0], [3670.0, 17.0], [3608.0, 15.0], [3602.0, 17.0], [3808.0, 23.0], [3718.0, 20.0], [3770.0, 19.0], [3720.0, 17.0], [3772.0, 22.0], [3780.0, 18.0], [3832.0, 17.0], [3782.0, 18.0], [3734.0, 18.0], [3796.0, 16.0], [3932.0, 21.0], [2297.0, 28.0], [2411.0, 25.0], [2367.0, 34.0], [2371.0, 23.0], [2421.0, 17.0], [2431.0, 20.0], [2349.0, 21.0], [2333.0, 25.0], [2339.0, 37.0], [2389.0, 41.0], [2385.0, 25.0], [2403.0, 24.0], [2359.0, 20.0], [2507.0, 18.0], [2519.0, 25.0], [2447.0, 24.0], [2479.0, 19.0], [2493.0, 19.0], [2517.0, 19.0], [2453.0, 21.0], [2503.0, 19.0], [2581.0, 33.0], [2575.0, 15.0], [2583.0, 21.0], [2587.0, 15.0], [2647.0, 21.0], [2677.0, 16.0], [2613.0, 19.0], [2607.0, 27.0], [2597.0, 19.0], [2565.0, 28.0], [2615.0, 20.0], [2665.0, 24.0], [2705.0, 20.0], [2701.0, 25.0], [2767.0, 20.0], [2775.0, 14.0], [2777.0, 15.0], [2783.0, 28.0], [2765.0, 21.0], [2721.0, 33.0], [2737.0, 29.0], [2733.0, 21.0], [2743.0, 19.0], [2811.0, 20.0], [2713.0, 19.0], [2795.0, 34.0], [2807.0, 22.0], [2837.0, 17.0], [2863.0, 24.0], [2895.0, 18.0], [2905.0, 20.0], [2893.0, 22.0], [2875.0, 19.0], [2879.0, 28.0], [2819.0, 17.0], [2873.0, 20.0], [2841.0, 20.0], [2839.0, 27.0], [2923.0, 16.0], [2931.0, 14.0], [2933.0, 23.0], [2939.0, 20.0], [2889.0, 16.0], [2887.0, 19.0], [2891.0, 21.0], [3055.0, 24.0], [3011.0, 25.0], [3049.0, 23.0], [3057.0, 29.0], [3007.0, 17.0], [2987.0, 21.0], [2981.0, 20.0], [3013.0, 18.0], [3015.0, 20.0], [3019.0, 18.0], [2975.0, 20.0], [2945.0, 17.0], [2995.0, 27.0], [3003.0, 22.0], [2993.0, 26.0], [3005.0, 20.0], [3031.0, 34.0], [3037.0, 19.0], [3075.0, 26.0], [3165.0, 21.0], [3153.0, 21.0], [3151.0, 22.0], [3149.0, 15.0], [3147.0, 19.0], [3077.0, 17.0], [3079.0, 23.0], [3083.0, 21.0], [3107.0, 21.0], [3105.0, 20.0], [3113.0, 22.0], [3111.0, 16.0], [3119.0, 22.0], [3127.0, 24.0], [3135.0, 22.0], [3131.0, 23.0], [3103.0, 20.0], [3101.0, 17.0], [3181.0, 21.0], [3189.0, 19.0], [3195.0, 19.0], [3199.0, 18.0], [3177.0, 16.0], [3175.0, 23.0], [3095.0, 21.0], [3217.0, 19.0], [3219.0, 26.0], [3205.0, 25.0], [3215.0, 19.0], [3209.0, 16.0], [3203.0, 17.0], [3221.0, 26.0], [3303.0, 18.0], [3301.0, 18.0], [3305.0, 21.0], [3309.0, 15.0], [3315.0, 19.0], [3237.0, 33.0], [3317.0, 22.0], [3323.0, 15.0], [3321.0, 19.0], [3265.0, 20.0], [3271.0, 26.0], [3259.0, 19.0], [3263.0, 23.0], [3261.0, 19.0], [3255.0, 13.0], [3239.0, 24.0], [3453.0, 15.0], [3329.0, 25.0], [3339.0, 17.0], [3345.0, 19.0], [3389.0, 18.0], [3383.0, 28.0], [3381.0, 13.0], [3379.0, 26.0], [3407.0, 23.0], [3421.0, 28.0], [3419.0, 26.0], [3417.0, 28.0], [3411.0, 21.0], [3401.0, 19.0], [3397.0, 17.0], [3399.0, 18.0], [3455.0, 22.0], [3395.0, 25.0], [3437.0, 19.0], [3443.0, 23.0], [3445.0, 25.0], [3447.0, 14.0], [3451.0, 20.0], [3361.0, 13.0], [3365.0, 14.0], [3367.0, 27.0], [3373.0, 25.0], [3377.0, 17.0], [3369.0, 21.0], [3351.0, 28.0], [3427.0, 20.0], [3433.0, 20.0], [3429.0, 18.0], [3483.0, 22.0], [3503.0, 19.0], [3501.0, 18.0], [3549.0, 19.0], [3551.0, 22.0], [3487.0, 21.0], [3575.0, 20.0], [3579.0, 19.0], [3481.0, 18.0], [3477.0, 26.0], [3479.0, 18.0], [3473.0, 35.0], [3461.0, 23.0], [3463.0, 19.0], [3465.0, 22.0], [3471.0, 19.0], [3583.0, 21.0], [3539.0, 20.0], [3541.0, 21.0], [3533.0, 18.0], [3527.0, 23.0], [3525.0, 19.0], [3521.0, 18.0], [3523.0, 18.0], [3505.0, 19.0], [3511.0, 20.0], [3513.0, 30.0], [3493.0, 19.0], [3489.0, 19.0], [3605.0, 22.0], [3635.0, 17.0], [3695.0, 21.0], [3691.0, 21.0], [3609.0, 13.0], [3615.0, 26.0], [3633.0, 16.0], [3631.0, 22.0], [3629.0, 20.0], [3625.0, 16.0], [3623.0, 18.0], [3589.0, 22.0], [3637.0, 19.0], [3585.0, 26.0], [3587.0, 18.0], [3593.0, 19.0], [3603.0, 23.0], [3591.0, 17.0], [3697.0, 20.0], [3673.0, 23.0], [3667.0, 30.0], [3677.0, 23.0], [3675.0, 19.0], [3651.0, 22.0], [3711.0, 17.0], [3655.0, 19.0], [3721.0, 16.0], [3755.0, 19.0], [3719.0, 21.0], [3759.0, 18.0], [3745.0, 21.0], [3733.0, 19.0], [3825.0, 26.0], [3739.0, 16.0], [3809.0, 25.0], [3851.0, 18.0], [3857.0, 19.0], [3859.0, 25.0], [3855.0, 19.0], [4019.0, 15.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4019.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 627.85, "minX": 1.74314124E12, "maxY": 3578.95, "series": [{"data": [[1.74314124E12, 1759.3], [1.74314172E12, 3572.9333333333334], [1.74314142E12, 3105.2166666666667], [1.74314136E12, 2908.15], [1.74314184E12, 627.85], [1.74314154E12, 3343.266666666667], [1.74314148E12, 3211.2], [1.74314166E12, 3470.016666666667], [1.7431416E12, 3486.55], [1.7431413E12, 2671.633333333333], [1.74314178E12, 3578.95]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74314184E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 629.1166666666667, "minX": 1.74314124E12, "maxY": 3578.7166666666667, "series": [{"data": [[1.74314124E12, 1757.8333333333333], [1.74314172E12, 3573.3166666666666], [1.74314142E12, 3104.0333333333333], [1.74314136E12, 2910.05], [1.74314184E12, 629.1166666666667], [1.74314154E12, 3344.15], [1.74314148E12, 3211.05], [1.74314166E12, 3471.05], [1.7431416E12, 3485.9], [1.7431413E12, 2669.85], [1.74314178E12, 3578.7166666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74314184E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 629.1166666666667, "minX": 1.74314124E12, "maxY": 3578.7166666666667, "series": [{"data": [[1.74314124E12, 1757.8333333333333], [1.74314172E12, 3573.3166666666666], [1.74314142E12, 3104.0333333333333], [1.74314136E12, 2910.05], [1.74314184E12, 629.1166666666667], [1.74314154E12, 3344.15], [1.74314148E12, 3211.05], [1.74314166E12, 3471.05], [1.7431416E12, 3485.9], [1.7431413E12, 2669.85], [1.74314178E12, 3578.7166666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74314184E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 629.1166666666667, "minX": 1.74314124E12, "maxY": 3578.7166666666667, "series": [{"data": [[1.74314124E12, 1757.8333333333333], [1.74314172E12, 3573.3166666666666], [1.74314142E12, 3104.0333333333333], [1.74314136E12, 2910.05], [1.74314184E12, 629.1166666666667], [1.74314154E12, 3344.15], [1.74314148E12, 3211.05], [1.74314166E12, 3471.05], [1.7431416E12, 3485.9], [1.7431413E12, 2669.85], [1.74314178E12, 3578.7166666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74314184E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

