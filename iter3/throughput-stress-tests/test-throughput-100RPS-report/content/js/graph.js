/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 4746.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 2.0], [0.3, 2.0], [0.4, 3.0], [0.5, 3.0], [0.6, 3.0], [0.7, 3.0], [0.8, 3.0], [0.9, 3.0], [1.0, 4.0], [1.1, 4.0], [1.2, 4.0], [1.3, 4.0], [1.4, 4.0], [1.5, 4.0], [1.6, 4.0], [1.7, 4.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 5.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 7.0], [4.0, 7.0], [4.1, 7.0], [4.2, 7.0], [4.3, 7.0], [4.4, 7.0], [4.5, 7.0], [4.6, 7.0], [4.7, 7.0], [4.8, 7.0], [4.9, 7.0], [5.0, 7.0], [5.1, 8.0], [5.2, 8.0], [5.3, 8.0], [5.4, 8.0], [5.5, 8.0], [5.6, 8.0], [5.7, 8.0], [5.8, 8.0], [5.9, 8.0], [6.0, 8.0], [6.1, 8.0], [6.2, 8.0], [6.3, 8.0], [6.4, 8.0], [6.5, 9.0], [6.6, 9.0], [6.7, 9.0], [6.8, 9.0], [6.9, 9.0], [7.0, 9.0], [7.1, 9.0], [7.2, 9.0], [7.3, 9.0], [7.4, 9.0], [7.5, 9.0], [7.6, 9.0], [7.7, 9.0], [7.8, 9.0], [7.9, 9.0], [8.0, 10.0], [8.1, 10.0], [8.2, 10.0], [8.3, 10.0], [8.4, 10.0], [8.5, 10.0], [8.6, 10.0], [8.7, 10.0], [8.8, 10.0], [8.9, 10.0], [9.0, 10.0], [9.1, 10.0], [9.2, 10.0], [9.3, 10.0], [9.4, 10.0], [9.5, 10.0], [9.6, 10.0], [9.7, 10.0], [9.8, 11.0], [9.9, 11.0], [10.0, 11.0], [10.1, 11.0], [10.2, 11.0], [10.3, 11.0], [10.4, 11.0], [10.5, 11.0], [10.6, 11.0], [10.7, 11.0], [10.8, 11.0], [10.9, 11.0], [11.0, 11.0], [11.1, 11.0], [11.2, 11.0], [11.3, 11.0], [11.4, 11.0], [11.5, 11.0], [11.6, 11.0], [11.7, 11.0], [11.8, 11.0], [11.9, 12.0], [12.0, 12.0], [12.1, 12.0], [12.2, 12.0], [12.3, 12.0], [12.4, 12.0], [12.5, 12.0], [12.6, 12.0], [12.7, 12.0], [12.8, 12.0], [12.9, 12.0], [13.0, 12.0], [13.1, 12.0], [13.2, 12.0], [13.3, 12.0], [13.4, 12.0], [13.5, 12.0], [13.6, 12.0], [13.7, 12.0], [13.8, 12.0], [13.9, 12.0], [14.0, 12.0], [14.1, 12.0], [14.2, 12.0], [14.3, 13.0], [14.4, 13.0], [14.5, 13.0], [14.6, 13.0], [14.7, 13.0], [14.8, 13.0], [14.9, 13.0], [15.0, 13.0], [15.1, 13.0], [15.2, 13.0], [15.3, 13.0], [15.4, 13.0], [15.5, 13.0], [15.6, 13.0], [15.7, 13.0], [15.8, 13.0], [15.9, 13.0], [16.0, 13.0], [16.1, 13.0], [16.2, 13.0], [16.3, 13.0], [16.4, 13.0], [16.5, 13.0], [16.6, 13.0], [16.7, 13.0], [16.8, 13.0], [16.9, 13.0], [17.0, 14.0], [17.1, 14.0], [17.2, 14.0], [17.3, 14.0], [17.4, 14.0], [17.5, 14.0], [17.6, 14.0], [17.7, 14.0], [17.8, 14.0], [17.9, 14.0], [18.0, 14.0], [18.1, 14.0], [18.2, 14.0], [18.3, 14.0], [18.4, 14.0], [18.5, 14.0], [18.6, 14.0], [18.7, 14.0], [18.8, 14.0], [18.9, 14.0], [19.0, 14.0], [19.1, 14.0], [19.2, 14.0], [19.3, 14.0], [19.4, 14.0], [19.5, 14.0], [19.6, 14.0], [19.7, 14.0], [19.8, 14.0], [19.9, 14.0], [20.0, 14.0], [20.1, 15.0], [20.2, 15.0], [20.3, 15.0], [20.4, 15.0], [20.5, 15.0], [20.6, 15.0], [20.7, 15.0], [20.8, 15.0], [20.9, 15.0], [21.0, 15.0], [21.1, 15.0], [21.2, 15.0], [21.3, 15.0], [21.4, 15.0], [21.5, 15.0], [21.6, 15.0], [21.7, 15.0], [21.8, 15.0], [21.9, 15.0], [22.0, 15.0], [22.1, 15.0], [22.2, 15.0], [22.3, 15.0], [22.4, 15.0], [22.5, 15.0], [22.6, 15.0], [22.7, 15.0], [22.8, 15.0], [22.9, 15.0], [23.0, 15.0], [23.1, 15.0], [23.2, 15.0], [23.3, 15.0], [23.4, 16.0], [23.5, 16.0], [23.6, 16.0], [23.7, 16.0], [23.8, 16.0], [23.9, 16.0], [24.0, 16.0], [24.1, 16.0], [24.2, 16.0], [24.3, 16.0], [24.4, 16.0], [24.5, 16.0], [24.6, 16.0], [24.7, 16.0], [24.8, 16.0], [24.9, 16.0], [25.0, 16.0], [25.1, 16.0], [25.2, 16.0], [25.3, 16.0], [25.4, 16.0], [25.5, 16.0], [25.6, 16.0], [25.7, 16.0], [25.8, 16.0], [25.9, 16.0], [26.0, 16.0], [26.1, 16.0], [26.2, 16.0], [26.3, 16.0], [26.4, 16.0], [26.5, 16.0], [26.6, 16.0], [26.7, 16.0], [26.8, 16.0], [26.9, 17.0], [27.0, 17.0], [27.1, 17.0], [27.2, 17.0], [27.3, 17.0], [27.4, 17.0], [27.5, 17.0], [27.6, 17.0], [27.7, 17.0], [27.8, 17.0], [27.9, 17.0], [28.0, 17.0], [28.1, 17.0], [28.2, 17.0], [28.3, 17.0], [28.4, 17.0], [28.5, 17.0], [28.6, 17.0], [28.7, 17.0], [28.8, 17.0], [28.9, 17.0], [29.0, 17.0], [29.1, 17.0], [29.2, 17.0], [29.3, 17.0], [29.4, 17.0], [29.5, 17.0], [29.6, 17.0], [29.7, 17.0], [29.8, 17.0], [29.9, 17.0], [30.0, 17.0], [30.1, 17.0], [30.2, 17.0], [30.3, 17.0], [30.4, 17.0], [30.5, 17.0], [30.6, 18.0], [30.7, 18.0], [30.8, 18.0], [30.9, 18.0], [31.0, 18.0], [31.1, 18.0], [31.2, 18.0], [31.3, 18.0], [31.4, 18.0], [31.5, 18.0], [31.6, 18.0], [31.7, 18.0], [31.8, 18.0], [31.9, 18.0], [32.0, 18.0], [32.1, 18.0], [32.2, 18.0], [32.3, 18.0], [32.4, 18.0], [32.5, 18.0], [32.6, 18.0], [32.7, 18.0], [32.8, 18.0], [32.9, 18.0], [33.0, 18.0], [33.1, 18.0], [33.2, 18.0], [33.3, 18.0], [33.4, 18.0], [33.5, 18.0], [33.6, 18.0], [33.7, 18.0], [33.8, 18.0], [33.9, 18.0], [34.0, 18.0], [34.1, 18.0], [34.2, 18.0], [34.3, 19.0], [34.4, 19.0], [34.5, 19.0], [34.6, 19.0], [34.7, 19.0], [34.8, 19.0], [34.9, 19.0], [35.0, 19.0], [35.1, 19.0], [35.2, 19.0], [35.3, 19.0], [35.4, 19.0], [35.5, 19.0], [35.6, 19.0], [35.7, 19.0], [35.8, 19.0], [35.9, 19.0], [36.0, 19.0], [36.1, 19.0], [36.2, 19.0], [36.3, 19.0], [36.4, 19.0], [36.5, 19.0], [36.6, 19.0], [36.7, 19.0], [36.8, 19.0], [36.9, 19.0], [37.0, 19.0], [37.1, 19.0], [37.2, 19.0], [37.3, 19.0], [37.4, 19.0], [37.5, 19.0], [37.6, 19.0], [37.7, 19.0], [37.8, 19.0], [37.9, 19.0], [38.0, 19.0], [38.1, 20.0], [38.2, 20.0], [38.3, 20.0], [38.4, 20.0], [38.5, 20.0], [38.6, 20.0], [38.7, 20.0], [38.8, 20.0], [38.9, 20.0], [39.0, 20.0], [39.1, 20.0], [39.2, 20.0], [39.3, 20.0], [39.4, 20.0], [39.5, 20.0], [39.6, 20.0], [39.7, 20.0], [39.8, 20.0], [39.9, 20.0], [40.0, 20.0], [40.1, 20.0], [40.2, 20.0], [40.3, 20.0], [40.4, 20.0], [40.5, 20.0], [40.6, 20.0], [40.7, 20.0], [40.8, 20.0], [40.9, 20.0], [41.0, 20.0], [41.1, 20.0], [41.2, 20.0], [41.3, 20.0], [41.4, 20.0], [41.5, 20.0], [41.6, 20.0], [41.7, 20.0], [41.8, 21.0], [41.9, 21.0], [42.0, 21.0], [42.1, 21.0], [42.2, 21.0], [42.3, 21.0], [42.4, 21.0], [42.5, 21.0], [42.6, 21.0], [42.7, 21.0], [42.8, 21.0], [42.9, 21.0], [43.0, 21.0], [43.1, 21.0], [43.2, 21.0], [43.3, 21.0], [43.4, 21.0], [43.5, 21.0], [43.6, 21.0], [43.7, 21.0], [43.8, 21.0], [43.9, 21.0], [44.0, 21.0], [44.1, 21.0], [44.2, 21.0], [44.3, 21.0], [44.4, 21.0], [44.5, 21.0], [44.6, 21.0], [44.7, 21.0], [44.8, 21.0], [44.9, 21.0], [45.0, 21.0], [45.1, 21.0], [45.2, 21.0], [45.3, 21.0], [45.4, 21.0], [45.5, 22.0], [45.6, 22.0], [45.7, 22.0], [45.8, 22.0], [45.9, 22.0], [46.0, 22.0], [46.1, 22.0], [46.2, 22.0], [46.3, 22.0], [46.4, 22.0], [46.5, 22.0], [46.6, 22.0], [46.7, 22.0], [46.8, 22.0], [46.9, 22.0], [47.0, 22.0], [47.1, 22.0], [47.2, 22.0], [47.3, 22.0], [47.4, 22.0], [47.5, 22.0], [47.6, 22.0], [47.7, 22.0], [47.8, 22.0], [47.9, 22.0], [48.0, 22.0], [48.1, 22.0], [48.2, 22.0], [48.3, 22.0], [48.4, 22.0], [48.5, 22.0], [48.6, 22.0], [48.7, 22.0], [48.8, 22.0], [48.9, 22.0], [49.0, 22.0], [49.1, 23.0], [49.2, 23.0], [49.3, 23.0], [49.4, 23.0], [49.5, 23.0], [49.6, 23.0], [49.7, 23.0], [49.8, 23.0], [49.9, 23.0], [50.0, 23.0], [50.1, 23.0], [50.2, 23.0], [50.3, 23.0], [50.4, 23.0], [50.5, 23.0], [50.6, 23.0], [50.7, 23.0], [50.8, 23.0], [50.9, 23.0], [51.0, 23.0], [51.1, 23.0], [51.2, 23.0], [51.3, 23.0], [51.4, 23.0], [51.5, 23.0], [51.6, 23.0], [51.7, 23.0], [51.8, 23.0], [51.9, 23.0], [52.0, 23.0], [52.1, 23.0], [52.2, 23.0], [52.3, 23.0], [52.4, 23.0], [52.5, 23.0], [52.6, 24.0], [52.7, 24.0], [52.8, 24.0], [52.9, 24.0], [53.0, 24.0], [53.1, 24.0], [53.2, 24.0], [53.3, 24.0], [53.4, 24.0], [53.5, 24.0], [53.6, 24.0], [53.7, 24.0], [53.8, 24.0], [53.9, 24.0], [54.0, 24.0], [54.1, 24.0], [54.2, 24.0], [54.3, 24.0], [54.4, 24.0], [54.5, 24.0], [54.6, 24.0], [54.7, 24.0], [54.8, 24.0], [54.9, 24.0], [55.0, 24.0], [55.1, 24.0], [55.2, 24.0], [55.3, 24.0], [55.4, 24.0], [55.5, 24.0], [55.6, 24.0], [55.7, 24.0], [55.8, 24.0], [55.9, 24.0], [56.0, 25.0], [56.1, 25.0], [56.2, 25.0], [56.3, 25.0], [56.4, 25.0], [56.5, 25.0], [56.6, 25.0], [56.7, 25.0], [56.8, 25.0], [56.9, 25.0], [57.0, 25.0], [57.1, 25.0], [57.2, 25.0], [57.3, 25.0], [57.4, 25.0], [57.5, 25.0], [57.6, 25.0], [57.7, 25.0], [57.8, 25.0], [57.9, 25.0], [58.0, 25.0], [58.1, 25.0], [58.2, 25.0], [58.3, 25.0], [58.4, 25.0], [58.5, 25.0], [58.6, 25.0], [58.7, 25.0], [58.8, 25.0], [58.9, 25.0], [59.0, 25.0], [59.1, 25.0], [59.2, 26.0], [59.3, 26.0], [59.4, 26.0], [59.5, 26.0], [59.6, 26.0], [59.7, 26.0], [59.8, 26.0], [59.9, 26.0], [60.0, 26.0], [60.1, 26.0], [60.2, 26.0], [60.3, 26.0], [60.4, 26.0], [60.5, 26.0], [60.6, 26.0], [60.7, 26.0], [60.8, 26.0], [60.9, 26.0], [61.0, 26.0], [61.1, 26.0], [61.2, 26.0], [61.3, 26.0], [61.4, 26.0], [61.5, 26.0], [61.6, 26.0], [61.7, 26.0], [61.8, 26.0], [61.9, 26.0], [62.0, 26.0], [62.1, 26.0], [62.2, 27.0], [62.3, 27.0], [62.4, 27.0], [62.5, 27.0], [62.6, 27.0], [62.7, 27.0], [62.8, 27.0], [62.9, 27.0], [63.0, 27.0], [63.1, 27.0], [63.2, 27.0], [63.3, 27.0], [63.4, 27.0], [63.5, 27.0], [63.6, 27.0], [63.7, 27.0], [63.8, 27.0], [63.9, 27.0], [64.0, 27.0], [64.1, 27.0], [64.2, 27.0], [64.3, 27.0], [64.4, 27.0], [64.5, 27.0], [64.6, 27.0], [64.7, 27.0], [64.8, 27.0], [64.9, 27.0], [65.0, 27.0], [65.1, 28.0], [65.2, 28.0], [65.3, 28.0], [65.4, 28.0], [65.5, 28.0], [65.6, 28.0], [65.7, 28.0], [65.8, 28.0], [65.9, 28.0], [66.0, 28.0], [66.1, 28.0], [66.2, 28.0], [66.3, 28.0], [66.4, 28.0], [66.5, 28.0], [66.6, 28.0], [66.7, 28.0], [66.8, 28.0], [66.9, 28.0], [67.0, 28.0], [67.1, 28.0], [67.2, 28.0], [67.3, 28.0], [67.4, 28.0], [67.5, 28.0], [67.6, 28.0], [67.7, 29.0], [67.8, 29.0], [67.9, 29.0], [68.0, 29.0], [68.1, 29.0], [68.2, 29.0], [68.3, 29.0], [68.4, 29.0], [68.5, 29.0], [68.6, 29.0], [68.7, 29.0], [68.8, 29.0], [68.9, 29.0], [69.0, 29.0], [69.1, 29.0], [69.2, 29.0], [69.3, 29.0], [69.4, 29.0], [69.5, 29.0], [69.6, 29.0], [69.7, 29.0], [69.8, 29.0], [69.9, 29.0], [70.0, 29.0], [70.1, 29.0], [70.2, 29.0], [70.3, 30.0], [70.4, 30.0], [70.5, 30.0], [70.6, 30.0], [70.7, 30.0], [70.8, 30.0], [70.9, 30.0], [71.0, 30.0], [71.1, 30.0], [71.2, 30.0], [71.3, 30.0], [71.4, 30.0], [71.5, 30.0], [71.6, 30.0], [71.7, 30.0], [71.8, 30.0], [71.9, 30.0], [72.0, 30.0], [72.1, 30.0], [72.2, 30.0], [72.3, 30.0], [72.4, 30.0], [72.5, 30.0], [72.6, 30.0], [72.7, 31.0], [72.8, 31.0], [72.9, 31.0], [73.0, 31.0], [73.1, 31.0], [73.2, 31.0], [73.3, 31.0], [73.4, 31.0], [73.5, 31.0], [73.6, 31.0], [73.7, 31.0], [73.8, 31.0], [73.9, 31.0], [74.0, 31.0], [74.1, 31.0], [74.2, 31.0], [74.3, 31.0], [74.4, 31.0], [74.5, 31.0], [74.6, 31.0], [74.7, 31.0], [74.8, 32.0], [74.9, 32.0], [75.0, 32.0], [75.1, 32.0], [75.2, 32.0], [75.3, 32.0], [75.4, 32.0], [75.5, 32.0], [75.6, 32.0], [75.7, 32.0], [75.8, 32.0], [75.9, 32.0], [76.0, 32.0], [76.1, 32.0], [76.2, 32.0], [76.3, 32.0], [76.4, 32.0], [76.5, 32.0], [76.6, 32.0], [76.7, 32.0], [76.8, 32.0], [76.9, 33.0], [77.0, 33.0], [77.1, 33.0], [77.2, 33.0], [77.3, 33.0], [77.4, 33.0], [77.5, 33.0], [77.6, 33.0], [77.7, 33.0], [77.8, 33.0], [77.9, 33.0], [78.0, 33.0], [78.1, 33.0], [78.2, 33.0], [78.3, 33.0], [78.4, 33.0], [78.5, 33.0], [78.6, 33.0], [78.7, 34.0], [78.8, 34.0], [78.9, 34.0], [79.0, 34.0], [79.1, 34.0], [79.2, 34.0], [79.3, 34.0], [79.4, 34.0], [79.5, 34.0], [79.6, 34.0], [79.7, 34.0], [79.8, 34.0], [79.9, 34.0], [80.0, 34.0], [80.1, 34.0], [80.2, 34.0], [80.3, 34.0], [80.4, 34.0], [80.5, 35.0], [80.6, 35.0], [80.7, 35.0], [80.8, 35.0], [80.9, 35.0], [81.0, 35.0], [81.1, 35.0], [81.2, 35.0], [81.3, 35.0], [81.4, 35.0], [81.5, 35.0], [81.6, 35.0], [81.7, 35.0], [81.8, 35.0], [81.9, 35.0], [82.0, 35.0], [82.1, 36.0], [82.2, 36.0], [82.3, 36.0], [82.4, 36.0], [82.5, 36.0], [82.6, 36.0], [82.7, 36.0], [82.8, 36.0], [82.9, 36.0], [83.0, 36.0], [83.1, 36.0], [83.2, 36.0], [83.3, 36.0], [83.4, 36.0], [83.5, 37.0], [83.6, 37.0], [83.7, 37.0], [83.8, 37.0], [83.9, 37.0], [84.0, 37.0], [84.1, 37.0], [84.2, 37.0], [84.3, 37.0], [84.4, 37.0], [84.5, 37.0], [84.6, 37.0], [84.7, 37.0], [84.8, 37.0], [84.9, 38.0], [85.0, 38.0], [85.1, 38.0], [85.2, 38.0], [85.3, 38.0], [85.4, 38.0], [85.5, 38.0], [85.6, 38.0], [85.7, 38.0], [85.8, 38.0], [85.9, 38.0], [86.0, 38.0], [86.1, 39.0], [86.2, 39.0], [86.3, 39.0], [86.4, 39.0], [86.5, 39.0], [86.6, 39.0], [86.7, 39.0], [86.8, 39.0], [86.9, 39.0], [87.0, 39.0], [87.1, 39.0], [87.2, 40.0], [87.3, 40.0], [87.4, 40.0], [87.5, 40.0], [87.6, 40.0], [87.7, 40.0], [87.8, 40.0], [87.9, 40.0], [88.0, 40.0], [88.1, 40.0], [88.2, 41.0], [88.3, 41.0], [88.4, 41.0], [88.5, 41.0], [88.6, 41.0], [88.7, 41.0], [88.8, 41.0], [88.9, 41.0], [89.0, 41.0], [89.1, 42.0], [89.2, 42.0], [89.3, 42.0], [89.4, 42.0], [89.5, 42.0], [89.6, 42.0], [89.7, 42.0], [89.8, 42.0], [89.9, 42.0], [90.0, 43.0], [90.1, 43.0], [90.2, 43.0], [90.3, 43.0], [90.4, 43.0], [90.5, 43.0], [90.6, 43.0], [90.7, 44.0], [90.8, 44.0], [90.9, 44.0], [91.0, 44.0], [91.1, 44.0], [91.2, 44.0], [91.3, 44.0], [91.4, 45.0], [91.5, 45.0], [91.6, 45.0], [91.7, 45.0], [91.8, 45.0], [91.9, 45.0], [92.0, 45.0], [92.1, 46.0], [92.2, 46.0], [92.3, 46.0], [92.4, 46.0], [92.5, 46.0], [92.6, 47.0], [92.7, 47.0], [92.8, 47.0], [92.9, 47.0], [93.0, 47.0], [93.1, 48.0], [93.2, 48.0], [93.3, 48.0], [93.4, 48.0], [93.5, 48.0], [93.6, 49.0], [93.7, 49.0], [93.8, 49.0], [93.9, 49.0], [94.0, 50.0], [94.1, 50.0], [94.2, 50.0], [94.3, 50.0], [94.4, 51.0], [94.5, 51.0], [94.6, 51.0], [94.7, 51.0], [94.8, 52.0], [94.9, 52.0], [95.0, 52.0], [95.1, 53.0], [95.2, 53.0], [95.3, 54.0], [95.4, 54.0], [95.5, 54.0], [95.6, 55.0], [95.7, 55.0], [95.8, 56.0], [95.9, 56.0], [96.0, 57.0], [96.1, 57.0], [96.2, 58.0], [96.3, 58.0], [96.4, 59.0], [96.5, 59.0], [96.6, 60.0], [96.7, 61.0], [96.8, 62.0], [96.9, 62.0], [97.0, 63.0], [97.1, 64.0], [97.2, 65.0], [97.3, 66.0], [97.4, 68.0], [97.5, 69.0], [97.6, 71.0], [97.7, 72.0], [97.8, 75.0], [97.9, 77.0], [98.0, 80.0], [98.1, 84.0], [98.2, 88.0], [98.3, 93.0], [98.4, 100.0], [98.5, 109.0], [98.6, 119.0], [98.7, 133.0], [98.8, 148.0], [98.9, 165.0], [99.0, 186.0], [99.1, 211.0], [99.2, 243.0], [99.3, 281.0], [99.4, 325.0], [99.5, 384.0], [99.6, 459.0], [99.7, 557.0], [99.8, 709.0], [99.9, 997.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1789133.0, "series": [{"data": [[0.0, 1789133.0], [600.0, 1104.0], [700.0, 914.0], [800.0, 613.0], [900.0, 411.0], [1000.0, 318.0], [1100.0, 290.0], [1200.0, 201.0], [1300.0, 129.0], [1400.0, 123.0], [1500.0, 94.0], [100.0, 12146.0], [1600.0, 112.0], [1700.0, 71.0], [1800.0, 67.0], [1900.0, 45.0], [2000.0, 23.0], [2100.0, 53.0], [2200.0, 49.0], [2300.0, 33.0], [2400.0, 37.0], [2500.0, 20.0], [2600.0, 24.0], [2700.0, 4.0], [2800.0, 5.0], [2900.0, 7.0], [3000.0, 5.0], [3100.0, 11.0], [200.0, 5235.0], [3200.0, 33.0], [3300.0, 31.0], [3400.0, 8.0], [3500.0, 8.0], [3600.0, 1.0], [3800.0, 1.0], [4100.0, 2.0], [4200.0, 1.0], [300.0, 3251.0], [4700.0, 1.0], [400.0, 2180.0], [500.0, 1638.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 744.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1811964.0, "series": [{"data": [[0.0, 1811964.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5724.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 744.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 293.8511296719145, "minX": 1.74313782E12, "maxY": 700.0, "series": [{"data": [[1.743138E12, 700.0], [1.74313818E12, 700.0], [1.74313788E12, 686.0540987352298], [1.74313806E12, 700.0], [1.74313836E12, 700.0], [1.74313842E12, 699.6763744955115], [1.74313794E12, 700.0], [1.74313824E12, 700.0], [1.7431383E12, 700.0], [1.74313782E12, 293.8511296719145], [1.74313812E12, 700.0]], "isOverall": false, "label": "Throughput Stress Test Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74313842E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4.266666666666666, "minX": 11.0, "maxY": 481.62666666666667, "series": [{"data": [[11.0, 46.26315789473685], [12.0, 13.73076923076923], [13.0, 16.096774193548388], [14.0, 17.0], [15.0, 17.785714285714285], [16.0, 19.314285714285713], [17.0, 17.15625], [18.0, 19.350000000000005], [19.0, 21.028571428571432], [20.0, 21.183673469387756], [21.0, 20.11111111111111], [22.0, 22.571428571428562], [23.0, 31.941176470588236], [24.0, 29.599999999999998], [25.0, 38.971428571428575], [26.0, 27.756097560975615], [27.0, 27.135135135135133], [28.0, 27.682926829268293], [29.0, 24.763157894736846], [30.0, 20.77586206896552], [31.0, 8.409090909090908], [32.0, 19.64705882352941], [33.0, 25.52380952380952], [34.0, 28.741379310344833], [35.0, 28.59090909090909], [36.0, 30.450000000000003], [37.0, 31.000000000000004], [38.0, 35.97872340425533], [39.0, 32.64583333333332], [40.0, 36.71212121212122], [41.0, 23.822222222222226], [42.0, 60.512195121951216], [43.0, 32.05263157894738], [44.0, 59.96], [45.0, 38.43478260869565], [46.0, 41.15217391304348], [47.0, 41.67441860465116], [48.0, 43.46666666666667], [49.0, 39.14285714285716], [50.0, 33.02272727272727], [51.0, 35.3170731707317], [52.0, 37.880952380952394], [53.0, 42.279069767441875], [54.0, 46.70454545454546], [55.0, 51.5], [56.0, 49.125], [57.0, 48.955555555555556], [58.0, 55.44999999999999], [59.0, 44.661538461538456], [60.0, 65.92], [61.0, 41.519999999999996], [62.0, 34.21428571428572], [63.0, 30.04615384615385], [64.0, 10.128205128205128], [65.0, 14.866666666666667], [66.0, 22.863636363636363], [67.0, 24.55128205128205], [68.0, 20.142857142857146], [69.0, 25.95555555555556], [70.0, 24.91304347826087], [71.0, 22.743589743589737], [72.0, 44.720930232558125], [73.0, 51.057692307692314], [74.0, 54.86666666666667], [75.0, 47.56818181818182], [76.0, 63.16], [77.0, 60.951219512195124], [78.0, 61.339999999999996], [79.0, 63.446808510638306], [80.0, 67.89795918367345], [81.0, 65.06382978723404], [82.0, 61.919999999999995], [83.0, 39.4710743801653], [84.0, 45.74074074074075], [85.0, 45.166666666666664], [86.0, 58.57142857142858], [87.0, 70.38775510204081], [88.0, 57.333333333333336], [89.0, 72.72727272727272], [90.0, 134.72463768115946], [91.0, 46.42307692307693], [92.0, 36.86666666666667], [93.0, 38.54901960784313], [94.0, 43.69387755102042], [95.0, 46.54716981132076], [96.0, 46.55357142857143], [97.0, 46.68085106382978], [98.0, 51.059999999999995], [99.0, 51.199999999999996], [100.0, 51.860465116279066], [101.0, 54.3469387755102], [102.0, 60.75], [103.0, 59.199999999999996], [104.0, 64.34693877551021], [105.0, 67.5227272727273], [106.0, 64.75], [107.0, 60.29268292682925], [108.0, 141.5], [109.0, 43.609756097560975], [110.0, 43.25490196078432], [111.0, 47.55555555555555], [112.0, 46.288888888888884], [113.0, 55.04651162790697], [114.0, 53.0], [115.0, 58.17021276595744], [116.0, 55.37499999999999], [117.0, 64.8703703703704], [118.0, 59.389830508474574], [119.0, 58.94444444444445], [120.0, 59.16190476190476], [121.0, 51.285714285714285], [122.0, 49.83333333333332], [123.0, 35.0], [124.0, 35.170731707317074], [125.0, 42.47999999999999], [126.0, 40.574468085106396], [127.0, 40.22448979591837], [128.0, 29.880000000000006], [129.0, 33.43181818181819], [130.0, 39.95238095238094], [131.0, 43.50980392156862], [132.0, 48.67999999999999], [133.0, 49.04761904761906], [134.0, 51.5813953488372], [135.0, 49.08163265306122], [136.0, 55.54166666666666], [137.0, 69.34693877551021], [138.0, 65.98000000000002], [139.0, 68.07843137254905], [140.0, 63.142857142857125], [141.0, 80.17647058823528], [142.0, 39.24137931034482], [143.0, 45.31111111111112], [144.0, 42.615384615384606], [145.0, 34.21875], [146.0, 18.930232558139533], [147.0, 22.574468085106382], [148.0, 32.42857142857143], [149.0, 33.01754385964912], [150.0, 52.76744186046512], [151.0, 49.11214953271027], [152.0, 52.0], [153.0, 46.51162790697674], [154.0, 48.8076923076923], [155.0, 62.93670886075948], [156.0, 144.0], [157.0, 17.61224489795918], [158.0, 20.392857142857142], [159.0, 18.676923076923078], [160.0, 8.446808510638299], [161.0, 13.947368421052632], [162.0, 7.5925925925925934], [163.0, 4.266666666666666], [164.0, 11.145454545454545], [165.0, 17.41818181818182], [166.0, 16.425925925925927], [167.0, 23.379310344827594], [168.0, 28.338983050847457], [169.0, 31.890624999999996], [170.0, 36.094339622641506], [171.0, 42.16363636363638], [172.0, 42.508771929824555], [173.0, 38.90625], [174.0, 28.499999999999996], [175.0, 28.108695652173914], [176.0, 37.698113207547166], [177.0, 41.48979591836736], [178.0, 45.88333333333332], [179.0, 50.12307692307693], [180.0, 46.45454545454545], [181.0, 45.12499999999999], [182.0, 49.21666666666667], [183.0, 52.59701492537313], [184.0, 54.59999999999999], [185.0, 55.57971014492754], [186.0, 80.79411764705883], [187.0, 51.89230769230767], [188.0, 54.83076923076925], [189.0, 50.48387096774192], [190.0, 63.603174603174615], [191.0, 64.73972602739727], [192.0, 52.65], [193.0, 59.06779661016951], [194.0, 45.31818181818181], [195.0, 53.36507936507936], [196.0, 66.89090909090908], [197.0, 51.28070175438596], [198.0, 53.40384615384615], [199.0, 156.79032258064515], [200.0, 50.999999999999986], [201.0, 67.53488372093025], [202.0, 89.1296296296296], [203.0, 63.62337662337663], [204.0, 41.82539682539684], [205.0, 52.24528301886793], [206.0, 51.60344827586207], [207.0, 62.142857142857146], [208.0, 60.66129032258064], [209.0, 45.40909090909089], [210.0, 83.81176470588234], [211.0, 58.44578313253013], [212.0, 62.13636363636365], [213.0, 17.951612903225808], [214.0, 22.259259259259267], [215.0, 21.90163934426229], [216.0, 30.129032258064512], [217.0, 39.281249999999986], [218.0, 42.84337349397591], [219.0, 42.47142857142856], [220.0, 49.62264150943397], [221.0, 24.107692307692307], [222.0, 19.94915254237288], [223.0, 24.721311475409834], [224.0, 35.07692307692308], [225.0, 38.405797101449274], [226.0, 51.43939393939393], [227.0, 58.58139534883722], [228.0, 21.0], [229.0, 28.97368421052631], [230.0, 41.58536585365854], [231.0, 23.725000000000005], [232.0, 40.79310344827587], [233.0, 25.190476190476193], [234.0, 31.677966101694924], [235.0, 37.33333333333333], [236.0, 39.77941176470588], [237.0, 40.48333333333334], [238.0, 45.23333333333334], [239.0, 49.80597014925372], [240.0, 49.71250000000001], [241.0, 50.5625], [242.0, 55.016129032258064], [243.0, 55.516129032258064], [244.0, 50.5], [245.0, 58.07272727272727], [246.0, 47.81521739130435], [247.0, 33.95454545454546], [248.0, 26.8046875], [249.0, 19.0], [250.0, 30.61842105263158], [251.0, 36.65000000000002], [252.0, 39.919354838709666], [253.0, 30.27999999999999], [254.0, 34.38888888888889], [257.0, 32.37209302325581], [256.0, 40.27659574468087], [258.0, 21.43478260869566], [259.0, 16.13333333333333], [260.0, 25.192307692307686], [261.0, 24.894736842105267], [262.0, 31.890624999999993], [263.0, 40.21052631578947], [264.0, 57.01449275362318], [271.0, 8.283333333333333], [268.0, 51.608333333333334], [269.0, 71.10000000000001], [270.0, 26.72727272727273], [265.0, 58.30508474576273], [266.0, 48.70833333333331], [267.0, 49.342857142857135], [273.0, 20.74285714285714], [272.0, 14.222222222222221], [274.0, 22.66071428571428], [275.0, 25.304347826086957], [276.0, 28.30434782608696], [277.0, 39.71428571428571], [278.0, 29.693877551020407], [279.0, 25.976744186046513], [280.0, 29.816326530612237], [286.0, 31.28571428571429], [287.0, 33.14953271028035], [284.0, 27.623376623376622], [285.0, 27.05797101449276], [281.0, 27.564102564102562], [282.0, 27.836363636363636], [283.0, 30.072463768115934], [289.0, 37.695652173913054], [288.0, 37.51351351351351], [290.0, 41.71641791044776], [291.0, 44.02702702702703], [292.0, 44.178082191780796], [293.0, 36.352941176470594], [294.0, 19.530303030303028], [295.0, 18.955882352941178], [296.0, 25.41891891891892], [302.0, 49.48863636363635], [303.0, 68.17441860465114], [300.0, 36.33962264150943], [301.0, 47.01369863013699], [297.0, 36.75714285714285], [298.0, 37.954248366013054], [299.0, 50.5], [305.0, 24.59210526315789], [304.0, 34.44642857142856], [306.0, 26.999999999999993], [307.0, 27.352941176470587], [308.0, 30.3768115942029], [309.0, 15.51388888888889], [310.0, 20.764705882352946], [311.0, 22.01492537313433], [312.0, 15.93243243243243], [318.0, 34.51249999999999], [319.0, 18.876543209876544], [316.0, 41.14705882352941], [317.0, 39.945205479452085], [313.0, 23.500000000000014], [314.0, 28.592105263157894], [315.0, 34.098591549295776], [321.0, 19.319444444444446], [320.0, 15.805555555555554], [322.0, 23.9578947368421], [323.0, 30.688524590163937], [324.0, 32.65934065934067], [325.0, 31.04054054054054], [326.0, 36.32467532467532], [327.0, 53.61194029850746], [328.0, 44.72448979591836], [334.0, 20.000000000000004], [335.0, 20.519480519480513], [332.0, 49.25806451612905], [333.0, 16.53086419753086], [329.0, 41.02597402597404], [330.0, 46.316455696202524], [331.0, 41.33057851239671], [337.0, 28.866666666666674], [336.0, 26.115789473684206], [338.0, 35.19480519480521], [339.0, 34.351351351351354], [340.0, 31.074074074074087], [341.0, 25.440476190476183], [342.0, 25.609756097560982], [343.0, 25.275], [344.0, 19.4], [350.0, 40.384615384615394], [351.0, 40.18571428571427], [348.0, 33.13953488372093], [349.0, 31.0], [345.0, 21.086419753086425], [346.0, 21.01639344262295], [347.0, 30.18181818181818], [353.0, 26.971830985915503], [352.0, 46.47945205479451], [354.0, 30.041095890410958], [355.0, 33.89873417721518], [356.0, 31.53333333333333], [357.0, 34.15], [358.0, 33.64429530201343], [359.0, 35.84285714285715], [360.0, 38.123893805309734], [366.0, 28.962962962962973], [367.0, 29.558441558441565], [364.0, 27.456790123456784], [365.0, 23.77142857142857], [361.0, 43.83783783783784], [362.0, 27.0], [363.0, 17.132352941176467], [369.0, 21.819148936170212], [368.0, 34.24074074074073], [370.0, 26.901960784313726], [371.0, 26.333333333333336], [372.0, 19.42168674698794], [373.0, 17.022727272727273], [374.0, 19.88], [375.0, 24.45901639344261], [376.0, 28.80645161290322], [382.0, 13.181818181818182], [383.0, 15.227848101265828], [380.0, 14.988505747126439], [381.0, 6.379310344827588], [377.0, 29.821917808219172], [379.0, 30.55555555555555], [378.0, 49.19607843137258], [385.0, 17.370967741935488], [384.0, 17.881355932203395], [386.0, 15.85714285714286], [387.0, 15.314606741573034], [388.0, 16.09090909090909], [389.0, 19.232558139534884], [390.0, 24.11578947368421], [391.0, 25.866666666666667], [392.0, 33.244680851063826], [398.0, 21.411764705882348], [399.0, 24.93], [396.0, 19.91666666666667], [397.0, 19.528925619834713], [393.0, 23.66346153846154], [394.0, 22.6036036036036], [395.0, 16.456790123456784], [401.0, 32.32352941176471], [400.0, 28.52475247524753], [402.0, 30.510204081632644], [403.0, 24.65873015873016], [404.0, 24.73529411764706], [405.0, 19.15652173913044], [406.0, 17.686567164179106], [407.0, 21.13978494623656], [408.0, 22.075471698113205], [414.0, 20.47008547008547], [415.0, 19.337209302325583], [412.0, 29.833333333333343], [413.0, 34.881720430107535], [409.0, 20.4025974025974], [410.0, 24.908045977011493], [411.0, 28.8235294117647], [417.0, 25.949494949494948], [416.0, 23.32291666666666], [418.0, 27.58762886597938], [419.0, 28.016949152542377], [420.0, 32.664383561643824], [421.0, 33.61194029850748], [422.0, 29.465346534653467], [423.0, 31.639175257731953], [424.0, 31.29032258064516], [430.0, 15.872340425531917], [431.0, 17.389473684210543], [428.0, 22.618181818181817], [429.0, 19.17171717171717], [425.0, 27.47107438016528], [426.0, 9.771084337349404], [427.0, 17.37692307692308], [433.0, 18.408450704225356], [432.0, 27.02830188679245], [434.0, 5.118421052631579], [435.0, 10.090909090909092], [436.0, 11.829787234042554], [437.0, 35.60000000000001], [438.0, 9.402298850574713], [439.0, 14.80952380952381], [440.0, 18.24175824175824], [446.0, 16.984126984126974], [447.0, 17.974358974358967], [444.0, 21.153061224489804], [445.0, 21.37089201877935], [441.0, 19.267326732673265], [442.0, 16.406250000000004], [443.0, 19.61538461538461], [449.0, 22.749999999999996], [448.0, 22.009523809523813], [450.0, 20.785714285714278], [451.0, 17.077586206896544], [452.0, 18.288135593220343], [453.0, 20.185567010309274], [454.0, 23.503816793893144], [455.0, 28.94505494505495], [456.0, 29.43939393939393], [462.0, 18.979166666666668], [463.0, 24.128712871287128], [460.0, 21.871794871794865], [461.0, 11.824175824175828], [457.0, 28.606741573033705], [458.0, 28.069306930693074], [459.0, 28.0], [465.0, 20.94444444444445], [464.0, 34.19402985074626], [466.0, 13.926315789473684], [467.0, 15.40566037735849], [468.0, 21.020618556701038], [469.0, 18.666666666666675], [470.0, 17.53398058252428], [471.0, 17.050000000000008], [472.0, 19.4757281553398], [478.0, 20.892473118279568], [479.0, 22.792792792792795], [476.0, 36.7191011235955], [477.0, 40.238095238095234], [473.0, 26.499999999999996], [474.0, 29.24122807017543], [475.0, 51.153846153846146], [481.0, 27.82857142857143], [480.0, 22.801724137931025], [482.0, 32.37931034482758], [483.0, 38.31958762886598], [484.0, 34.39041095890411], [485.0, 39.074468085106375], [486.0, 34.575757575757564], [487.0, 42.47899159663866], [488.0, 32.8936170212766], [494.0, 45.37500000000001], [495.0, 44.883495145631066], [492.0, 40.19718309859155], [493.0, 42.08571428571427], [489.0, 50.51456310679611], [490.0, 52.784615384615385], [491.0, 47.484848484848484], [497.0, 55.563218390804586], [496.0, 58.45528455284555], [498.0, 64.45348837209303], [499.0, 41.04020100502514], [500.0, 53.395348837209305], [501.0, 68.51515151515152], [502.0, 47.111111111111086], [503.0, 58.37113402061857], [504.0, 99.17391304347821], [510.0, 96.97029702970296], [511.0, 72.44531250000004], [508.0, 43.99056603773585], [509.0, 98.20833333333334], [505.0, 145.07843137254898], [506.0, 73.93333333333332], [507.0, 122.1285714285714], [515.0, 29.168141592920353], [512.0, 76.75390624999996], [526.0, 71.62499999999997], [527.0, 79.26506024096385], [524.0, 69.43137254901961], [525.0, 83.8095238095238], [522.0, 62.95789473684214], [523.0, 41.44444444444444], [513.0, 294.125], [514.0, 100.98780487804878], [516.0, 39.2340425531915], [517.0, 74.05000000000001], [518.0, 87.93975903614461], [519.0, 37.83505154639174], [528.0, 67.09890109890108], [542.0, 139.6971830985915], [543.0, 108.70689655172414], [540.0, 109.20370370370372], [541.0, 84.50999999999998], [538.0, 86.95145631067965], [539.0, 74.23636363636363], [536.0, 69.45081967213116], [537.0, 77.23880597014926], [529.0, 67.9090909090909], [530.0, 70.04123711340206], [531.0, 54.92523364485983], [532.0, 71.69444444444439], [533.0, 77.79816513761469], [534.0, 74.14457831325302], [535.0, 70.13461538461537], [520.0, 44.552845528455286], [521.0, 44.81343283582092], [547.0, 93.25], [544.0, 456.57142857142856], [558.0, 112.64], [559.0, 156.32051282051285], [556.0, 123.24752475247524], [557.0, 124.96491228070181], [554.0, 111.19999999999997], [555.0, 72.04724409448818], [545.0, 163.5847457627119], [546.0, 127.0114942528736], [548.0, 98.05844155844159], [549.0, 89.2394366197183], [550.0, 101.46534653465348], [551.0, 88.76168224299066], [560.0, 138.46296296296293], [575.0, 92.34745762711862], [573.0, 102.73584905660374], [574.0, 95.22522522522524], [571.0, 261.5973154362417], [570.0, 255.33333333333337], [572.0, 111.05747126436782], [568.0, 83.98765432098763], [569.0, 92.51748251748253], [561.0, 89.18691588785047], [562.0, 184.8571428571429], [563.0, 61.943396226415096], [564.0, 32.810810810810814], [565.0, 148.79508196721306], [566.0, 118.73170731707312], [567.0, 72.41509433962263], [552.0, 103.13114754098363], [553.0, 62.02272727272727], [579.0, 66.48412698412697], [576.0, 85.31578947368419], [590.0, 139.57831325301206], [591.0, 126.1372549019607], [588.0, 258.5000000000001], [589.0, 156.53703703703698], [586.0, 210.14084507042259], [587.0, 170.50322580645178], [577.0, 86.92307692307695], [578.0, 78.1382113821138], [580.0, 188.25555555555556], [581.0, 159.19008264462812], [582.0, 187.78125], [583.0, 137.9292929292929], [592.0, 145.673076923077], [606.0, 70.30769230769229], [607.0, 62.45945945945945], [604.0, 62.425149700598844], [605.0, 49.511627906976756], [602.0, 53.37623762376237], [603.0, 61.637168141592944], [600.0, 41.359550561797725], [601.0, 52.126213592233015], [593.0, 108.01149425287353], [594.0, 92.7209302325582], [595.0, 276.0421052631577], [596.0, 129.44791666666666], [597.0, 98.17460317460315], [598.0, 481.62666666666667], [599.0, 37.69672131147541], [584.0, 124.09090909090911], [585.0, 125.28571428571428], [614.0, 84.5714285714286], [610.0, 64.63716814159291], [609.0, 69.90109890109888], [608.0, 5.2], [622.0, 72.48809523809524], [623.0, 66.66363636363637], [620.0, 56.76315789473686], [621.0, 50.91608391608391], [618.0, 52.00000000000003], [619.0, 52.41401273885351], [611.0, 102.9285714285714], [612.0, 101.78787878787871], [613.0, 47.78504672897197], [615.0, 47.827956989247326], [632.0, 69.35483870967744], [633.0, 91.89051094890512], [634.0, 116.38260869565217], [635.0, 118.47572815533982], [636.0, 73.87962962962962], [637.0, 63.40740740740739], [638.0, 103.41549295774652], [639.0, 72.99999999999999], [624.0, 71.62745098039217], [625.0, 245.42056074766361], [626.0, 52.314516129032256], [627.0, 59.03125000000001], [628.0, 72.2673267326733], [629.0, 78.32089552238806], [630.0, 90.51063829787235], [631.0, 83.60000000000001], [616.0, 42.558558558558566], [617.0, 76.77669902912619], [643.0, 55.528301886792434], [640.0, 65.30769230769229], [654.0, 50.56603773584906], [655.0, 51.982905982905976], [652.0, 47.436619718309856], [653.0, 42.60000000000001], [650.0, 125.45000000000002], [651.0, 103.68181818181819], [641.0, 44.65137614678897], [642.0, 64.22222222222221], [644.0, 46.716049382716065], [645.0, 57.65000000000003], [646.0, 65.3333333333333], [647.0, 47.81333333333332], [656.0, 47.34210526315788], [670.0, 67.58260869565217], [671.0, 85.06060606060608], [668.0, 79.09230769230767], [669.0, 56.99999999999998], [666.0, 73.44859813084115], [667.0, 77.17272727272724], [664.0, 58.87790697674418], [665.0, 46.10526315789474], [657.0, 56.62616822429908], [658.0, 62.99019607843134], [659.0, 56.574074074074076], [660.0, 57.54285714285713], [661.0, 62.190476190476204], [662.0, 46.74803149606299], [663.0, 75.81481481481487], [648.0, 70.72774869109944], [649.0, 361.1190476190475], [675.0, 75.75555555555557], [672.0, 71.12745098039214], [686.0, 23.267175572519072], [687.0, 20.829059829059833], [684.0, 24.367187499999996], [685.0, 26.999999999999996], [682.0, 32.68571428571429], [683.0, 28.8768115942029], [673.0, 86.63725490196074], [674.0, 49.58407079646018], [676.0, 69.85416666666666], [677.0, 64.93617021276599], [678.0, 62.95121951219511], [679.0, 95.3125], [688.0, 20.389999999999997], [700.0, 29.673063131454498], [698.0, 34.7809523809524], [699.0, 35.58928571428574], [696.0, 28.294736842105262], [697.0, 29.384615384615387], [689.0, 24.57142857142857], [690.0, 25.481927710843372], [691.0, 27.243478260869562], [692.0, 21.873786407767003], [693.0, 15.410526315789475], [694.0, 20.523364485981308], [695.0, 25.52777777777777], [680.0, 45.44444444444446], [681.0, 25.787234042553187]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[691.4007128119267, 30.372452750501743]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 700.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 59911.2, "minX": 1.74313782E12, "maxY": 993860.9333333333, "series": [{"data": [[1.743138E12, 832842.4], [1.74313818E12, 940167.0], [1.74313788E12, 724169.7333333333], [1.74313806E12, 875936.7333333333], [1.74313836E12, 993860.9333333333], [1.74313842E12, 658391.8666666667], [1.74313794E12, 788073.9333333333], [1.74313824E12, 985446.4666666667], [1.7431383E12, 984672.6666666666], [1.74313782E12, 161982.13333333333], [1.74313812E12, 904158.5333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.743138E12, 308037.6], [1.74313818E12, 347733.0], [1.74313788E12, 267843.6], [1.74313806E12, 323976.6], [1.74313836E12, 367592.4], [1.74313842E12, 243514.8], [1.74313794E12, 291479.4], [1.74313824E12, 364480.2], [1.7431383E12, 364194.0], [1.74313782E12, 59911.2], [1.74313812E12, 334414.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74313842E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 24.44963430112305, "minX": 1.74313782E12, "maxY": 50.24614588513611, "series": [{"data": [[1.743138E12, 28.292733094921292], [1.74313818E12, 27.404819214742552], [1.74313788E12, 50.24614588513611], [1.74313806E12, 27.9548411829742], [1.74313836E12, 28.15348304263099], [1.74313842E12, 25.124757920257803], [1.74313794E12, 34.95182575509642], [1.74313824E12, 24.44963430112305], [1.7431383E12, 29.36729105916061], [1.74313782E12, 34.315947602451274], [1.74313812E12, 30.911075107919757]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74313842E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 23.824988024040763, "minX": 1.74313782E12, "maxY": 47.17898952971098, "series": [{"data": [[1.743138E12, 26.059369375686554], [1.74313818E12, 25.207619639206193], [1.74313788E12, 47.17898952971098], [1.74313806E12, 25.38312767033136], [1.74313836E12, 26.156460253259], [1.74313842E12, 24.442603077923792], [1.74313794E12, 33.148931965689414], [1.74313824E12, 23.824988024040763], [1.7431383E12, 25.7187960262937], [1.74313782E12, 33.867053238793346], [1.74313812E12, 29.314081793030816]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74313842E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 17.09419770950486, "minX": 1.74313782E12, "maxY": 41.10417198693613, "series": [{"data": [[1.743138E12, 20.35112661571228], [1.74313818E12, 18.61145016435006], [1.74313788E12, 41.10417198693613], [1.74313806E12, 19.226005211487468], [1.74313836E12, 18.603223026373943], [1.74313842E12, 17.261446121549906], [1.74313794E12, 27.747963663984688], [1.74313824E12, 17.09419770950486], [1.7431383E12, 18.449448920081075], [1.74313782E12, 27.401784641268893], [1.74313812E12, 21.93452682118142]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74313842E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74313782E12, "maxY": 4746.0, "series": [{"data": [[1.743138E12, 2099.0], [1.74313818E12, 897.0], [1.74313788E12, 4746.0], [1.74313806E12, 1046.0], [1.74313836E12, 1623.0], [1.74313842E12, 851.0], [1.74313794E12, 2396.0], [1.74313824E12, 638.0], [1.7431383E12, 1353.0], [1.74313782E12, 870.0], [1.74313812E12, 1612.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.743138E12, 0.0], [1.74313818E12, 0.0], [1.74313788E12, 0.0], [1.74313806E12, 0.0], [1.74313836E12, 0.0], [1.74313842E12, 0.0], [1.74313794E12, 0.0], [1.74313824E12, 0.0], [1.7431383E12, 0.0], [1.74313782E12, 1.0], [1.74313812E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.743138E12, 41.0], [1.74313818E12, 44.0], [1.74313788E12, 36.0], [1.74313806E12, 47.0], [1.74313836E12, 44.0], [1.74313842E12, 53.0], [1.74313794E12, 37.0], [1.74313824E12, 34.0], [1.7431383E12, 61.900000000001455], [1.74313782E12, 38.0], [1.74313812E12, 47.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.743138E12, 745.0], [1.74313818E12, 89.0], [1.74313788E12, 203.9700000000048], [1.74313806E12, 424.0], [1.74313836E12, 77.0], [1.74313842E12, 95.9900000000016], [1.74313794E12, 366.9900000000016], [1.74313824E12, 61.0], [1.7431383E12, 597.0], [1.74313782E12, 158.9900000000016], [1.74313812E12, 93.9900000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.743138E12, 23.0], [1.74313818E12, 23.0], [1.74313788E12, 21.0], [1.74313806E12, 27.0], [1.74313836E12, 23.0], [1.74313842E12, 25.0], [1.74313794E12, 21.0], [1.74313824E12, 18.0], [1.7431383E12, 31.0], [1.74313782E12, 23.0], [1.74313812E12, 26.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.743138E12, 57.0], [1.74313818E12, 52.0], [1.74313788E12, 44.0], [1.74313806E12, 58.0], [1.74313836E12, 52.0], [1.74313842E12, 62.0], [1.74313794E12, 46.0], [1.74313824E12, 42.0], [1.7431383E12, 80.0], [1.74313782E12, 48.0], [1.74313812E12, 55.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74313842E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 416.0, "maxY": 56.0, "series": [{"data": [[416.0, 4.0], [700.0, 21.0], [987.0, 34.0], [1076.0, 38.0], [1141.0, 48.0], [1155.0, 56.0], [1160.0, 40.0], [1246.0, 23.0], [1393.0, 39.0], [1468.0, 39.0], [1423.0, 30.0], [1564.0, 32.0], [1551.0, 28.0], [1660.0, 29.0], [1763.0, 25.0], [1805.0, 25.0], [1869.0, 24.0], [2148.0, 19.0], [2364.0, 33.0], [2414.0, 24.5], [2336.0, 22.0], [2310.0, 24.0], [2400.0, 26.0], [2410.0, 26.0], [2546.0, 24.0], [2450.0, 24.0], [2458.0, 22.0], [2534.0, 29.0], [2520.0, 20.0], [2516.0, 27.0], [2496.0, 25.0], [2550.0, 17.0], [2532.0, 31.0], [2528.0, 29.0], [2490.0, 20.0], [2488.0, 20.0], [2444.0, 30.0], [2434.0, 26.0], [2452.0, 23.0], [2634.0, 20.0], [2560.0, 23.0], [2620.0, 25.0], [2566.0, 26.0], [2644.0, 26.0], [2648.0, 22.0], [2654.0, 27.0], [2636.0, 22.0], [2628.0, 28.0], [2626.0, 22.0], [2578.0, 22.0], [2584.0, 17.0], [2598.0, 28.0], [2612.0, 20.0], [2596.0, 29.0], [2592.0, 17.0], [2798.0, 29.0], [2706.0, 19.0], [2724.0, 24.0], [2742.0, 18.0], [2810.0, 22.0], [2754.0, 25.0], [2782.0, 23.0], [2762.0, 28.5], [2802.0, 19.0], [2808.0, 21.0], [2746.0, 21.0], [2692.0, 26.0], [2700.0, 36.0], [2786.0, 18.0], [2718.0, 21.0], [2784.0, 20.0], [2708.0, 23.0], [2710.0, 17.0], [2712.0, 19.0], [2914.0, 33.0], [2820.0, 25.0], [2874.0, 22.0], [2876.0, 23.0], [2818.0, 21.0], [2932.0, 25.0], [2928.0, 27.0], [2934.0, 30.0], [2936.0, 15.0], [2940.0, 27.0], [2906.0, 33.0], [2884.0, 26.0], [2896.0, 26.0], [2882.0, 23.0], [2832.0, 26.0], [2852.0, 25.0], [2856.0, 26.0], [2864.0, 23.0], [2846.0, 20.0], [2836.0, 21.0], [2912.0, 20.0], [2918.0, 17.0], [2920.0, 31.0], [2916.0, 30.0], [2926.0, 28.0], [2924.0, 23.0], [3044.0, 22.0], [2966.0, 19.0], [2944.0, 17.0], [2946.0, 21.0], [3006.0, 20.0], [3004.0, 24.0], [3000.0, 26.0], [3002.0, 24.0], [2982.0, 25.0], [2976.0, 19.0], [2978.0, 18.0], [2986.0, 19.0], [2994.0, 29.0], [3030.0, 22.0], [3038.0, 20.0], [3054.0, 19.0], [3040.0, 29.0], [3046.0, 20.0], [3048.0, 25.0], [3052.0, 23.0], [3060.0, 39.0], [3070.0, 20.0], [3064.0, 29.0], [3066.0, 30.0], [3026.0, 24.0], [3012.0, 26.0], [3018.0, 31.0], [3014.0, 24.0], [3024.0, 29.0], [2960.0, 17.0], [2952.0, 18.0], [2950.0, 23.0], [3194.0, 30.0], [3102.0, 27.0], [3118.0, 19.0], [3120.0, 25.0], [3112.0, 24.0], [3108.0, 29.0], [3162.0, 24.0], [3164.0, 31.0], [3152.0, 23.0], [3148.0, 26.0], [3186.0, 30.0], [3190.0, 26.0], [3184.0, 25.0], [3074.0, 25.0], [3082.0, 36.0], [3086.0, 22.0], [3094.0, 19.0], [3122.0, 30.0], [3130.0, 26.0], [3128.0, 18.0], [3168.0, 22.0], [3170.0, 24.0], [3314.0, 22.0], [3208.0, 18.0], [3286.0, 17.0], [3282.0, 23.0], [3280.0, 16.0], [3274.0, 37.0], [3270.0, 20.0], [3268.0, 29.0], [3266.0, 20.0], [3292.0, 28.0], [3294.0, 38.0], [3290.0, 20.0], [3320.0, 20.0], [3318.0, 28.0], [3264.0, 21.0], [3326.0, 17.0], [3322.0, 24.0], [3250.0, 30.0], [3238.0, 23.0], [3232.0, 23.0], [3236.0, 24.0], [3240.0, 26.0], [3244.0, 24.0], [3248.0, 15.0], [3296.0, 25.0], [3230.0, 22.0], [3302.0, 22.0], [3300.0, 21.0], [3304.0, 22.0], [3306.0, 35.0], [3312.0, 21.0], [3210.0, 22.0], [3222.0, 23.0], [3214.0, 24.0], [3200.0, 36.0], [3204.0, 22.0], [3202.0, 25.0], [3256.0, 26.0], [3262.0, 19.0], [3254.0, 19.0], [3438.0, 24.0], [3362.0, 24.0], [3360.0, 19.0], [3366.0, 29.0], [3410.0, 20.0], [3414.0, 25.0], [3408.0, 29.0], [3404.0, 17.0], [3356.0, 20.0], [3432.0, 17.0], [3436.0, 19.0], [3428.0, 18.0], [3452.0, 21.0], [3446.0, 19.0], [3444.0, 16.0], [3448.0, 20.0], [3440.0, 21.0], [3442.0, 25.0], [3398.0, 23.0], [3394.0, 21.0], [3454.0, 23.0], [3374.0, 21.0], [3376.0, 27.0], [3382.0, 25.0], [3372.0, 21.0], [3386.0, 24.0], [3330.0, 16.0], [3350.0, 21.0], [3354.0, 27.0], [3348.0, 22.0], [3332.0, 35.0], [3328.0, 19.0], [3418.0, 15.0], [3422.0, 24.0], [3420.0, 19.0], [3464.0, 19.0], [3480.0, 18.0], [3468.0, 17.0], [3466.0, 18.0], [3578.0, 22.0], [3562.0, 19.0], [3526.0, 18.0], [3520.0, 19.0], [3532.0, 26.0], [3528.0, 22.0], [3538.0, 20.0], [3546.0, 17.0], [3534.0, 17.0], [3510.0, 27.0], [3458.0, 22.0], [3456.0, 31.0], [3516.0, 21.0], [3514.0, 25.0], [3500.0, 15.0], [3496.0, 16.0], [3490.0, 41.0], [3506.0, 21.0], [3508.0, 28.0], [3470.0, 17.0], [3472.0, 19.0], [3476.0, 19.0], [3694.0, 27.0], [3746.0, 19.0], [3716.0, 16.0], [2171.0, 17.0], [2295.0, 21.0], [2267.0, 22.0], [2279.0, 37.0], [2411.0, 46.0], [2349.0, 43.0], [2371.0, 29.0], [2383.0, 33.0], [2379.0, 27.0], [2405.0, 38.0], [2389.0, 23.0], [2535.0, 20.0], [2453.0, 22.0], [2455.0, 25.0], [2463.0, 23.0], [2547.0, 22.0], [2525.0, 27.0], [2501.0, 21.0], [2511.0, 21.0], [2529.0, 22.0], [2437.0, 26.0], [2433.0, 28.0], [2489.0, 24.0], [2439.0, 17.0], [2447.0, 26.0], [2451.0, 19.0], [2581.0, 19.0], [2575.0, 22.0], [2609.0, 33.0], [2567.0, 24.0], [2643.0, 25.0], [2629.0, 26.0], [2627.0, 24.0], [2579.0, 21.0], [2661.0, 31.0], [2679.0, 19.0], [2681.0, 19.0], [2587.0, 20.0], [2687.0, 20.0], [2619.0, 26.0], [2613.0, 29.0], [2611.0, 18.0], [2571.0, 28.0], [2597.0, 21.0], [2801.0, 24.0], [2793.0, 22.0], [2743.0, 25.0], [2723.0, 23.0], [2739.0, 25.0], [2729.0, 19.0], [2809.0, 20.0], [2813.0, 21.0], [2753.0, 23.0], [2805.0, 29.0], [2807.0, 25.0], [2749.0, 23.0], [2695.0, 24.0], [2697.0, 23.0], [2705.0, 25.0], [2689.0, 22.0], [2789.0, 23.0], [2933.0, 29.0], [2835.0, 25.0], [2871.0, 35.0], [2869.0, 26.0], [2867.0, 24.0], [2939.0, 20.0], [2881.0, 22.0], [2941.0, 20.0], [2943.0, 23.0], [2899.0, 21.0], [2927.0, 18.0], [2823.0, 21.0], [2825.0, 27.0], [2861.0, 20.0], [2851.0, 26.0], [2839.0, 19.0], [2921.0, 23.0], [2919.0, 22.0], [2917.0, 22.0], [3057.0, 20.0], [2945.0, 32.0], [2949.0, 22.0], [3007.0, 22.0], [2995.0, 19.0], [2981.0, 22.0], [2987.0, 20.0], [2989.0, 21.0], [3031.0, 22.0], [3033.0, 27.0], [3029.0, 20.0], [3043.0, 23.0], [2967.0, 26.0], [3055.0, 31.0], [3059.0, 18.0], [3061.0, 22.0], [3067.0, 24.0], [3071.0, 25.0], [3019.0, 21.0], [3013.0, 42.0], [3009.0, 31.0], [2963.0, 25.0], [3185.0, 24.0], [3073.0, 16.0], [3173.0, 20.0], [3109.0, 23.0], [3147.0, 21.0], [3161.0, 26.0], [3157.0, 21.0], [3167.0, 29.0], [3163.0, 25.0], [3155.0, 24.0], [3141.0, 24.0], [3139.0, 25.0], [3193.0, 23.0], [3199.0, 18.0], [3191.0, 24.0], [3181.0, 27.0], [3183.0, 28.0], [3079.0, 23.0], [3081.0, 22.0], [3087.0, 26.0], [3095.0, 30.0], [3097.0, 31.0], [3131.0, 23.0], [3127.0, 22.0], [3123.0, 23.0], [3125.0, 18.0], [3169.0, 29.0], [3223.0, 22.0], [3315.0, 21.0], [3265.0, 23.0], [3285.0, 24.0], [3275.0, 34.0], [3295.0, 20.0], [3291.0, 29.0], [3287.0, 23.0], [3317.0, 40.0], [3313.0, 27.0], [3325.0, 22.0], [3321.0, 17.0], [3239.0, 27.0], [3235.0, 28.0], [3247.0, 21.0], [3249.0, 26.0], [3227.0, 21.0], [3299.0, 27.0], [3301.0, 17.0], [3307.0, 19.0], [3305.0, 25.0], [3213.0, 25.0], [3209.0, 39.0], [3215.0, 19.0], [3221.0, 20.0], [3217.0, 20.0], [3309.0, 27.0], [3261.0, 35.0], [3263.0, 26.0], [3253.0, 23.0], [3255.0, 21.0], [3259.0, 18.0], [3355.0, 21.0], [3343.0, 27.0], [3339.0, 32.0], [3453.0, 16.0], [3451.0, 19.0], [3395.0, 20.0], [3397.0, 19.0], [3345.0, 18.0], [3349.0, 22.0], [3445.0, 22.0], [3431.0, 20.0], [3357.0, 19.0], [3435.0, 22.0], [3399.0, 26.0], [3363.0, 27.0], [3367.0, 26.0], [3365.0, 23.0], [3369.0, 27.0], [3371.0, 24.0], [3373.0, 21.0], [3375.0, 22.0], [3387.0, 16.0], [3379.0, 25.0], [3389.0, 22.0], [3335.0, 16.0], [3391.0, 19.0], [3331.0, 24.0], [3421.0, 23.0], [3419.0, 20.0], [3401.0, 19.0], [3405.0, 19.0], [3409.0, 18.0], [3465.0, 17.0], [3503.0, 31.0], [3489.0, 16.0], [3495.0, 25.0], [3477.0, 19.0], [3547.0, 25.0], [3541.0, 31.0], [3539.0, 20.0], [3535.0, 21.0], [3527.0, 27.0], [3565.0, 22.0], [3473.0, 18.0], [3467.0, 18.0], [3469.0, 25.0], [3507.0, 21.0], [3513.0, 19.0], [3461.0, 23.0], [3593.0, 26.0], [3589.0, 21.0], [3671.0, 17.0], [3595.0, 27.0], [3605.0, 22.0], [3613.0, 16.0], [3599.0, 17.0], [3623.0, 21.0], [3683.0, 21.0], [3769.0, 20.0], [3723.0, 26.0], [3807.0, 21.0], [3747.0, 23.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3807.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 4.0, "minX": 416.0, "maxY": 55.0, "series": [{"data": [[416.0, 4.0], [700.0, 21.0], [987.0, 34.0], [1076.0, 38.0], [1141.0, 47.0], [1155.0, 55.0], [1160.0, 40.0], [1246.0, 23.0], [1393.0, 39.0], [1468.0, 39.0], [1423.0, 30.0], [1564.0, 32.0], [1551.0, 28.0], [1660.0, 29.0], [1763.0, 25.0], [1805.0, 25.0], [1869.0, 24.0], [2148.0, 19.0], [2364.0, 32.0], [2414.0, 24.0], [2336.0, 22.0], [2310.0, 24.0], [2400.0, 26.0], [2410.0, 25.0], [2546.0, 24.0], [2450.0, 23.0], [2458.0, 22.0], [2534.0, 29.0], [2520.0, 20.0], [2516.0, 26.0], [2496.0, 25.0], [2550.0, 17.0], [2532.0, 31.0], [2528.0, 29.0], [2490.0, 20.0], [2488.0, 20.0], [2444.0, 30.0], [2434.0, 26.0], [2452.0, 23.0], [2634.0, 20.0], [2560.0, 23.0], [2620.0, 24.0], [2566.0, 26.0], [2644.0, 26.0], [2648.0, 22.0], [2654.0, 26.0], [2636.0, 22.0], [2628.0, 28.0], [2626.0, 22.0], [2578.0, 22.0], [2584.0, 17.0], [2598.0, 28.0], [2612.0, 20.0], [2596.0, 29.0], [2592.0, 17.0], [2798.0, 29.0], [2706.0, 19.0], [2724.0, 23.0], [2742.0, 18.0], [2810.0, 22.0], [2754.0, 24.0], [2782.0, 23.0], [2762.0, 28.0], [2802.0, 19.0], [2808.0, 21.0], [2746.0, 21.0], [2692.0, 25.0], [2700.0, 36.0], [2786.0, 18.0], [2718.0, 21.0], [2784.0, 20.0], [2708.0, 23.0], [2710.0, 17.0], [2712.0, 18.0], [2914.0, 33.0], [2820.0, 24.0], [2874.0, 22.0], [2876.0, 23.0], [2818.0, 21.0], [2932.0, 25.0], [2928.0, 27.0], [2934.0, 30.0], [2936.0, 15.0], [2940.0, 27.0], [2906.0, 33.0], [2884.0, 26.0], [2896.0, 25.0], [2882.0, 23.0], [2832.0, 26.0], [2852.0, 25.0], [2856.0, 26.0], [2864.0, 23.0], [2846.0, 19.0], [2836.0, 20.0], [2912.0, 20.0], [2918.0, 16.0], [2920.0, 31.0], [2916.0, 29.0], [2926.0, 28.0], [2924.0, 23.0], [3044.0, 22.0], [2966.0, 19.0], [2944.0, 17.0], [2946.0, 21.0], [3006.0, 20.0], [3004.0, 24.0], [3000.0, 26.0], [3002.0, 23.0], [2982.0, 25.0], [2976.0, 19.0], [2978.0, 18.0], [2986.0, 19.0], [2994.0, 28.0], [3030.0, 22.0], [3038.0, 20.0], [3054.0, 18.0], [3040.0, 29.0], [3046.0, 20.0], [3048.0, 24.0], [3052.0, 23.0], [3060.0, 39.0], [3070.0, 20.0], [3064.0, 29.0], [3066.0, 30.0], [3026.0, 24.0], [3012.0, 25.0], [3018.0, 31.0], [3014.0, 24.0], [3024.0, 29.0], [2960.0, 17.0], [2952.0, 18.0], [2950.0, 23.0], [3194.0, 30.0], [3102.0, 27.0], [3118.0, 19.0], [3120.0, 25.0], [3112.0, 24.0], [3108.0, 29.0], [3162.0, 24.0], [3164.0, 30.0], [3152.0, 23.0], [3148.0, 25.0], [3186.0, 30.0], [3190.0, 26.0], [3184.0, 24.0], [3074.0, 25.0], [3082.0, 36.0], [3086.0, 22.0], [3094.0, 19.0], [3122.0, 29.0], [3130.0, 26.0], [3128.0, 17.0], [3168.0, 22.0], [3170.0, 24.0], [3314.0, 21.5], [3208.0, 18.0], [3286.0, 17.0], [3282.0, 23.0], [3280.0, 16.0], [3274.0, 36.0], [3270.0, 20.0], [3268.0, 29.0], [3266.0, 20.0], [3292.0, 27.0], [3294.0, 38.0], [3290.0, 20.0], [3320.0, 20.0], [3318.0, 28.0], [3264.0, 20.0], [3326.0, 17.0], [3322.0, 24.0], [3250.0, 30.0], [3238.0, 23.0], [3232.0, 23.0], [3236.0, 24.0], [3240.0, 26.0], [3244.0, 24.0], [3248.0, 15.0], [3296.0, 25.0], [3230.0, 22.0], [3302.0, 22.0], [3300.0, 21.0], [3304.0, 22.0], [3306.0, 35.0], [3312.0, 21.0], [3210.0, 22.0], [3222.0, 23.0], [3214.0, 23.0], [3200.0, 36.0], [3204.0, 22.0], [3202.0, 25.0], [3256.0, 26.0], [3262.0, 19.0], [3254.0, 19.0], [3438.0, 24.0], [3362.0, 23.0], [3360.0, 19.0], [3366.0, 29.0], [3410.0, 20.0], [3414.0, 25.0], [3408.0, 28.0], [3404.0, 17.0], [3356.0, 20.0], [3432.0, 17.0], [3436.0, 19.0], [3428.0, 18.0], [3452.0, 21.0], [3446.0, 19.0], [3444.0, 16.0], [3448.0, 19.5], [3440.0, 21.0], [3442.0, 25.0], [3398.0, 23.0], [3394.0, 21.0], [3454.0, 23.0], [3374.0, 21.0], [3376.0, 27.0], [3382.0, 25.0], [3372.0, 21.0], [3386.0, 24.0], [3330.0, 16.0], [3350.0, 20.0], [3354.0, 27.0], [3348.0, 21.0], [3332.0, 34.0], [3328.0, 19.0], [3418.0, 15.0], [3422.0, 24.0], [3420.0, 19.0], [3464.0, 19.0], [3480.0, 18.0], [3468.0, 17.0], [3466.0, 18.0], [3578.0, 22.0], [3562.0, 19.0], [3526.0, 18.0], [3520.0, 19.0], [3532.0, 26.0], [3528.0, 22.0], [3538.0, 20.0], [3546.0, 16.0], [3534.0, 17.0], [3510.0, 27.0], [3458.0, 22.0], [3456.0, 31.0], [3516.0, 21.0], [3514.0, 24.0], [3500.0, 15.0], [3496.0, 16.0], [3490.0, 41.0], [3506.0, 21.0], [3508.0, 28.0], [3470.0, 17.0], [3472.0, 19.0], [3476.0, 18.0], [3694.0, 27.0], [3746.0, 19.0], [3716.0, 16.0], [2171.0, 17.0], [2295.0, 21.0], [2267.0, 22.0], [2279.0, 37.0], [2411.0, 46.0], [2349.0, 42.0], [2371.0, 29.0], [2383.0, 32.0], [2379.0, 27.0], [2405.0, 38.0], [2389.0, 23.0], [2535.0, 20.0], [2453.0, 21.0], [2455.0, 24.0], [2463.0, 23.0], [2547.0, 22.0], [2525.0, 27.0], [2501.0, 21.0], [2511.0, 21.0], [2529.0, 22.0], [2437.0, 26.0], [2433.0, 27.0], [2489.0, 24.0], [2439.0, 16.0], [2447.0, 26.0], [2451.0, 19.0], [2581.0, 19.0], [2575.0, 22.0], [2609.0, 33.0], [2567.0, 24.0], [2643.0, 25.0], [2629.0, 26.0], [2627.0, 24.0], [2579.0, 21.0], [2661.0, 30.0], [2679.0, 19.0], [2681.0, 18.0], [2587.0, 20.0], [2687.0, 20.0], [2619.0, 26.0], [2613.0, 29.0], [2611.0, 18.0], [2571.0, 27.0], [2597.0, 20.0], [2801.0, 23.0], [2793.0, 22.0], [2743.0, 25.0], [2723.0, 23.0], [2739.0, 25.0], [2729.0, 19.0], [2809.0, 20.0], [2813.0, 20.0], [2753.0, 23.0], [2805.0, 29.0], [2807.0, 24.0], [2749.0, 23.0], [2695.0, 23.0], [2697.0, 23.0], [2705.0, 24.0], [2689.0, 22.0], [2789.0, 23.0], [2933.0, 28.0], [2835.0, 25.0], [2871.0, 35.0], [2869.0, 26.0], [2867.0, 24.0], [2939.0, 20.0], [2881.0, 21.0], [2941.0, 20.0], [2943.0, 23.0], [2899.0, 21.0], [2927.0, 18.0], [2823.0, 20.0], [2825.0, 26.0], [2861.0, 20.0], [2851.0, 25.0], [2839.0, 19.0], [2921.0, 23.0], [2919.0, 21.0], [2917.0, 21.0], [3057.0, 20.0], [2945.0, 31.0], [2949.0, 22.0], [3007.0, 21.0], [2995.0, 18.0], [2981.0, 22.0], [2987.0, 20.0], [2989.0, 21.0], [3031.0, 22.0], [3033.0, 27.0], [3029.0, 20.0], [3043.0, 23.0], [2967.0, 26.0], [3055.0, 30.0], [3059.0, 18.0], [3061.0, 22.0], [3067.0, 24.0], [3071.0, 25.0], [3019.0, 21.0], [3013.0, 41.0], [3009.0, 30.0], [2963.0, 25.0], [3185.0, 24.0], [3073.0, 16.0], [3173.0, 20.0], [3109.0, 23.0], [3147.0, 21.0], [3161.0, 26.0], [3157.0, 21.0], [3167.0, 28.0], [3163.0, 24.0], [3155.0, 24.0], [3141.0, 24.0], [3139.0, 25.0], [3193.0, 22.0], [3199.0, 18.0], [3191.0, 23.0], [3181.0, 27.0], [3183.0, 28.0], [3079.0, 23.0], [3081.0, 22.0], [3087.0, 26.0], [3095.0, 30.0], [3097.0, 31.0], [3131.0, 23.0], [3127.0, 22.0], [3123.0, 23.0], [3125.0, 18.0], [3169.0, 29.0], [3223.0, 22.0], [3315.0, 20.0], [3265.0, 23.0], [3285.0, 24.0], [3275.0, 33.0], [3295.0, 20.0], [3291.0, 29.0], [3287.0, 23.0], [3317.0, 39.0], [3313.0, 27.0], [3325.0, 22.0], [3321.0, 17.0], [3239.0, 27.0], [3235.0, 28.0], [3247.0, 21.0], [3249.0, 25.0], [3227.0, 21.0], [3299.0, 27.0], [3301.0, 17.0], [3307.0, 18.0], [3305.0, 25.0], [3213.0, 25.0], [3209.0, 39.0], [3215.0, 18.0], [3221.0, 20.0], [3217.0, 20.0], [3309.0, 27.0], [3261.0, 34.0], [3263.0, 26.0], [3253.0, 23.0], [3255.0, 21.0], [3259.0, 18.0], [3355.0, 21.0], [3343.0, 27.0], [3339.0, 32.0], [3453.0, 16.0], [3451.0, 19.0], [3395.0, 20.0], [3397.0, 18.0], [3345.0, 18.0], [3349.0, 22.0], [3445.0, 22.0], [3431.0, 20.0], [3357.0, 19.0], [3435.0, 22.0], [3399.0, 25.0], [3363.0, 27.0], [3367.0, 26.0], [3365.0, 23.0], [3369.0, 27.0], [3371.0, 24.0], [3373.0, 20.0], [3375.0, 22.0], [3387.0, 16.0], [3379.0, 25.0], [3389.0, 22.0], [3335.0, 16.0], [3391.0, 19.0], [3331.0, 24.0], [3421.0, 23.0], [3419.0, 20.0], [3401.0, 19.0], [3405.0, 19.0], [3409.0, 18.0], [3465.0, 16.0], [3503.0, 31.0], [3489.0, 16.0], [3495.0, 25.0], [3477.0, 19.0], [3547.0, 25.0], [3541.0, 31.0], [3539.0, 20.0], [3535.0, 20.0], [3527.0, 27.0], [3565.0, 22.0], [3473.0, 18.0], [3467.0, 18.0], [3469.0, 25.0], [3507.0, 20.0], [3513.0, 19.0], [3461.0, 22.0], [3593.0, 25.0], [3589.0, 21.0], [3671.0, 17.0], [3595.0, 26.0], [3605.0, 22.0], [3613.0, 16.0], [3599.0, 17.0], [3623.0, 20.0], [3683.0, 21.0], [3769.0, 20.0], [3723.0, 26.0], [3807.0, 21.0], [3747.0, 23.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3807.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 557.4333333333333, "minX": 1.74313782E12, "maxY": 3402.866666666667, "series": [{"data": [[1.743138E12, 2851.3166666666666], [1.74313818E12, 3220.0833333333335], [1.74313788E12, 2478.15], [1.74313806E12, 3000.3], [1.74313836E12, 3402.866666666667], [1.74313842E12, 2252.9666666666667], [1.74313794E12, 2700.133333333333], [1.74313824E12, 3374.0666666666666], [1.7431383E12, 3374.05], [1.74313782E12, 557.4333333333333], [1.74313812E12, 3095.8333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74313842E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 554.7333333333333, "minX": 1.74313782E12, "maxY": 3403.633333333333, "series": [{"data": [[1.743138E12, 2852.2], [1.74313818E12, 3219.75], [1.74313788E12, 2480.0333333333333], [1.74313806E12, 2999.7833333333333], [1.74313836E12, 3403.633333333333], [1.74313842E12, 2254.766666666667], [1.74313794E12, 2698.883333333333], [1.74313824E12, 3374.8166666666666], [1.7431383E12, 3372.1666666666665], [1.74313782E12, 554.7333333333333], [1.74313812E12, 3096.4333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74313842E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 554.7333333333333, "minX": 1.74313782E12, "maxY": 3403.633333333333, "series": [{"data": [[1.743138E12, 2852.2], [1.74313818E12, 3219.75], [1.74313788E12, 2480.0333333333333], [1.74313806E12, 2999.7833333333333], [1.74313836E12, 3403.633333333333], [1.74313842E12, 2254.766666666667], [1.74313794E12, 2698.883333333333], [1.74313824E12, 3374.8166666666666], [1.7431383E12, 3372.1666666666665], [1.74313782E12, 554.7333333333333], [1.74313812E12, 3096.4333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74313842E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 554.7333333333333, "minX": 1.74313782E12, "maxY": 3403.633333333333, "series": [{"data": [[1.743138E12, 2852.2], [1.74313818E12, 3219.75], [1.74313788E12, 2480.0333333333333], [1.74313806E12, 2999.7833333333333], [1.74313836E12, 3403.633333333333], [1.74313842E12, 2254.766666666667], [1.74313794E12, 2698.883333333333], [1.74313824E12, 3374.8166666666666], [1.7431383E12, 3372.1666666666665], [1.74313782E12, 554.7333333333333], [1.74313812E12, 3096.4333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74313842E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

