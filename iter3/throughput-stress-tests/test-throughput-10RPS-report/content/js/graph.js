/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 1616.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 2.0], [1.2, 2.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 3.0], [3.4, 3.0], [3.5, 3.0], [3.6, 3.0], [3.7, 3.0], [3.8, 3.0], [3.9, 3.0], [4.0, 3.0], [4.1, 3.0], [4.2, 3.0], [4.3, 3.0], [4.4, 3.0], [4.5, 3.0], [4.6, 3.0], [4.7, 3.0], [4.8, 3.0], [4.9, 3.0], [5.0, 3.0], [5.1, 3.0], [5.2, 3.0], [5.3, 3.0], [5.4, 3.0], [5.5, 3.0], [5.6, 3.0], [5.7, 3.0], [5.8, 3.0], [5.9, 3.0], [6.0, 3.0], [6.1, 4.0], [6.2, 4.0], [6.3, 4.0], [6.4, 4.0], [6.5, 4.0], [6.6, 4.0], [6.7, 4.0], [6.8, 4.0], [6.9, 4.0], [7.0, 4.0], [7.1, 4.0], [7.2, 4.0], [7.3, 4.0], [7.4, 4.0], [7.5, 4.0], [7.6, 4.0], [7.7, 4.0], [7.8, 4.0], [7.9, 4.0], [8.0, 4.0], [8.1, 4.0], [8.2, 4.0], [8.3, 4.0], [8.4, 4.0], [8.5, 4.0], [8.6, 4.0], [8.7, 4.0], [8.8, 4.0], [8.9, 4.0], [9.0, 4.0], [9.1, 4.0], [9.2, 4.0], [9.3, 4.0], [9.4, 4.0], [9.5, 5.0], [9.6, 5.0], [9.7, 5.0], [9.8, 5.0], [9.9, 5.0], [10.0, 5.0], [10.1, 5.0], [10.2, 5.0], [10.3, 5.0], [10.4, 5.0], [10.5, 5.0], [10.6, 5.0], [10.7, 5.0], [10.8, 5.0], [10.9, 5.0], [11.0, 5.0], [11.1, 5.0], [11.2, 5.0], [11.3, 5.0], [11.4, 5.0], [11.5, 5.0], [11.6, 5.0], [11.7, 5.0], [11.8, 5.0], [11.9, 5.0], [12.0, 5.0], [12.1, 5.0], [12.2, 5.0], [12.3, 5.0], [12.4, 5.0], [12.5, 5.0], [12.6, 5.0], [12.7, 5.0], [12.8, 5.0], [12.9, 5.0], [13.0, 5.0], [13.1, 5.0], [13.2, 6.0], [13.3, 6.0], [13.4, 6.0], [13.5, 6.0], [13.6, 6.0], [13.7, 6.0], [13.8, 6.0], [13.9, 6.0], [14.0, 6.0], [14.1, 6.0], [14.2, 6.0], [14.3, 6.0], [14.4, 6.0], [14.5, 6.0], [14.6, 6.0], [14.7, 6.0], [14.8, 6.0], [14.9, 6.0], [15.0, 6.0], [15.1, 6.0], [15.2, 6.0], [15.3, 6.0], [15.4, 6.0], [15.5, 6.0], [15.6, 6.0], [15.7, 6.0], [15.8, 6.0], [15.9, 6.0], [16.0, 6.0], [16.1, 6.0], [16.2, 6.0], [16.3, 6.0], [16.4, 6.0], [16.5, 6.0], [16.6, 6.0], [16.7, 6.0], [16.8, 7.0], [16.9, 7.0], [17.0, 7.0], [17.1, 7.0], [17.2, 7.0], [17.3, 7.0], [17.4, 7.0], [17.5, 7.0], [17.6, 7.0], [17.7, 7.0], [17.8, 7.0], [17.9, 7.0], [18.0, 7.0], [18.1, 7.0], [18.2, 7.0], [18.3, 7.0], [18.4, 7.0], [18.5, 7.0], [18.6, 7.0], [18.7, 7.0], [18.8, 7.0], [18.9, 7.0], [19.0, 7.0], [19.1, 7.0], [19.2, 7.0], [19.3, 7.0], [19.4, 7.0], [19.5, 7.0], [19.6, 7.0], [19.7, 7.0], [19.8, 7.0], [19.9, 7.0], [20.0, 7.0], [20.1, 7.0], [20.2, 7.0], [20.3, 7.0], [20.4, 8.0], [20.5, 8.0], [20.6, 8.0], [20.7, 8.0], [20.8, 8.0], [20.9, 8.0], [21.0, 8.0], [21.1, 8.0], [21.2, 8.0], [21.3, 8.0], [21.4, 8.0], [21.5, 8.0], [21.6, 8.0], [21.7, 8.0], [21.8, 8.0], [21.9, 8.0], [22.0, 8.0], [22.1, 8.0], [22.2, 8.0], [22.3, 8.0], [22.4, 8.0], [22.5, 8.0], [22.6, 8.0], [22.7, 8.0], [22.8, 8.0], [22.9, 8.0], [23.0, 8.0], [23.1, 8.0], [23.2, 8.0], [23.3, 8.0], [23.4, 8.0], [23.5, 8.0], [23.6, 8.0], [23.7, 8.0], [23.8, 9.0], [23.9, 9.0], [24.0, 9.0], [24.1, 9.0], [24.2, 9.0], [24.3, 9.0], [24.4, 9.0], [24.5, 9.0], [24.6, 9.0], [24.7, 9.0], [24.8, 9.0], [24.9, 9.0], [25.0, 9.0], [25.1, 9.0], [25.2, 9.0], [25.3, 9.0], [25.4, 9.0], [25.5, 9.0], [25.6, 9.0], [25.7, 9.0], [25.8, 9.0], [25.9, 9.0], [26.0, 9.0], [26.1, 9.0], [26.2, 9.0], [26.3, 9.0], [26.4, 9.0], [26.5, 9.0], [26.6, 9.0], [26.7, 9.0], [26.8, 9.0], [26.9, 9.0], [27.0, 9.0], [27.1, 9.0], [27.2, 10.0], [27.3, 10.0], [27.4, 10.0], [27.5, 10.0], [27.6, 10.0], [27.7, 10.0], [27.8, 10.0], [27.9, 10.0], [28.0, 10.0], [28.1, 10.0], [28.2, 10.0], [28.3, 10.0], [28.4, 10.0], [28.5, 10.0], [28.6, 10.0], [28.7, 10.0], [28.8, 10.0], [28.9, 10.0], [29.0, 10.0], [29.1, 10.0], [29.2, 10.0], [29.3, 10.0], [29.4, 10.0], [29.5, 10.0], [29.6, 10.0], [29.7, 10.0], [29.8, 10.0], [29.9, 10.0], [30.0, 10.0], [30.1, 10.0], [30.2, 10.0], [30.3, 11.0], [30.4, 11.0], [30.5, 11.0], [30.6, 11.0], [30.7, 11.0], [30.8, 11.0], [30.9, 11.0], [31.0, 11.0], [31.1, 11.0], [31.2, 11.0], [31.3, 11.0], [31.4, 11.0], [31.5, 11.0], [31.6, 11.0], [31.7, 11.0], [31.8, 11.0], [31.9, 11.0], [32.0, 11.0], [32.1, 11.0], [32.2, 11.0], [32.3, 11.0], [32.4, 11.0], [32.5, 11.0], [32.6, 11.0], [32.7, 11.0], [32.8, 11.0], [32.9, 11.0], [33.0, 11.0], [33.1, 11.0], [33.2, 11.0], [33.3, 11.0], [33.4, 12.0], [33.5, 12.0], [33.6, 12.0], [33.7, 12.0], [33.8, 12.0], [33.9, 12.0], [34.0, 12.0], [34.1, 12.0], [34.2, 12.0], [34.3, 12.0], [34.4, 12.0], [34.5, 12.0], [34.6, 12.0], [34.7, 12.0], [34.8, 12.0], [34.9, 12.0], [35.0, 12.0], [35.1, 12.0], [35.2, 12.0], [35.3, 12.0], [35.4, 12.0], [35.5, 12.0], [35.6, 12.0], [35.7, 12.0], [35.8, 12.0], [35.9, 12.0], [36.0, 12.0], [36.1, 12.0], [36.2, 12.0], [36.3, 13.0], [36.4, 13.0], [36.5, 13.0], [36.6, 13.0], [36.7, 13.0], [36.8, 13.0], [36.9, 13.0], [37.0, 13.0], [37.1, 13.0], [37.2, 13.0], [37.3, 13.0], [37.4, 13.0], [37.5, 13.0], [37.6, 13.0], [37.7, 13.0], [37.8, 13.0], [37.9, 13.0], [38.0, 13.0], [38.1, 13.0], [38.2, 13.0], [38.3, 13.0], [38.4, 13.0], [38.5, 13.0], [38.6, 13.0], [38.7, 13.0], [38.8, 13.0], [38.9, 13.0], [39.0, 13.0], [39.1, 14.0], [39.2, 14.0], [39.3, 14.0], [39.4, 14.0], [39.5, 14.0], [39.6, 14.0], [39.7, 14.0], [39.8, 14.0], [39.9, 14.0], [40.0, 14.0], [40.1, 14.0], [40.2, 14.0], [40.3, 14.0], [40.4, 14.0], [40.5, 14.0], [40.6, 14.0], [40.7, 14.0], [40.8, 14.0], [40.9, 14.0], [41.0, 14.0], [41.1, 14.0], [41.2, 14.0], [41.3, 14.0], [41.4, 14.0], [41.5, 14.0], [41.6, 14.0], [41.7, 14.0], [41.8, 15.0], [41.9, 15.0], [42.0, 15.0], [42.1, 15.0], [42.2, 15.0], [42.3, 15.0], [42.4, 15.0], [42.5, 15.0], [42.6, 15.0], [42.7, 15.0], [42.8, 15.0], [42.9, 15.0], [43.0, 15.0], [43.1, 15.0], [43.2, 15.0], [43.3, 15.0], [43.4, 15.0], [43.5, 15.0], [43.6, 15.0], [43.7, 15.0], [43.8, 15.0], [43.9, 15.0], [44.0, 15.0], [44.1, 15.0], [44.2, 15.0], [44.3, 15.0], [44.4, 16.0], [44.5, 16.0], [44.6, 16.0], [44.7, 16.0], [44.8, 16.0], [44.9, 16.0], [45.0, 16.0], [45.1, 16.0], [45.2, 16.0], [45.3, 16.0], [45.4, 16.0], [45.5, 16.0], [45.6, 16.0], [45.7, 16.0], [45.8, 16.0], [45.9, 16.0], [46.0, 16.0], [46.1, 16.0], [46.2, 16.0], [46.3, 16.0], [46.4, 16.0], [46.5, 16.0], [46.6, 16.0], [46.7, 16.0], [46.8, 16.0], [46.9, 17.0], [47.0, 17.0], [47.1, 17.0], [47.2, 17.0], [47.3, 17.0], [47.4, 17.0], [47.5, 17.0], [47.6, 17.0], [47.7, 17.0], [47.8, 17.0], [47.9, 17.0], [48.0, 17.0], [48.1, 17.0], [48.2, 17.0], [48.3, 17.0], [48.4, 17.0], [48.5, 17.0], [48.6, 17.0], [48.7, 17.0], [48.8, 17.0], [48.9, 17.0], [49.0, 17.0], [49.1, 17.0], [49.2, 18.0], [49.3, 18.0], [49.4, 18.0], [49.5, 18.0], [49.6, 18.0], [49.7, 18.0], [49.8, 18.0], [49.9, 18.0], [50.0, 18.0], [50.1, 18.0], [50.2, 18.0], [50.3, 18.0], [50.4, 18.0], [50.5, 18.0], [50.6, 18.0], [50.7, 18.0], [50.8, 18.0], [50.9, 18.0], [51.0, 18.0], [51.1, 18.0], [51.2, 18.0], [51.3, 18.0], [51.4, 18.0], [51.5, 19.0], [51.6, 19.0], [51.7, 19.0], [51.8, 19.0], [51.9, 19.0], [52.0, 19.0], [52.1, 19.0], [52.2, 19.0], [52.3, 19.0], [52.4, 19.0], [52.5, 19.0], [52.6, 19.0], [52.7, 19.0], [52.8, 19.0], [52.9, 19.0], [53.0, 19.0], [53.1, 19.0], [53.2, 19.0], [53.3, 19.0], [53.4, 19.0], [53.5, 19.0], [53.6, 19.0], [53.7, 20.0], [53.8, 20.0], [53.9, 20.0], [54.0, 20.0], [54.1, 20.0], [54.2, 20.0], [54.3, 20.0], [54.4, 20.0], [54.5, 20.0], [54.6, 20.0], [54.7, 20.0], [54.8, 20.0], [54.9, 20.0], [55.0, 20.0], [55.1, 20.0], [55.2, 20.0], [55.3, 20.0], [55.4, 20.0], [55.5, 20.0], [55.6, 20.0], [55.7, 20.0], [55.8, 21.0], [55.9, 21.0], [56.0, 21.0], [56.1, 21.0], [56.2, 21.0], [56.3, 21.0], [56.4, 21.0], [56.5, 21.0], [56.6, 21.0], [56.7, 21.0], [56.8, 21.0], [56.9, 21.0], [57.0, 21.0], [57.1, 21.0], [57.2, 21.0], [57.3, 21.0], [57.4, 21.0], [57.5, 21.0], [57.6, 21.0], [57.7, 22.0], [57.8, 22.0], [57.9, 22.0], [58.0, 22.0], [58.1, 22.0], [58.2, 22.0], [58.3, 22.0], [58.4, 22.0], [58.5, 22.0], [58.6, 22.0], [58.7, 22.0], [58.8, 22.0], [58.9, 22.0], [59.0, 22.0], [59.1, 22.0], [59.2, 22.0], [59.3, 22.0], [59.4, 22.0], [59.5, 22.0], [59.6, 23.0], [59.7, 23.0], [59.8, 23.0], [59.9, 23.0], [60.0, 23.0], [60.1, 23.0], [60.2, 23.0], [60.3, 23.0], [60.4, 23.0], [60.5, 23.0], [60.6, 23.0], [60.7, 23.0], [60.8, 23.0], [60.9, 23.0], [61.0, 23.0], [61.1, 23.0], [61.2, 23.0], [61.3, 23.0], [61.4, 24.0], [61.5, 24.0], [61.6, 24.0], [61.7, 24.0], [61.8, 24.0], [61.9, 24.0], [62.0, 24.0], [62.1, 24.0], [62.2, 24.0], [62.3, 24.0], [62.4, 24.0], [62.5, 24.0], [62.6, 24.0], [62.7, 24.0], [62.8, 24.0], [62.9, 24.0], [63.0, 24.0], [63.1, 24.0], [63.2, 25.0], [63.3, 25.0], [63.4, 25.0], [63.5, 25.0], [63.6, 25.0], [63.7, 25.0], [63.8, 25.0], [63.9, 25.0], [64.0, 25.0], [64.1, 25.0], [64.2, 25.0], [64.3, 25.0], [64.4, 25.0], [64.5, 25.0], [64.6, 25.0], [64.7, 25.0], [64.8, 26.0], [64.9, 26.0], [65.0, 26.0], [65.1, 26.0], [65.2, 26.0], [65.3, 26.0], [65.4, 26.0], [65.5, 26.0], [65.6, 26.0], [65.7, 26.0], [65.8, 26.0], [65.9, 26.0], [66.0, 26.0], [66.1, 26.0], [66.2, 26.0], [66.3, 26.0], [66.4, 27.0], [66.5, 27.0], [66.6, 27.0], [66.7, 27.0], [66.8, 27.0], [66.9, 27.0], [67.0, 27.0], [67.1, 27.0], [67.2, 27.0], [67.3, 27.0], [67.4, 27.0], [67.5, 27.0], [67.6, 27.0], [67.7, 27.0], [67.8, 28.0], [67.9, 28.0], [68.0, 28.0], [68.1, 28.0], [68.2, 28.0], [68.3, 28.0], [68.4, 28.0], [68.5, 28.0], [68.6, 28.0], [68.7, 28.0], [68.8, 28.0], [68.9, 28.0], [69.0, 28.0], [69.1, 28.0], [69.2, 29.0], [69.3, 29.0], [69.4, 29.0], [69.5, 29.0], [69.6, 29.0], [69.7, 29.0], [69.8, 29.0], [69.9, 29.0], [70.0, 29.0], [70.1, 29.0], [70.2, 29.0], [70.3, 29.0], [70.4, 29.0], [70.5, 29.0], [70.6, 30.0], [70.7, 30.0], [70.8, 30.0], [70.9, 30.0], [71.0, 30.0], [71.1, 30.0], [71.2, 30.0], [71.3, 30.0], [71.4, 30.0], [71.5, 30.0], [71.6, 30.0], [71.7, 30.0], [71.8, 30.0], [71.9, 31.0], [72.0, 31.0], [72.1, 31.0], [72.2, 31.0], [72.3, 31.0], [72.4, 31.0], [72.5, 31.0], [72.6, 31.0], [72.7, 31.0], [72.8, 31.0], [72.9, 31.0], [73.0, 31.0], [73.1, 32.0], [73.2, 32.0], [73.3, 32.0], [73.4, 32.0], [73.5, 32.0], [73.6, 32.0], [73.7, 32.0], [73.8, 32.0], [73.9, 32.0], [74.0, 32.0], [74.1, 32.0], [74.2, 33.0], [74.3, 33.0], [74.4, 33.0], [74.5, 33.0], [74.6, 33.0], [74.7, 33.0], [74.8, 33.0], [74.9, 33.0], [75.0, 33.0], [75.1, 33.0], [75.2, 33.0], [75.3, 34.0], [75.4, 34.0], [75.5, 34.0], [75.6, 34.0], [75.7, 34.0], [75.8, 34.0], [75.9, 34.0], [76.0, 34.0], [76.1, 34.0], [76.2, 34.0], [76.3, 35.0], [76.4, 35.0], [76.5, 35.0], [76.6, 35.0], [76.7, 35.0], [76.8, 35.0], [76.9, 35.0], [77.0, 35.0], [77.1, 35.0], [77.2, 35.0], [77.3, 36.0], [77.4, 36.0], [77.5, 36.0], [77.6, 36.0], [77.7, 36.0], [77.8, 36.0], [77.9, 36.0], [78.0, 36.0], [78.1, 36.0], [78.2, 36.0], [78.3, 37.0], [78.4, 37.0], [78.5, 37.0], [78.6, 37.0], [78.7, 37.0], [78.8, 37.0], [78.9, 37.0], [79.0, 37.0], [79.1, 38.0], [79.2, 38.0], [79.3, 38.0], [79.4, 38.0], [79.5, 38.0], [79.6, 38.0], [79.7, 38.0], [79.8, 38.0], [79.9, 38.0], [80.0, 39.0], [80.1, 39.0], [80.2, 39.0], [80.3, 39.0], [80.4, 39.0], [80.5, 39.0], [80.6, 39.0], [80.7, 39.0], [80.8, 40.0], [80.9, 40.0], [81.0, 40.0], [81.1, 40.0], [81.2, 40.0], [81.3, 40.0], [81.4, 40.0], [81.5, 41.0], [81.6, 41.0], [81.7, 41.0], [81.8, 41.0], [81.9, 41.0], [82.0, 41.0], [82.1, 41.0], [82.2, 42.0], [82.3, 42.0], [82.4, 42.0], [82.5, 42.0], [82.6, 42.0], [82.7, 42.0], [82.8, 42.0], [82.9, 43.0], [83.0, 43.0], [83.1, 43.0], [83.2, 43.0], [83.3, 43.0], [83.4, 43.0], [83.5, 43.0], [83.6, 44.0], [83.7, 44.0], [83.8, 44.0], [83.9, 44.0], [84.0, 44.0], [84.1, 44.0], [84.2, 45.0], [84.3, 45.0], [84.4, 45.0], [84.5, 45.0], [84.6, 45.0], [84.7, 45.0], [84.8, 46.0], [84.9, 46.0], [85.0, 46.0], [85.1, 46.0], [85.2, 46.0], [85.3, 47.0], [85.4, 47.0], [85.5, 47.0], [85.6, 47.0], [85.7, 47.0], [85.8, 48.0], [85.9, 48.0], [86.0, 48.0], [86.1, 48.0], [86.2, 48.0], [86.3, 49.0], [86.4, 49.0], [86.5, 49.0], [86.6, 49.0], [86.7, 49.0], [86.8, 50.0], [86.9, 50.0], [87.0, 50.0], [87.1, 50.0], [87.2, 50.0], [87.3, 51.0], [87.4, 51.0], [87.5, 51.0], [87.6, 51.0], [87.7, 52.0], [87.8, 52.0], [87.9, 52.0], [88.0, 52.0], [88.1, 53.0], [88.2, 53.0], [88.3, 53.0], [88.4, 53.0], [88.5, 54.0], [88.6, 54.0], [88.7, 54.0], [88.8, 54.0], [88.9, 55.0], [89.0, 55.0], [89.1, 55.0], [89.2, 56.0], [89.3, 56.0], [89.4, 56.0], [89.5, 56.0], [89.6, 57.0], [89.7, 57.0], [89.8, 57.0], [89.9, 58.0], [90.0, 58.0], [90.1, 58.0], [90.2, 59.0], [90.3, 59.0], [90.4, 59.0], [90.5, 60.0], [90.6, 60.0], [90.7, 60.0], [90.8, 61.0], [90.9, 61.0], [91.0, 62.0], [91.1, 62.0], [91.2, 62.0], [91.3, 63.0], [91.4, 63.0], [91.5, 64.0], [91.6, 64.0], [91.7, 64.0], [91.8, 65.0], [91.9, 65.0], [92.0, 66.0], [92.1, 66.0], [92.2, 67.0], [92.3, 67.0], [92.4, 68.0], [92.5, 68.0], [92.6, 69.0], [92.7, 69.0], [92.8, 70.0], [92.9, 70.0], [93.0, 71.0], [93.1, 71.0], [93.2, 72.0], [93.3, 72.0], [93.4, 73.0], [93.5, 73.0], [93.6, 74.0], [93.7, 75.0], [93.8, 75.0], [93.9, 76.0], [94.0, 77.0], [94.1, 77.0], [94.2, 78.0], [94.3, 79.0], [94.4, 79.0], [94.5, 80.0], [94.6, 81.0], [94.7, 82.0], [94.8, 82.0], [94.9, 83.0], [95.0, 84.0], [95.1, 85.0], [95.2, 86.0], [95.3, 87.0], [95.4, 88.0], [95.5, 89.0], [95.6, 90.0], [95.7, 91.0], [95.8, 92.0], [95.9, 93.0], [96.0, 94.0], [96.1, 95.0], [96.2, 96.0], [96.3, 97.0], [96.4, 98.0], [96.5, 100.0], [96.6, 101.0], [96.7, 102.0], [96.8, 104.0], [96.9, 105.0], [97.0, 107.0], [97.1, 108.0], [97.2, 110.0], [97.3, 112.0], [97.4, 113.0], [97.5, 115.0], [97.6, 117.0], [97.7, 120.0], [97.8, 122.0], [97.9, 124.0], [98.0, 127.0], [98.1, 129.0], [98.2, 132.0], [98.3, 136.0], [98.4, 139.0], [98.5, 143.0], [98.6, 147.0], [98.7, 152.0], [98.8, 158.0], [98.9, 165.0], [99.0, 173.0], [99.1, 182.0], [99.2, 193.0], [99.3, 206.0], [99.4, 224.0], [99.5, 248.0], [99.6, 283.0], [99.7, 334.0], [99.8, 411.0], [99.9, 556.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 1811334.0, "series": [{"data": [[0.0, 1811334.0], [600.0, 457.0], [700.0, 316.0], [200.0, 7228.0], [800.0, 198.0], [900.0, 226.0], [1000.0, 176.0], [1100.0, 130.0], [300.0, 2811.0], [1200.0, 61.0], [1300.0, 35.0], [1400.0, 10.0], [1500.0, 7.0], [100.0, 52100.0], [400.0, 1653.0], [1600.0, 2.0], [500.0, 725.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1875137.0, "series": [{"data": [[0.0, 1875137.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2323.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 563.3161141272996, "minX": 1.7431404E12, "maxY": 700.0, "series": [{"data": [[1.74314076E12, 700.0], [1.74314046E12, 700.0], [1.74314094E12, 700.0], [1.7431404E12, 563.3161141272996], [1.74314088E12, 700.0], [1.74314058E12, 700.0], [1.74314052E12, 700.0], [1.743141E12, 691.9784978800758], [1.7431407E12, 700.0], [1.74314064E12, 700.0], [1.74314082E12, 700.0]], "isOverall": false, "label": "Throughput Stress Test Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.743141E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0943396226415094, "minX": 12.0, "maxY": 215.6515151515152, "series": [{"data": [[12.0, 61.06249999999999], [13.0, 19.25], [14.0, 2.5], [15.0, 4.153846153846155], [16.0, 3.0], [17.0, 3.461538461538462], [18.0, 3.25], [19.0, 3.3333333333333335], [20.0, 3.7], [21.0, 2.4], [22.0, 4.5], [23.0, 2.333333333333333], [24.0, 2.4375], [25.0, 5.142857142857142], [26.0, 3.6428571428571423], [27.0, 3.6363636363636362], [28.0, 2.8749999999999996], [29.0, 4.157894736842105], [30.0, 3.6666666666666665], [31.0, 3.2105263157894735], [32.0, 2.7272727272727275], [33.0, 4.411764705882353], [34.0, 3.357142857142857], [35.0, 2.909090909090909], [36.0, 3.0476190476190474], [37.0, 3.3333333333333335], [38.0, 3.227272727272727], [39.0, 3.3124999999999996], [40.0, 4.0], [41.0, 3.0000000000000004], [42.0, 3.142857142857143], [43.0, 4.363636363636362], [44.0, 4.222222222222222], [45.0, 2.7600000000000002], [46.0, 2.466666666666667], [47.0, 3.5652173913043472], [48.0, 2.3499999999999996], [49.0, 3.4374999999999996], [50.0, 2.931034482758621], [51.0, 2.4705882352941173], [52.0, 3.6666666666666665], [53.0, 2.5000000000000004], [54.0, 2.4482758620689653], [55.0, 3.0], [56.0, 1.8181818181818183], [57.0, 2.9333333333333336], [58.0, 2.2777777777777777], [59.0, 2.59375], [60.0, 2.090909090909091], [61.0, 2.0882352941176476], [62.0, 2.2857142857142856], [63.0, 2.6000000000000005], [64.0, 2.8529411764705883], [65.0, 1.9565217391304348], [66.0, 2.5277777777777772], [67.0, 1.6363636363636362], [68.0, 1.8378378378378386], [69.0, 2.32], [70.0, 3.0799999999999996], [71.0, 12.80952380952381], [72.0, 7.333333333333332], [73.0, 3.2857142857142856], [74.0, 2.9285714285714284], [75.0, 1.846153846153846], [76.0, 2.1999999999999997], [77.0, 3.366666666666667], [78.0, 3.9743589743589722], [79.0, 2.6551724137931036], [80.0, 2.282051282051282], [81.0, 3.1875], [82.0, 3.4249999999999994], [83.0, 3.117647058823529], [84.0, 2.8235294117647056], [85.0, 3.219512195121952], [86.0, 2.0000000000000004], [87.0, 2.170731707317073], [88.0, 2.2580645161290325], [89.0, 2.977272727272727], [90.0, 1.8421052631578947], [91.0, 2.2972972972972974], [92.0, 2.8043478260869574], [93.0, 2.4193548387096775], [94.0, 2.767441860465116], [95.0, 3.0], [96.0, 1.9999999999999998], [97.0, 1.842105263157895], [98.0, 2.738095238095238], [99.0, 2.208333333333334], [100.0, 1.825], [101.0, 1.8000000000000003], [102.0, 2.125], [103.0, 1.8269230769230773], [104.0, 1.3095238095238093], [105.0, 1.2391304347826086], [106.0, 1.4468085106382975], [107.0, 1.5789473684210522], [108.0, 1.879310344827587], [109.0, 1.6041666666666665], [110.0, 1.7391304347826089], [111.0, 1.4285714285714286], [112.0, 1.711538461538462], [113.0, 1.291666666666667], [114.0, 1.5681818181818186], [115.0, 1.833333333333334], [116.0, 1.3043478260869563], [117.0, 1.285714285714286], [118.0, 1.1739130434782605], [119.0, 1.2258064516129032], [120.0, 1.2325581395348837], [121.0, 2.061224489795919], [122.0, 2.1186440677966103], [123.0, 1.7708333333333333], [124.0, 1.833333333333334], [125.0, 2.07843137254902], [126.0, 2.017857142857143], [127.0, 2.1346153846153855], [128.0, 1.9056603773584906], [129.0, 2.111111111111111], [130.0, 1.8000000000000005], [131.0, 2.290322580645162], [132.0, 1.5961538461538463], [133.0, 2.032258064516129], [134.0, 1.3703703703703702], [135.0, 1.5593220338983047], [136.0, 2.016129032258065], [137.0, 1.2857142857142851], [138.0, 1.4696969696969697], [139.0, 1.0943396226415094], [140.0, 1.544117647058824], [141.0, 1.4642857142857146], [142.0, 1.7000000000000002], [143.0, 2.36764705882353], [144.0, 1.5454545454545452], [145.0, 1.915492957746478], [146.0, 1.719298245614035], [147.0, 2.552238805970149], [148.0, 1.9230769230769238], [149.0, 1.9661016949152543], [150.0, 2.1884057971014483], [151.0, 1.9701492537313432], [152.0, 2.2388059701492544], [153.0, 1.380952380952381], [154.0, 1.887323943661972], [155.0, 1.9365079365079363], [156.0, 1.6406250000000004], [157.0, 2.7605633802816905], [158.0, 1.8253968253968251], [159.0, 2.7692307692307683], [160.0, 2.126984126984127], [161.0, 2.253521126760563], [162.0, 1.863636363636364], [163.0, 2.7121212121212124], [164.0, 2.6049382716049387], [165.0, 2.0312500000000004], [166.0, 3.062499999999999], [167.0, 2.63235294117647], [168.0, 3.1315789473684204], [169.0, 3.1830985915492955], [170.0, 2.356164383561645], [171.0, 2.602564102564102], [172.0, 4.120689655172415], [173.0, 3.1818181818181808], [174.0, 2.1315789473684212], [175.0, 2.4133333333333336], [176.0, 2.6216216216216215], [177.0, 2.7222222222222214], [178.0, 3.1176470588235294], [179.0, 2.1549295774647876], [180.0, 2.5813953488372094], [181.0, 2.4166666666666674], [182.0, 2.9625000000000004], [183.0, 3.4698795180722906], [184.0, 2.4399999999999995], [185.0, 4.290697674418604], [186.0, 2.135135135135135], [187.0, 4.123595505617978], [188.0, 2.069444444444445], [189.0, 2.2526315789473688], [190.0, 1.987012987012987], [191.0, 1.974683544303798], [192.0, 3.0227272727272716], [193.0, 2.013888888888889], [194.0, 3.053191489361703], [195.0, 2.2625], [196.0, 3.950617283950616], [197.0, 3.297872340425531], [198.0, 2.5975609756097553], [199.0, 3.505882352941177], [200.0, 2.9647058823529417], [201.0, 3.359550561797753], [202.0, 2.241379310344827], [203.0, 2.988095238095238], [204.0, 3.6999999999999993], [205.0, 3.4925373134328357], [206.0, 9.353535353535353], [207.0, 4.303921568627452], [208.0, 2.2857142857142856], [209.0, 2.1190476190476195], [210.0, 3.9888888888888894], [211.0, 2.852631578947369], [212.0, 2.727272727272727], [213.0, 4.204081632653063], [214.0, 1.9397590361445787], [215.0, 3.2990654205607477], [216.0, 1.9425287356321834], [217.0, 3.333333333333334], [218.0, 3.366666666666666], [219.0, 3.061224489795918], [220.0, 4.389473684210524], [221.0, 2.1666666666666656], [222.0, 4.131313131313131], [223.0, 3.120879120879121], [224.0, 5.9347826086956506], [225.0, 6.9565217391304355], [226.0, 7.495238095238097], [227.0, 9.65882352941176], [228.0, 8.69473684210526], [229.0, 10.784946236559142], [230.0, 11.578947368421053], [231.0, 13.591397849462368], [232.0, 15.23333333333333], [233.0, 17.458333333333332], [234.0, 18.648351648351642], [235.0, 19.950000000000014], [238.0, 36.91071428571428], [239.0, 9.23711340206185], [237.0, 26.66363636363636], [236.0, 27.5], [240.0, 3.0129870129870135], [241.0, 7.511627906976746], [242.0, 6.163265306122449], [243.0, 11.63529411764706], [244.0, 15.34188034188034], [245.0, 16.896103896103895], [246.0, 17.980769230769234], [247.0, 16.509259259259263], [248.0, 19.781818181818192], [249.0, 13.814159292035399], [250.0, 12.934959349593498], [251.0, 11.219298245614032], [252.0, 9.561224489795915], [253.0, 11.608333333333333], [254.0, 9.637362637362639], [255.0, 15.683673469387756], [257.0, 19.571428571428577], [256.0, 16.820000000000007], [258.0, 23.30769230769231], [259.0, 20.593023255813947], [260.0, 13.923076923076923], [261.0, 20.86861313868613], [262.0, 28.857142857142854], [263.0, 30.16129032258066], [264.0, 30.719512195121947], [270.0, 37.42735042735043], [271.0, 20.82191780821918], [268.0, 33.07216494845361], [269.0, 36.53174603174604], [265.0, 70.40350877192981], [266.0, 26.757009345794398], [267.0, 24.804878048780484], [273.0, 14.96268656716418], [272.0, 12.283018867924525], [274.0, 9.30120481927711], [275.0, 20.93478260869565], [276.0, 21.436507936507937], [277.0, 24.240963855421686], [278.0, 28.4351145038168], [279.0, 25.70886075949367], [280.0, 35.25454545454546], [287.0, 41.17142857142857], [285.0, 49.41322314049587], [284.0, 42.952380952380956], [286.0, 48.85849056603775], [281.0, 35.54545454545453], [282.0, 37.00000000000001], [283.0, 44.481081081081086], [289.0, 36.780000000000015], [288.0, 38.46753246753249], [290.0, 27.1869918699187], [291.0, 15.14705882352941], [292.0, 23.373737373737374], [293.0, 16.235294117647054], [294.0, 5.603960396039604], [295.0, 7.7021276595744705], [296.0, 8.04123711340206], [302.0, 17.287356321839088], [303.0, 27.94059405940594], [300.0, 19.035294117647073], [301.0, 20.965811965811966], [297.0, 7.853932584269662], [298.0, 12.282051282051277], [299.0, 11.294117647058819], [305.0, 33.065934065934066], [304.0, 29.781512605042018], [306.0, 32.192000000000036], [307.0, 28.87209302325582], [308.0, 32.3877551020408], [309.0, 17.223300970873783], [310.0, 25.779661016949152], [311.0, 19.801324503311257], [312.0, 25.954545454545453], [318.0, 24.366279069767437], [319.0, 29.0], [316.0, 28.077669902912607], [317.0, 31.610619469026542], [313.0, 20.927007299270084], [314.0, 24.828571428571426], [315.0, 31.970873786407758], [321.0, 25.955357142857146], [320.0, 20.627272727272725], [322.0, 27.44565217391304], [323.0, 19.236220472440944], [324.0, 33.06666666666667], [325.0, 30.427350427350422], [326.0, 33.381818181818176], [327.0, 38.81818181818183], [328.0, 29.113043478260874], [334.0, 36.54081632653061], [335.0, 35.32692307692309], [332.0, 34.625], [333.0, 32.69411764705882], [329.0, 27.991525423728824], [330.0, 30.050847457627118], [331.0, 31.532786885245883], [337.0, 40.72566371681415], [336.0, 39.10434782608694], [338.0, 43.61688311688312], [339.0, 47.27868852459015], [340.0, 58.48214285714283], [341.0, 50.02777777777777], [342.0, 39.54106280193238], [343.0, 41.79207920792079], [344.0, 3.4], [350.0, 8.029411764705882], [351.0, 10.771929824561406], [348.0, 5.520833333333331], [349.0, 5.8252427184466], [345.0, 10.04109589041096], [346.0, 5.388888888888891], [347.0, 3.7192982456140355], [353.0, 16.12820512820513], [352.0, 9.786407766990287], [354.0, 15.120689655172415], [355.0, 20.798245614035096], [356.0, 24.72916666666666], [357.0, 28.599999999999994], [358.0, 33.771929824561404], [359.0, 40.8846153846154], [360.0, 42.08421052631577], [366.0, 6.897959183673469], [367.0, 7.411214953271027], [364.0, 4.45360824742268], [365.0, 2.4358974358974366], [361.0, 44.97345132743363], [362.0, 41.798449612403125], [363.0, 25.066176470588246], [369.0, 12.990566037735851], [368.0, 7.301075268817206], [370.0, 12.330000000000002], [371.0, 16.083333333333336], [372.0, 22.653465346534656], [373.0, 12.461538461538462], [374.0, 32.73619631901839], [375.0, 14.496124031007762], [376.0, 2.247058823529413], [382.0, 36.95238095238097], [383.0, 28.972222222222218], [380.0, 15.644444444444446], [381.0, 23.679841897233207], [377.0, 3.8155339805825244], [378.0, 5.936363636363636], [379.0, 7.90721649484536], [385.0, 29.851063829787233], [384.0, 28.924528301886788], [386.0, 30.43801652892562], [387.0, 30.82758620689656], [388.0, 31.01709401709402], [389.0, 32.99099099099098], [390.0, 40.895705521472365], [391.0, 38.63636363636363], [392.0, 49.21935483870967], [398.0, 32.99999999999998], [399.0, 90.56521739130437], [396.0, 53.94117647058825], [397.0, 27.51136363636364], [393.0, 57.41379310344827], [394.0, 57.21848739495799], [395.0, 57.10126582278484], [401.0, 54.19540229885058], [400.0, 41.70512820512821], [402.0, 49.598039215686285], [403.0, 41.50495049504948], [404.0, 34.87857142857142], [405.0, 44.260115606936424], [406.0, 90.25], [407.0, 42.62337662337662], [408.0, 55.341176470588245], [414.0, 79.48275862068964], [415.0, 57.11538461538461], [412.0, 63.083333333333314], [413.0, 59.395683453237396], [409.0, 57.42307692307696], [410.0, 73.80000000000004], [411.0, 66.41935483870968], [417.0, 215.6515151515152], [416.0, 63.44444444444446], [418.0, 132.95412844036704], [419.0, 4.531914893617022], [420.0, 4.563636363636366], [421.0, 5.696969696969698], [422.0, 11.999999999999998], [423.0, 19.065420560747658], [424.0, 16.21621621621621], [430.0, 2.305555555555556], [431.0, 3.9391304347826104], [428.0, 27.612903225806452], [429.0, 6.528301886792453], [425.0, 17.159663865546214], [426.0, 19.33742331288344], [427.0, 25.535714285714292], [433.0, 5.915094339622641], [432.0, 3.5], [434.0, 6.0588235294117645], [435.0, 15.216101694915253], [436.0, 14.249999999999998], [437.0, 21.699999999999996], [438.0, 28.588785046728983], [439.0, 38.04494382022473], [440.0, 41.97938144329896], [446.0, 62.49166666666665], [447.0, 65.38983050847457], [444.0, 59.87671232876713], [445.0, 62.71428571428571], [441.0, 46.74038461538461], [442.0, 53.67676767676769], [443.0, 52.61328124999996], [448.0, 69.29729729729729], [449.0, 75.10465116279069], [450.0, 69.23076923076924], [452.0, 38.31159420289856], [453.0, 3.9753086419753076], [454.0, 4.767857142857142], [455.0, 6.793814432989691], [456.0, 5.225490196078431], [462.0, 19.505050505050512], [463.0, 28.04716981132075], [460.0, 15.319727891156463], [461.0, 15.450980392156865], [451.0, 83.19767441860466], [457.0, 6.316326530612242], [458.0, 9.208333333333334], [459.0, 10.456790123456793], [465.0, 32.33663366336633], [464.0, 30.0531914893617], [466.0, 42.711340206185575], [467.0, 43.49382716049383], [468.0, 48.76859504132232], [469.0, 52.250000000000014], [470.0, 51.518248175182485], [471.0, 37.05405405405405], [472.0, 31.396825396825395], [478.0, 13.071428571428571], [479.0, 16.296296296296298], [476.0, 7.801980198019801], [477.0, 10.208333333333329], [473.0, 14.130841121495331], [474.0, 4.724489795918366], [475.0, 6.463917525773196], [481.0, 19.87619047619047], [480.0, 18.0], [482.0, 21.35616438356164], [483.0, 37.923913043478265], [484.0, 40.05714285714286], [485.0, 32.952380952380956], [486.0, 28.10714285714286], [487.0, 23.873239436619716], [488.0, 15.000000000000002], [494.0, 12.673469387755103], [495.0, 18.080808080808076], [492.0, 8.270833333333336], [493.0, 13.222222222222225], [489.0, 4.439560439560439], [490.0, 6.764705882352945], [491.0, 5.94059405940594], [497.0, 20.833333333333343], [496.0, 21.485714285714295], [498.0, 25.572815533980588], [499.0, 26.75247524752475], [500.0, 35.141304347826086], [501.0, 37.3263157894737], [502.0, 45.55882352941177], [503.0, 46.28148148148149], [504.0, 46.30588235294117], [511.0, 50.18103448275861], [510.0, 14.034090909090907], [508.0, 37.135714285714286], [509.0, 33.44117647058823], [505.0, 44.69432314410479], [506.0, 46.77777777777778], [507.0, 54.35211267605632], [515.0, 5.45], [512.0, 9.108910891089105], [526.0, 72.70512820512822], [527.0, 67.69795918367349], [524.0, 49.39024390243905], [525.0, 64.141935483871], [522.0, 38.519999999999996], [523.0, 39.386138613861384], [513.0, 2.155844155844156], [514.0, 3.3333333333333326], [516.0, 6.241379310344828], [517.0, 10.831168831168828], [518.0, 16.8015873015873], [519.0, 16.20560747663552], [528.0, 60.2528735632184], [542.0, 39.46017699115046], [543.0, 21.125984251968504], [540.0, 48.29007633587788], [541.0, 38.341880341880334], [538.0, 99.71428571428571], [539.0, 38.460674157303366], [536.0, 24.633333333333326], [537.0, 37.26119402985075], [529.0, 28.347368421052636], [530.0, 19.235294117647047], [531.0, 6.791666666666668], [532.0, 7.888059701492535], [533.0, 9.688172043010752], [534.0, 18.569999999999997], [535.0, 26.172043010752688], [520.0, 22.140186915887856], [521.0, 31.107142857142858], [547.0, 18.69090909090909], [544.0, 14.203703703703702], [558.0, 18.445378151260506], [559.0, 16.41525423728815], [556.0, 17.22058823529413], [557.0, 11.27027027027027], [554.0, 16.527999999999995], [555.0, 8.303030303030305], [545.0, 13.581632653061222], [546.0, 10.358695652173916], [548.0, 14.221153846153848], [549.0, 21.88297872340426], [550.0, 15.27131782945737], [551.0, 14.326732673267328], [560.0, 18.35135135135134], [574.0, 17.801801801801794], [575.0, 23.753968253968264], [572.0, 14.529914529914528], [573.0, 17.02884615384616], [570.0, 6.3092783505154655], [571.0, 8.1271186440678], [568.0, 5.5980392156862715], [569.0, 4.686567164179103], [561.0, 5.969387755102041], [562.0, 16.844827586206893], [563.0, 10.282051282051285], [565.0, 36.838028169014066], [564.0, 17.0], [566.0, 20.075000000000006], [567.0, 7.195652173913043], [552.0, 8.058823529411761], [553.0, 9.730337078651688], [579.0, 19.326315789473686], [576.0, 16.140495867768593], [591.0, 36.474999999999994], [590.0, 40.598540145985396], [588.0, 16.150000000000002], [589.0, 21.865168539325843], [586.0, 14.743589743589741], [587.0, 13.607692307692306], [577.0, 18.481481481481474], [578.0, 20.168], [580.0, 25.645161290322587], [581.0, 26.697247706422026], [582.0, 20.06666666666667], [583.0, 7.4666666666666694], [592.0, 11.854166666666666], [606.0, 34.88461538461539], [607.0, 38.13559322033898], [604.0, 25.87128712871288], [605.0, 32.18857142857144], [602.0, 22.42268041237113], [603.0, 26.921875000000007], [600.0, 17.000000000000007], [601.0, 20.2945205479452], [593.0, 2.6315789473684204], [594.0, 4.458333333333333], [595.0, 5.862745098039213], [596.0, 5.871287128712873], [597.0, 8.698113207547168], [598.0, 12.333333333333327], [599.0, 14.787037037037035], [584.0, 13.170370370370373], [585.0, 7.026548672566373], [611.0, 46.87272727272728], [608.0, 38.865671641791074], [622.0, 7.9230769230769225], [623.0, 8.630252100840336], [620.0, 12.363057324840765], [621.0, 6.321428571428573], [618.0, 5.4444444444444455], [619.0, 19.253968253968242], [609.0, 43.44444444444445], [610.0, 50.48695652173913], [612.0, 37.54601226993865], [613.0, 32.2279411764706], [614.0, 40.188524590163944], [615.0, 31.03508771929825], [624.0, 14.18095238095238], [638.0, 17.207407407407402], [639.0, 16.401709401709393], [636.0, 10.725806451612906], [637.0, 9.38888888888889], [634.0, 17.27927927927928], [635.0, 12.7981220657277], [632.0, 6.25287356321839], [633.0, 14.950413223140497], [625.0, 15.41860465116279], [626.0, 16.76388888888889], [627.0, 22.485436893203886], [628.0, 25.703389830508474], [629.0, 33.6728971962617], [630.0, 18.452380952380953], [631.0, 13.967479674796747], [616.0, 46.345911949685544], [617.0, 9.33333333333333], [643.0, 39.4018691588785], [640.0, 21.077419354838703], [654.0, 35.30303030303032], [655.0, 40.07865168539326], [652.0, 25.852941176470587], [653.0, 29.024691358024686], [650.0, 14.346534653465351], [651.0, 17.055118110236226], [641.0, 29.439252336448604], [642.0, 17.82758620689655], [644.0, 38.98347107438015], [645.0, 27.55333333333333], [646.0, 9.93396226415094], [647.0, 8.16260162601626], [656.0, 43.187500000000014], [670.0, 16.062499999999996], [671.0, 5.913978494623657], [668.0, 17.01639344262295], [669.0, 13.670103092783508], [666.0, 15.968749999999993], [667.0, 9.707547169811319], [664.0, 13.709219858156027], [665.0, 16.818181818181824], [657.0, 39.08196721311475], [658.0, 45.526717557251914], [659.0, 37.937888198757754], [660.0, 26.818181818181817], [661.0, 22.34453781512605], [662.0, 30.682758620689665], [663.0, 27.533333333333324], [648.0, 5.841666666666668], [649.0, 8.049504950495049], [675.0, 19.146551724137932], [672.0, 13.681818181818183], [687.0, 29.549999999999997], [685.0, 46.50746268656716], [686.0, 41.02521008403365], [682.0, 42.539473684210535], [683.0, 30.97826086956522], [684.0, 45.296875], [673.0, 10.562499999999996], [674.0, 16.75555555555556], [676.0, 20.928571428571423], [677.0, 26.969696969696958], [678.0, 24.876106194690273], [679.0, 28.728971962616814], [688.0, 32.45384615384618], [700.0, 28.598170070429923], [698.0, 30.220588235294105], [699.0, 11.547619047619051], [696.0, 26.856164383561634], [697.0, 20.745098039215687], [689.0, 34.94067796610168], [690.0, 22.517241379310338], [691.0, 23.438461538461546], [692.0, 12.118110236220472], [693.0, 15.620155038759695], [694.0, 5.816901408450704], [695.0, 17.683333333333337], [680.0, 37.17333333333332], [681.0, 44.72864321608043]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[690.4898275284329, 28.39214548948594]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 700.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 23774.4, "minX": 1.7431404E12, "maxY": 963288.5333333333, "series": [{"data": [[1.74314076E12, 961677.6666666666], [1.74314046E12, 833032.2], [1.74314094E12, 961210.4666666667], [1.7431404E12, 631961.0], [1.74314088E12, 963288.5333333333], [1.74314058E12, 950786.0666666667], [1.74314052E12, 911984.1333333333], [1.743141E12, 64278.933333333334], [1.7431407E12, 956840.2], [1.74314064E12, 952421.2666666667], [1.74314082E12, 949535.3333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74314076E12, 355689.0], [1.74314046E12, 308107.8], [1.74314094E12, 355516.2], [1.7431404E12, 233739.0], [1.74314088E12, 356284.8], [1.74314058E12, 351660.6], [1.74314052E12, 337309.2], [1.743141E12, 23774.4], [1.7431407E12, 353899.8], [1.74314064E12, 352265.4], [1.74314082E12, 351198.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.743141E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 24.13804604202928, "minX": 1.7431404E12, "maxY": 32.24288862692816, "series": [{"data": [[1.74314076E12, 26.594225854608652], [1.74314046E12, 30.152958152958213], [1.74314094E12, 31.319544932129517], [1.7431404E12, 26.553417273112153], [1.74314088E12, 27.711906878991673], [1.74314058E12, 30.330403804122785], [1.74314052E12, 24.13804604202928], [1.743141E12, 27.177619624470015], [1.7431407E12, 27.491132235734533], [1.74314064E12, 26.907727525893687], [1.74314082E12, 32.24288862692816]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.743141E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 23.283781764624326, "minX": 1.7431404E12, "maxY": 30.434800881553965, "series": [{"data": [[1.74314076E12, 25.31046785253412], [1.74314046E12, 28.57143441354011], [1.74314094E12, 30.30071034737663], [1.7431404E12, 26.045258172576997], [1.74314088E12, 26.88666033465353], [1.74314058E12, 29.215246177706387], [1.74314052E12, 23.283781764624326], [1.743141E12, 26.810266505148327], [1.7431407E12, 26.891287873008128], [1.74314064E12, 26.386207671829343], [1.74314082E12, 30.434800881553965]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.743141E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 14.437164476984062, "minX": 1.7431404E12, "maxY": 19.720265491260864, "series": [{"data": [[1.74314076E12, 15.888737633157104], [1.74314046E12, 19.58188010819583], [1.74314094E12, 19.215468662187412], [1.7431404E12, 17.668591890955167], [1.74314088E12, 17.061812909223566], [1.74314058E12, 18.470161286194564], [1.74314052E12, 14.437164476984062], [1.743141E12, 16.901196244700134], [1.7431407E12, 16.74183540086806], [1.74314064E12, 16.279316106549132], [1.74314082E12, 19.720265491260864]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.743141E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7431404E12, "maxY": 1616.0, "series": [{"data": [[1.74314076E12, 756.0], [1.74314046E12, 1483.0], [1.74314094E12, 858.0], [1.7431404E12, 1000.0], [1.74314088E12, 1202.0], [1.74314058E12, 1307.0], [1.74314052E12, 1360.0], [1.743141E12, 416.0], [1.7431407E12, 819.0], [1.74314064E12, 997.0], [1.74314082E12, 1616.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74314076E12, 0.0], [1.74314046E12, 0.0], [1.74314094E12, 0.0], [1.7431404E12, 0.0], [1.74314088E12, 0.0], [1.74314058E12, 0.0], [1.74314052E12, 0.0], [1.743141E12, 0.0], [1.7431407E12, 0.0], [1.74314064E12, 0.0], [1.74314082E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74314076E12, 58.0], [1.74314046E12, 58.0], [1.74314094E12, 45.0], [1.7431404E12, 101.0], [1.74314088E12, 49.0], [1.74314058E12, 43.0], [1.74314052E12, 61.0], [1.743141E12, 58.0], [1.7431407E12, 63.0], [1.74314064E12, 50.900000000001455], [1.74314082E12, 77.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74314076E12, 167.9900000000016], [1.74314046E12, 907.9900000000016], [1.74314094E12, 153.0], [1.7431404E12, 292.0], [1.74314088E12, 130.9800000000032], [1.74314058E12, 115.9900000000016], [1.74314052E12, 131.0], [1.743141E12, 155.0], [1.7431407E12, 147.0], [1.74314064E12, 135.0], [1.74314082E12, 532.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74314076E12, 18.0], [1.74314046E12, 18.0], [1.74314094E12, 15.0], [1.7431404E12, 31.0], [1.74314088E12, 17.0], [1.74314058E12, 16.0], [1.74314052E12, 17.0], [1.743141E12, 18.0], [1.7431407E12, 23.0], [1.74314064E12, 17.0], [1.74314082E12, 20.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.74314076E12, 91.0], [1.74314046E12, 99.0], [1.74314094E12, 70.95000000000073], [1.7431404E12, 131.0], [1.74314088E12, 65.0], [1.74314058E12, 59.0], [1.74314052E12, 84.0], [1.743141E12, 77.0], [1.7431407E12, 86.0], [1.74314064E12, 73.0], [1.74314082E12, 130.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.743141E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 188.0, "maxY": 65.0, "series": [{"data": [[188.0, 4.0], [428.0, 3.0], [451.0, 7.0], [662.0, 2.0], [895.0, 2.0], [1127.0, 1.0], [1362.0, 2.0], [1593.0, 2.0], [1828.0, 2.0], [2168.0, 7.0], [2372.0, 13.0], [2364.0, 20.0], [2380.0, 13.0], [2338.0, 13.0], [2514.0, 22.0], [2462.0, 22.0], [2522.0, 21.0], [2500.0, 17.0], [2530.0, 18.0], [2550.0, 34.0], [2440.0, 25.0], [2444.0, 15.0], [2564.0, 18.0], [2608.0, 22.0], [2600.0, 20.0], [2594.0, 41.0], [2616.0, 24.0], [2584.0, 12.0], [2664.0, 45.0], [2678.0, 28.0], [2650.0, 25.0], [2640.0, 15.0], [2644.0, 16.0], [2672.0, 13.0], [2610.0, 9.0], [2694.0, 22.0], [2750.0, 23.0], [2712.0, 24.0], [2744.0, 26.0], [2728.0, 47.0], [2734.0, 18.0], [2746.0, 14.0], [2792.0, 13.0], [2808.0, 14.0], [2698.0, 20.0], [2878.0, 29.0], [2864.0, 11.0], [2870.0, 25.0], [2938.0, 21.0], [2882.0, 20.0], [3050.0, 32.0], [3040.0, 13.0], [3020.0, 16.0], [3036.0, 23.0], [3026.0, 22.0], [3014.0, 25.0], [3060.0, 25.0], [3066.0, 25.0], [2992.0, 20.0], [2980.0, 24.0], [2998.0, 35.0], [3004.0, 22.0], [2958.0, 22.0], [3008.0, 13.0], [3070.0, 23.0], [3010.0, 11.0], [3012.0, 14.0], [3100.0, 35.0], [3180.0, 10.0], [3094.0, 18.0], [3174.0, 20.0], [3172.0, 20.0], [3168.0, 24.0], [3178.0, 20.0], [3072.0, 18.0], [3082.0, 16.0], [3088.0, 27.0], [3078.0, 28.0], [3090.0, 14.0], [3140.0, 16.0], [3130.0, 18.0], [3120.0, 23.0], [3128.0, 28.0], [3124.0, 20.0], [3122.0, 19.0], [3108.0, 22.0], [3152.0, 34.0], [3142.0, 31.0], [3144.0, 13.0], [3148.0, 27.0], [3154.0, 19.0], [3156.0, 13.0], [3166.0, 17.0], [3158.0, 15.0], [3162.0, 26.0], [3160.0, 32.0], [3184.0, 16.0], [3182.0, 27.0], [3186.0, 46.0], [3192.0, 17.0], [3194.0, 18.0], [3196.0, 26.0], [3198.0, 15.0], [3136.0, 14.0], [3188.0, 32.0], [3190.0, 33.0], [3214.0, 13.0], [3206.0, 8.0], [3210.0, 18.0], [3212.0, 19.0], [3208.0, 15.0], [3260.0, 19.0], [3262.0, 18.0], [3204.0, 26.0], [3202.0, 19.0], [3240.0, 16.0], [3232.0, 18.0], [3236.0, 23.0], [3238.0, 10.0], [3242.0, 13.0], [3244.0, 29.5], [3246.0, 33.0], [3248.0, 19.0], [3216.0, 18.0], [3272.0, 17.0], [3318.0, 21.0], [3322.0, 20.0], [3324.0, 14.0], [3268.0, 17.0], [3266.0, 25.0], [3264.0, 28.5], [3326.0, 27.0], [3286.0, 20.0], [3290.0, 17.0], [3292.0, 15.0], [3294.0, 15.0], [3288.0, 42.0], [3282.0, 16.0], [3278.0, 21.0], [3274.0, 12.0], [3276.0, 37.0], [3230.0, 18.0], [3226.0, 22.0], [3228.0, 18.0], [3298.0, 25.0], [3224.0, 17.0], [3222.0, 22.0], [3220.0, 15.0], [3218.0, 18.0], [3300.0, 17.0], [3302.0, 17.0], [3304.0, 18.0], [3314.0, 18.0], [3316.0, 15.0], [3312.0, 16.0], [3310.0, 23.0], [3306.0, 12.0], [3254.0, 15.0], [3258.0, 19.0], [3256.0, 18.0], [3250.0, 17.0], [3350.0, 18.0], [3372.0, 18.0], [3388.0, 30.5], [3330.0, 32.0], [3390.0, 15.0], [3380.0, 25.0], [3382.0, 25.0], [3378.0, 18.0], [3386.0, 27.0], [3384.0, 15.0], [3414.0, 13.0], [3444.0, 14.0], [3434.0, 33.0], [3436.0, 18.0], [3428.0, 21.0], [3432.0, 14.0], [3426.0, 12.0], [3402.0, 20.0], [3448.0, 11.0], [3396.0, 12.0], [3342.0, 17.0], [3348.0, 10.0], [3336.0, 23.0], [3354.0, 14.0], [3356.0, 13.0], [3352.0, 21.0], [3366.0, 37.0], [3360.0, 25.0], [3364.0, 15.0], [3362.0, 15.0], [3368.0, 17.0], [3370.0, 17.0], [3408.0, 24.0], [3468.0, 16.0], [3516.0, 15.0], [3482.0, 16.0], [3484.0, 25.0], [3498.0, 14.0], [3490.0, 10.0], [3502.0, 21.0], [3474.0, 15.0], [3470.0, 15.0], [3480.0, 14.0], [3458.0, 12.0], [3460.0, 12.0], [3672.0, 18.0], [3676.0, 10.0], [3652.0, 24.0], [3606.0, 12.0], [3608.0, 10.0], [2053.0, 3.0], [2351.0, 31.0], [2357.0, 26.0], [2421.0, 27.0], [2513.0, 28.0], [2559.0, 22.0], [2457.0, 27.0], [2471.0, 21.0], [2467.0, 12.0], [2617.0, 21.0], [2611.0, 13.0], [2605.0, 13.0], [2607.0, 11.0], [2561.0, 17.0], [2563.0, 29.0], [2613.0, 18.0], [2579.0, 15.0], [2667.0, 20.0], [2657.0, 12.0], [2677.0, 14.0], [2575.0, 13.0], [2565.0, 17.0], [2715.0, 11.0], [2689.0, 65.0], [2747.0, 35.0], [2697.0, 20.0], [2789.0, 15.0], [2787.0, 24.0], [2763.0, 17.0], [2781.0, 20.0], [2761.0, 23.0], [2703.0, 12.0], [2841.0, 21.0], [2843.0, 18.0], [2837.0, 20.0], [2855.0, 21.0], [2833.0, 19.0], [2827.0, 22.0], [2893.0, 21.0], [2907.0, 25.0], [2901.0, 9.0], [2895.0, 17.0], [2935.0, 12.0], [2929.0, 16.0], [2941.0, 8.0], [2887.0, 19.0], [3017.0, 12.0], [3047.0, 15.0], [3025.0, 14.0], [3019.0, 22.0], [3037.0, 18.0], [3039.0, 27.0], [3029.0, 18.0], [3069.0, 47.0], [3055.0, 10.0], [3057.0, 14.0], [3065.0, 13.0], [2989.0, 19.0], [3001.0, 11.0], [3005.0, 16.0], [3007.0, 25.0], [3041.0, 18.0], [2955.0, 16.0], [2957.0, 25.0], [3009.0, 24.0], [3101.0, 20.0], [3099.0, 28.0], [3103.0, 11.0], [3173.0, 14.0], [3171.0, 16.0], [3169.0, 21.0], [3177.0, 33.0], [3179.0, 12.0], [3075.0, 22.0], [3131.0, 19.0], [3135.0, 40.0], [3083.0, 17.0], [3077.0, 9.0], [3091.0, 21.0], [3093.0, 16.0], [3121.0, 16.0], [3117.0, 27.0], [3127.0, 28.0], [3123.0, 19.0], [3111.0, 24.0], [3105.0, 29.0], [3107.0, 25.0], [3115.0, 33.0], [3113.0, 19.0], [3149.0, 17.0], [3151.0, 15.0], [3155.0, 12.0], [3167.0, 35.0], [3157.0, 19.0], [3163.0, 25.0], [3153.0, 22.0], [3187.0, 18.0], [3183.0, 15.0], [3181.0, 25.5], [3137.0, 23.0], [3139.0, 28.0], [3143.0, 17.0], [3191.0, 18.0], [3193.0, 11.0], [3195.0, 16.0], [3197.0, 31.0], [3199.0, 23.0], [3207.0, 27.0], [3299.0, 15.0], [3249.0, 14.0], [3215.0, 16.0], [3209.0, 23.0], [3211.0, 15.0], [3213.0, 14.0], [3261.0, 12.0], [3205.0, 20.0], [3263.0, 13.0], [3203.0, 43.0], [3259.0, 16.0], [3233.0, 18.0], [3235.0, 17.0], [3239.0, 17.0], [3241.0, 36.0], [3243.0, 15.0], [3247.0, 12.0], [3245.0, 14.0], [3321.0, 19.0], [3319.0, 16.0], [3271.0, 12.0], [3267.0, 22.0], [3327.0, 13.0], [3325.0, 38.0], [3295.0, 25.0], [3293.0, 20.0], [3289.0, 15.0], [3285.0, 25.0], [3283.0, 17.0], [3277.0, 15.0], [3279.0, 34.0], [3281.0, 27.0], [3273.0, 20.0], [3275.0, 16.0], [3317.0, 12.0], [3225.0, 23.0], [3227.0, 28.0], [3231.0, 13.0], [3217.0, 19.0], [3221.0, 25.0], [3223.0, 24.0], [3305.0, 23.0], [3301.0, 16.0], [3303.0, 16.0], [3307.0, 24.0], [3309.0, 14.0], [3311.0, 18.0], [3315.0, 37.0], [3251.0, 17.0], [3257.0, 18.0], [3351.0, 22.0], [3333.0, 17.0], [3359.0, 15.0], [3389.0, 14.0], [3329.0, 16.0], [3391.0, 26.0], [3377.0, 9.0], [3373.0, 16.0], [3387.0, 15.0], [3415.0, 16.0], [3411.0, 19.0], [3421.0, 15.0], [3423.0, 24.0], [3433.0, 15.0], [3437.0, 13.0], [3439.0, 17.0], [3443.0, 19.0], [3429.0, 16.0], [3431.0, 17.0], [3407.0, 18.0], [3405.0, 21.0], [3403.0, 14.0], [3395.0, 24.0], [3397.0, 26.0], [3347.0, 17.0], [3343.0, 15.0], [3339.0, 20.0], [3341.0, 9.0], [3345.0, 22.0], [3355.0, 17.0], [3353.0, 17.0], [3357.0, 14.0], [3365.0, 14.0], [3363.0, 29.0], [3367.0, 21.0], [3371.0, 14.0], [3481.0, 20.0], [3571.0, 17.0], [3523.0, 9.0], [3487.0, 18.0], [3501.0, 15.0], [3457.0, 44.0], [3477.0, 18.0], [3475.0, 14.0], [3479.0, 12.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3676.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 188.0, "maxY": 65.0, "series": [{"data": [[188.0, 4.0], [428.0, 3.0], [451.0, 7.0], [662.0, 2.0], [895.0, 2.0], [1127.0, 1.0], [1362.0, 2.0], [1593.0, 2.0], [1828.0, 2.0], [2168.0, 7.0], [2372.0, 13.0], [2364.0, 20.0], [2380.0, 13.0], [2338.0, 13.0], [2514.0, 22.0], [2462.0, 22.0], [2522.0, 21.0], [2500.0, 17.0], [2530.0, 18.0], [2550.0, 34.0], [2440.0, 25.0], [2444.0, 14.0], [2564.0, 18.0], [2608.0, 22.0], [2600.0, 20.0], [2594.0, 41.0], [2616.0, 24.0], [2584.0, 12.0], [2664.0, 45.0], [2678.0, 28.0], [2650.0, 25.0], [2640.0, 15.0], [2644.0, 16.0], [2672.0, 13.0], [2610.0, 9.0], [2694.0, 22.0], [2750.0, 23.0], [2712.0, 24.0], [2744.0, 26.0], [2728.0, 46.0], [2734.0, 18.0], [2746.0, 14.0], [2792.0, 13.0], [2808.0, 14.0], [2698.0, 20.0], [2878.0, 29.0], [2864.0, 11.0], [2870.0, 25.0], [2938.0, 21.0], [2882.0, 19.5], [3050.0, 32.0], [3040.0, 13.0], [3020.0, 15.0], [3036.0, 23.0], [3026.0, 22.0], [3014.0, 25.0], [3060.0, 25.0], [3066.0, 25.0], [2992.0, 20.0], [2980.0, 24.0], [2998.0, 35.0], [3004.0, 22.0], [2958.0, 22.0], [3008.0, 13.0], [3070.0, 23.0], [3010.0, 11.0], [3012.0, 14.0], [3100.0, 35.0], [3180.0, 10.0], [3094.0, 17.0], [3174.0, 20.0], [3172.0, 20.0], [3168.0, 24.0], [3178.0, 20.0], [3072.0, 18.0], [3082.0, 16.0], [3088.0, 26.0], [3078.0, 28.0], [3090.0, 14.0], [3140.0, 16.0], [3130.0, 18.0], [3120.0, 23.0], [3128.0, 28.0], [3124.0, 20.0], [3122.0, 19.0], [3108.0, 22.0], [3152.0, 34.0], [3142.0, 31.0], [3144.0, 13.0], [3148.0, 27.0], [3154.0, 19.0], [3156.0, 13.0], [3166.0, 17.0], [3158.0, 15.0], [3162.0, 26.0], [3160.0, 32.0], [3184.0, 16.0], [3182.0, 27.0], [3186.0, 45.5], [3192.0, 17.0], [3194.0, 18.0], [3196.0, 26.0], [3198.0, 15.0], [3136.0, 14.0], [3188.0, 32.0], [3190.0, 33.0], [3214.0, 13.0], [3206.0, 8.0], [3210.0, 18.0], [3212.0, 19.0], [3208.0, 14.0], [3260.0, 19.0], [3262.0, 18.0], [3204.0, 25.0], [3202.0, 19.0], [3240.0, 16.0], [3232.0, 18.0], [3236.0, 23.0], [3238.0, 10.0], [3242.0, 13.0], [3244.0, 29.0], [3246.0, 33.0], [3248.0, 19.0], [3216.0, 18.0], [3272.0, 17.0], [3318.0, 21.0], [3322.0, 20.0], [3324.0, 14.0], [3268.0, 17.0], [3266.0, 25.0], [3264.0, 28.0], [3326.0, 27.0], [3286.0, 20.0], [3290.0, 17.0], [3292.0, 15.0], [3294.0, 15.0], [3288.0, 42.0], [3282.0, 16.0], [3278.0, 21.0], [3274.0, 12.0], [3276.0, 37.0], [3230.0, 18.0], [3226.0, 22.0], [3228.0, 17.0], [3298.0, 25.0], [3224.0, 17.0], [3222.0, 22.0], [3220.0, 15.0], [3218.0, 18.0], [3300.0, 17.0], [3302.0, 17.0], [3304.0, 18.0], [3314.0, 18.0], [3316.0, 15.0], [3312.0, 16.0], [3310.0, 23.0], [3306.0, 12.0], [3254.0, 15.0], [3258.0, 19.0], [3256.0, 18.0], [3250.0, 17.0], [3350.0, 18.0], [3372.0, 18.0], [3388.0, 30.0], [3330.0, 32.0], [3390.0, 15.0], [3380.0, 24.0], [3382.0, 25.0], [3378.0, 18.0], [3386.0, 27.0], [3384.0, 14.0], [3414.0, 13.0], [3444.0, 13.0], [3434.0, 32.0], [3436.0, 17.0], [3428.0, 21.0], [3432.0, 14.0], [3426.0, 12.0], [3402.0, 19.0], [3448.0, 11.0], [3396.0, 12.0], [3342.0, 16.0], [3348.0, 10.0], [3336.0, 22.0], [3354.0, 14.0], [3356.0, 13.0], [3352.0, 21.0], [3366.0, 37.0], [3360.0, 25.0], [3364.0, 15.0], [3362.0, 15.0], [3368.0, 17.0], [3370.0, 16.0], [3408.0, 23.0], [3468.0, 16.0], [3516.0, 15.0], [3482.0, 16.0], [3484.0, 25.0], [3498.0, 13.0], [3490.0, 10.0], [3502.0, 21.0], [3474.0, 15.0], [3470.0, 15.0], [3480.0, 14.0], [3458.0, 12.0], [3460.0, 12.0], [3672.0, 17.0], [3676.0, 10.0], [3652.0, 24.0], [3606.0, 12.0], [3608.0, 10.0], [2053.0, 3.0], [2351.0, 30.0], [2357.0, 26.0], [2421.0, 27.0], [2513.0, 28.0], [2559.0, 22.0], [2457.0, 27.0], [2471.0, 20.0], [2467.0, 12.0], [2617.0, 21.0], [2611.0, 13.0], [2605.0, 13.0], [2607.0, 11.0], [2561.0, 17.0], [2563.0, 29.0], [2613.0, 18.0], [2579.0, 15.0], [2667.0, 20.0], [2657.0, 12.0], [2677.0, 14.0], [2575.0, 13.0], [2565.0, 17.0], [2715.0, 11.0], [2689.0, 65.0], [2747.0, 35.0], [2697.0, 20.0], [2789.0, 15.0], [2787.0, 24.0], [2763.0, 17.0], [2781.0, 20.0], [2761.0, 23.0], [2703.0, 12.0], [2841.0, 21.0], [2843.0, 18.0], [2837.0, 20.0], [2855.0, 21.0], [2833.0, 19.0], [2827.0, 22.0], [2893.0, 21.0], [2907.0, 25.0], [2901.0, 9.0], [2895.0, 17.0], [2935.0, 12.0], [2929.0, 16.0], [2941.0, 8.0], [2887.0, 19.0], [3017.0, 12.0], [3047.0, 15.0], [3025.0, 14.0], [3019.0, 22.0], [3037.0, 18.0], [3039.0, 27.0], [3029.0, 18.0], [3069.0, 46.0], [3055.0, 10.0], [3057.0, 14.0], [3065.0, 13.0], [2989.0, 19.0], [3001.0, 11.0], [3005.0, 15.0], [3007.0, 24.0], [3041.0, 18.0], [2955.0, 16.0], [2957.0, 25.0], [3009.0, 23.0], [3101.0, 20.0], [3099.0, 28.0], [3103.0, 11.0], [3173.0, 14.0], [3171.0, 16.0], [3169.0, 21.0], [3177.0, 33.0], [3179.0, 12.0], [3075.0, 21.0], [3131.0, 19.0], [3135.0, 39.0], [3083.0, 17.0], [3077.0, 9.0], [3091.0, 21.0], [3093.0, 16.0], [3121.0, 15.0], [3117.0, 27.0], [3127.0, 27.0], [3123.0, 19.0], [3111.0, 24.0], [3105.0, 28.0], [3107.0, 25.0], [3115.0, 30.0], [3113.0, 18.0], [3149.0, 17.0], [3151.0, 15.0], [3155.0, 12.0], [3167.0, 35.0], [3157.0, 19.0], [3163.0, 25.0], [3153.0, 22.0], [3187.0, 18.0], [3183.0, 15.0], [3181.0, 25.0], [3137.0, 23.0], [3139.0, 28.0], [3143.0, 17.0], [3191.0, 18.0], [3193.0, 11.0], [3195.0, 16.0], [3197.0, 31.0], [3199.0, 23.0], [3207.0, 27.0], [3299.0, 15.0], [3249.0, 14.0], [3215.0, 15.0], [3209.0, 23.0], [3211.0, 15.0], [3213.0, 14.0], [3261.0, 12.0], [3205.0, 20.0], [3263.0, 13.0], [3203.0, 43.0], [3259.0, 16.0], [3233.0, 18.0], [3235.0, 17.0], [3239.0, 17.0], [3241.0, 35.0], [3243.0, 15.0], [3247.0, 12.0], [3245.0, 14.0], [3321.0, 18.0], [3319.0, 16.0], [3271.0, 12.0], [3267.0, 21.0], [3327.0, 12.0], [3325.0, 38.0], [3295.0, 25.0], [3293.0, 20.0], [3289.0, 15.0], [3285.0, 25.0], [3283.0, 17.0], [3277.0, 15.0], [3279.0, 34.0], [3281.0, 27.0], [3273.0, 20.0], [3275.0, 16.0], [3317.0, 12.0], [3225.0, 22.0], [3227.0, 28.0], [3231.0, 13.0], [3217.0, 19.0], [3221.0, 25.0], [3223.0, 24.0], [3305.0, 22.0], [3301.0, 16.0], [3303.0, 16.0], [3307.0, 24.0], [3309.0, 14.0], [3311.0, 18.0], [3315.0, 37.0], [3251.0, 17.0], [3257.0, 18.0], [3351.0, 22.0], [3333.0, 16.0], [3359.0, 15.0], [3389.0, 13.0], [3329.0, 16.0], [3391.0, 26.0], [3377.0, 9.0], [3373.0, 16.0], [3387.0, 15.0], [3415.0, 16.0], [3411.0, 19.0], [3421.0, 14.0], [3423.0, 24.0], [3433.0, 15.0], [3437.0, 13.0], [3439.0, 17.0], [3443.0, 19.0], [3429.0, 16.0], [3431.0, 17.0], [3407.0, 17.0], [3405.0, 21.0], [3403.0, 14.0], [3395.0, 23.0], [3397.0, 26.0], [3347.0, 17.0], [3343.0, 15.0], [3339.0, 20.0], [3341.0, 9.0], [3345.0, 22.0], [3355.0, 17.0], [3353.0, 17.0], [3357.0, 14.0], [3365.0, 14.0], [3363.0, 29.0], [3367.0, 21.0], [3371.0, 14.0], [3481.0, 20.0], [3571.0, 17.0], [3523.0, 9.0], [3487.0, 18.0], [3501.0, 15.0], [3457.0, 44.0], [3477.0, 18.0], [3475.0, 14.0], [3479.0, 12.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3676.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 219.58333333333334, "minX": 1.7431404E12, "maxY": 3293.383333333333, "series": [{"data": [[1.74314076E12, 3293.383333333333], [1.74314046E12, 2854.15], [1.74314094E12, 3291.65], [1.7431404E12, 2165.8166666666666], [1.74314088E12, 3292.2833333333333], [1.74314058E12, 3255.0666666666666], [1.74314052E12, 3123.5833333333335], [1.743141E12, 219.58333333333334], [1.7431407E12, 3276.2833333333333], [1.74314064E12, 3260.483333333333], [1.74314082E12, 3258.866666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.743141E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 220.13333333333333, "minX": 1.7431404E12, "maxY": 3298.9333333333334, "series": [{"data": [[1.74314076E12, 3293.4166666666665], [1.74314046E12, 2852.85], [1.74314094E12, 3291.8166666666666], [1.7431404E12, 2164.25], [1.74314088E12, 3298.9333333333334], [1.74314058E12, 3256.116666666667], [1.74314052E12, 3123.233333333333], [1.743141E12, 220.13333333333333], [1.7431407E12, 3276.85], [1.74314064E12, 3261.7166666666667], [1.74314082E12, 3251.8333333333335]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.743141E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 220.13333333333333, "minX": 1.7431404E12, "maxY": 3298.9333333333334, "series": [{"data": [[1.74314076E12, 3293.4166666666665], [1.74314046E12, 2852.85], [1.74314094E12, 3291.8166666666666], [1.7431404E12, 2164.25], [1.74314088E12, 3298.9333333333334], [1.74314058E12, 3256.116666666667], [1.74314052E12, 3123.233333333333], [1.743141E12, 220.13333333333333], [1.7431407E12, 3276.85], [1.74314064E12, 3261.7166666666667], [1.74314082E12, 3251.8333333333335]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.743141E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 220.13333333333333, "minX": 1.7431404E12, "maxY": 3298.9333333333334, "series": [{"data": [[1.74314076E12, 3293.4166666666665], [1.74314046E12, 2852.85], [1.74314094E12, 3291.8166666666666], [1.7431404E12, 2164.25], [1.74314088E12, 3298.9333333333334], [1.74314058E12, 3256.116666666667], [1.74314052E12, 3123.233333333333], [1.743141E12, 220.13333333333333], [1.7431407E12, 3276.85], [1.74314064E12, 3261.7166666666667], [1.74314082E12, 3251.8333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.743141E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

