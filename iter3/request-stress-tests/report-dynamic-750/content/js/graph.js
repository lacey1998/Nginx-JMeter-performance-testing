/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 68.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 1.0], [44.9, 1.0], [45.0, 1.0], [45.1, 1.0], [45.2, 1.0], [45.3, 1.0], [45.4, 1.0], [45.5, 1.0], [45.6, 1.0], [45.7, 1.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 1.0], [46.3, 1.0], [46.4, 1.0], [46.5, 1.0], [46.6, 1.0], [46.7, 1.0], [46.8, 1.0], [46.9, 1.0], [47.0, 1.0], [47.1, 1.0], [47.2, 1.0], [47.3, 1.0], [47.4, 1.0], [47.5, 1.0], [47.6, 1.0], [47.7, 1.0], [47.8, 1.0], [47.9, 1.0], [48.0, 1.0], [48.1, 1.0], [48.2, 1.0], [48.3, 1.0], [48.4, 1.0], [48.5, 1.0], [48.6, 1.0], [48.7, 1.0], [48.8, 1.0], [48.9, 1.0], [49.0, 1.0], [49.1, 1.0], [49.2, 1.0], [49.3, 1.0], [49.4, 1.0], [49.5, 1.0], [49.6, 1.0], [49.7, 1.0], [49.8, 1.0], [49.9, 1.0], [50.0, 1.0], [50.1, 1.0], [50.2, 1.0], [50.3, 1.0], [50.4, 1.0], [50.5, 1.0], [50.6, 1.0], [50.7, 1.0], [50.8, 1.0], [50.9, 1.0], [51.0, 1.0], [51.1, 1.0], [51.2, 1.0], [51.3, 1.0], [51.4, 1.0], [51.5, 1.0], [51.6, 1.0], [51.7, 1.0], [51.8, 1.0], [51.9, 1.0], [52.0, 1.0], [52.1, 1.0], [52.2, 1.0], [52.3, 1.0], [52.4, 1.0], [52.5, 1.0], [52.6, 1.0], [52.7, 1.0], [52.8, 1.0], [52.9, 1.0], [53.0, 1.0], [53.1, 1.0], [53.2, 1.0], [53.3, 1.0], [53.4, 1.0], [53.5, 1.0], [53.6, 1.0], [53.7, 1.0], [53.8, 1.0], [53.9, 1.0], [54.0, 1.0], [54.1, 1.0], [54.2, 1.0], [54.3, 1.0], [54.4, 1.0], [54.5, 1.0], [54.6, 1.0], [54.7, 1.0], [54.8, 1.0], [54.9, 1.0], [55.0, 1.0], [55.1, 1.0], [55.2, 1.0], [55.3, 1.0], [55.4, 1.0], [55.5, 1.0], [55.6, 1.0], [55.7, 1.0], [55.8, 1.0], [55.9, 1.0], [56.0, 1.0], [56.1, 1.0], [56.2, 1.0], [56.3, 1.0], [56.4, 1.0], [56.5, 1.0], [56.6, 1.0], [56.7, 1.0], [56.8, 1.0], [56.9, 1.0], [57.0, 1.0], [57.1, 1.0], [57.2, 1.0], [57.3, 1.0], [57.4, 1.0], [57.5, 1.0], [57.6, 1.0], [57.7, 1.0], [57.8, 1.0], [57.9, 1.0], [58.0, 1.0], [58.1, 1.0], [58.2, 1.0], [58.3, 1.0], [58.4, 1.0], [58.5, 1.0], [58.6, 1.0], [58.7, 1.0], [58.8, 1.0], [58.9, 1.0], [59.0, 1.0], [59.1, 1.0], [59.2, 1.0], [59.3, 1.0], [59.4, 1.0], [59.5, 1.0], [59.6, 1.0], [59.7, 1.0], [59.8, 1.0], [59.9, 1.0], [60.0, 1.0], [60.1, 1.0], [60.2, 1.0], [60.3, 1.0], [60.4, 1.0], [60.5, 1.0], [60.6, 1.0], [60.7, 1.0], [60.8, 1.0], [60.9, 1.0], [61.0, 1.0], [61.1, 1.0], [61.2, 1.0], [61.3, 1.0], [61.4, 1.0], [61.5, 1.0], [61.6, 1.0], [61.7, 1.0], [61.8, 1.0], [61.9, 1.0], [62.0, 1.0], [62.1, 1.0], [62.2, 1.0], [62.3, 1.0], [62.4, 1.0], [62.5, 1.0], [62.6, 1.0], [62.7, 1.0], [62.8, 1.0], [62.9, 1.0], [63.0, 1.0], [63.1, 1.0], [63.2, 1.0], [63.3, 1.0], [63.4, 1.0], [63.5, 1.0], [63.6, 1.0], [63.7, 1.0], [63.8, 1.0], [63.9, 1.0], [64.0, 1.0], [64.1, 1.0], [64.2, 1.0], [64.3, 1.0], [64.4, 1.0], [64.5, 1.0], [64.6, 1.0], [64.7, 1.0], [64.8, 1.0], [64.9, 1.0], [65.0, 1.0], [65.1, 1.0], [65.2, 1.0], [65.3, 1.0], [65.4, 1.0], [65.5, 1.0], [65.6, 1.0], [65.7, 1.0], [65.8, 1.0], [65.9, 1.0], [66.0, 1.0], [66.1, 1.0], [66.2, 1.0], [66.3, 1.0], [66.4, 1.0], [66.5, 1.0], [66.6, 1.0], [66.7, 1.0], [66.8, 1.0], [66.9, 1.0], [67.0, 1.0], [67.1, 1.0], [67.2, 1.0], [67.3, 1.0], [67.4, 1.0], [67.5, 1.0], [67.6, 1.0], [67.7, 1.0], [67.8, 1.0], [67.9, 1.0], [68.0, 1.0], [68.1, 1.0], [68.2, 1.0], [68.3, 1.0], [68.4, 1.0], [68.5, 1.0], [68.6, 1.0], [68.7, 1.0], [68.8, 1.0], [68.9, 1.0], [69.0, 1.0], [69.1, 1.0], [69.2, 1.0], [69.3, 1.0], [69.4, 1.0], [69.5, 1.0], [69.6, 1.0], [69.7, 1.0], [69.8, 1.0], [69.9, 1.0], [70.0, 1.0], [70.1, 1.0], [70.2, 1.0], [70.3, 1.0], [70.4, 1.0], [70.5, 1.0], [70.6, 1.0], [70.7, 1.0], [70.8, 1.0], [70.9, 1.0], [71.0, 1.0], [71.1, 1.0], [71.2, 1.0], [71.3, 1.0], [71.4, 1.0], [71.5, 1.0], [71.6, 1.0], [71.7, 1.0], [71.8, 1.0], [71.9, 1.0], [72.0, 1.0], [72.1, 1.0], [72.2, 1.0], [72.3, 1.0], [72.4, 1.0], [72.5, 1.0], [72.6, 1.0], [72.7, 1.0], [72.8, 1.0], [72.9, 1.0], [73.0, 1.0], [73.1, 1.0], [73.2, 1.0], [73.3, 1.0], [73.4, 1.0], [73.5, 1.0], [73.6, 1.0], [73.7, 1.0], [73.8, 1.0], [73.9, 1.0], [74.0, 1.0], [74.1, 1.0], [74.2, 1.0], [74.3, 1.0], [74.4, 1.0], [74.5, 1.0], [74.6, 1.0], [74.7, 1.0], [74.8, 1.0], [74.9, 1.0], [75.0, 1.0], [75.1, 1.0], [75.2, 1.0], [75.3, 1.0], [75.4, 1.0], [75.5, 1.0], [75.6, 1.0], [75.7, 1.0], [75.8, 1.0], [75.9, 1.0], [76.0, 1.0], [76.1, 1.0], [76.2, 1.0], [76.3, 1.0], [76.4, 1.0], [76.5, 1.0], [76.6, 1.0], [76.7, 1.0], [76.8, 1.0], [76.9, 1.0], [77.0, 1.0], [77.1, 1.0], [77.2, 1.0], [77.3, 1.0], [77.4, 1.0], [77.5, 1.0], [77.6, 1.0], [77.7, 1.0], [77.8, 1.0], [77.9, 1.0], [78.0, 1.0], [78.1, 1.0], [78.2, 1.0], [78.3, 1.0], [78.4, 1.0], [78.5, 1.0], [78.6, 1.0], [78.7, 1.0], [78.8, 1.0], [78.9, 1.0], [79.0, 1.0], [79.1, 1.0], [79.2, 1.0], [79.3, 1.0], [79.4, 1.0], [79.5, 1.0], [79.6, 1.0], [79.7, 1.0], [79.8, 1.0], [79.9, 1.0], [80.0, 1.0], [80.1, 1.0], [80.2, 1.0], [80.3, 1.0], [80.4, 1.0], [80.5, 1.0], [80.6, 1.0], [80.7, 1.0], [80.8, 1.0], [80.9, 1.0], [81.0, 1.0], [81.1, 1.0], [81.2, 1.0], [81.3, 1.0], [81.4, 1.0], [81.5, 1.0], [81.6, 1.0], [81.7, 1.0], [81.8, 1.0], [81.9, 1.0], [82.0, 1.0], [82.1, 1.0], [82.2, 1.0], [82.3, 1.0], [82.4, 1.0], [82.5, 1.0], [82.6, 1.0], [82.7, 1.0], [82.8, 1.0], [82.9, 1.0], [83.0, 1.0], [83.1, 1.0], [83.2, 1.0], [83.3, 1.0], [83.4, 1.0], [83.5, 1.0], [83.6, 1.0], [83.7, 1.0], [83.8, 1.0], [83.9, 1.0], [84.0, 1.0], [84.1, 1.0], [84.2, 1.0], [84.3, 1.0], [84.4, 1.0], [84.5, 1.0], [84.6, 1.0], [84.7, 1.0], [84.8, 1.0], [84.9, 1.0], [85.0, 1.0], [85.1, 1.0], [85.2, 1.0], [85.3, 1.0], [85.4, 1.0], [85.5, 1.0], [85.6, 1.0], [85.7, 1.0], [85.8, 1.0], [85.9, 1.0], [86.0, 1.0], [86.1, 1.0], [86.2, 1.0], [86.3, 1.0], [86.4, 1.0], [86.5, 1.0], [86.6, 1.0], [86.7, 1.0], [86.8, 1.0], [86.9, 1.0], [87.0, 1.0], [87.1, 1.0], [87.2, 1.0], [87.3, 1.0], [87.4, 1.0], [87.5, 1.0], [87.6, 1.0], [87.7, 1.0], [87.8, 1.0], [87.9, 1.0], [88.0, 1.0], [88.1, 1.0], [88.2, 1.0], [88.3, 1.0], [88.4, 1.0], [88.5, 1.0], [88.6, 1.0], [88.7, 1.0], [88.8, 1.0], [88.9, 1.0], [89.0, 1.0], [89.1, 2.0], [89.2, 2.0], [89.3, 2.0], [89.4, 2.0], [89.5, 2.0], [89.6, 2.0], [89.7, 2.0], [89.8, 2.0], [89.9, 2.0], [90.0, 2.0], [90.1, 2.0], [90.2, 2.0], [90.3, 2.0], [90.4, 2.0], [90.5, 2.0], [90.6, 2.0], [90.7, 2.0], [90.8, 2.0], [90.9, 2.0], [91.0, 2.0], [91.1, 2.0], [91.2, 2.0], [91.3, 2.0], [91.4, 2.0], [91.5, 2.0], [91.6, 2.0], [91.7, 2.0], [91.8, 2.0], [91.9, 2.0], [92.0, 2.0], [92.1, 2.0], [92.2, 2.0], [92.3, 2.0], [92.4, 2.0], [92.5, 2.0], [92.6, 2.0], [92.7, 2.0], [92.8, 2.0], [92.9, 2.0], [93.0, 2.0], [93.1, 2.0], [93.2, 2.0], [93.3, 2.0], [93.4, 2.0], [93.5, 2.0], [93.6, 2.0], [93.7, 2.0], [93.8, 2.0], [93.9, 2.0], [94.0, 2.0], [94.1, 2.0], [94.2, 2.0], [94.3, 2.0], [94.4, 2.0], [94.5, 2.0], [94.6, 2.0], [94.7, 2.0], [94.8, 2.0], [94.9, 2.0], [95.0, 2.0], [95.1, 2.0], [95.2, 2.0], [95.3, 2.0], [95.4, 2.0], [95.5, 2.0], [95.6, 2.0], [95.7, 2.0], [95.8, 2.0], [95.9, 2.0], [96.0, 2.0], [96.1, 2.0], [96.2, 2.0], [96.3, 2.0], [96.4, 2.0], [96.5, 2.0], [96.6, 2.0], [96.7, 2.0], [96.8, 2.0], [96.9, 2.0], [97.0, 2.0], [97.1, 2.0], [97.2, 2.0], [97.3, 2.0], [97.4, 2.0], [97.5, 2.0], [97.6, 2.0], [97.7, 2.0], [97.8, 2.0], [97.9, 2.0], [98.0, 2.0], [98.1, 2.0], [98.2, 2.0], [98.3, 2.0], [98.4, 2.0], [98.5, 2.0], [98.6, 2.0], [98.7, 2.0], [98.8, 2.0], [98.9, 2.0], [99.0, 2.0], [99.1, 2.0], [99.2, 2.0], [99.3, 2.0], [99.4, 2.0], [99.5, 3.0], [99.6, 3.0], [99.7, 3.0], [99.8, 3.0], [99.9, 3.0]], "isOverall": false, "label": "GET /test.php", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 213324.0, "minX": 0.0, "maxY": 213324.0, "series": [{"data": [[0.0, 213324.0]], "isOverall": false, "label": "GET /test.php", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4.9E-324, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 12110.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 201214.0, "series": [{"data": [[0.0, 201214.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 12110.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 232.5523809523809, "minX": 1.74321438E12, "maxY": 750.0, "series": [{"data": [[1.74321474E12, 750.0], [1.74321456E12, 750.0], [1.74321462E12, 750.0], [1.74321492E12, 750.0], [1.74321444E12, 669.2969563160368], [1.74321498E12, 725.0398018032668], [1.7432145E12, 750.0], [1.7432148E12, 750.0], [1.74321486E12, 750.0], [1.74321438E12, 232.5523809523809], [1.74321468E12, 750.0]], "isOverall": false, "label": "PHP Stress Group (750 Users)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74321498E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 33.25, "series": [{"data": [[2.0, 1.0], [3.0, 1.0], [4.0, 1.0], [5.0, 1.0], [6.0, 1.0], [7.0, 2.0], [8.0, 2.0], [9.0, 1.0], [10.0, 1.0], [11.0, 1.0], [12.0, 1.0], [13.0, 1.0], [14.0, 1.0], [15.0, 1.0], [16.0, 1.0], [17.0, 0.0], [18.0, 1.0], [19.0, 0.0], [20.0, 0.0], [21.0, 1.0], [22.0, 33.25], [23.0, 0.0], [24.0, 2.0], [25.0, 1.0], [26.0, 2.5], [27.0, 2.0], [28.0, 1.0], [29.0, 2.5], [30.0, 1.0], [31.0, 2.0], [32.0, 3.333333333333333], [33.0, 2.0], [34.0, 5.0], [35.0, 2.0], [37.0, 1.0], [36.0, 1.0], [38.0, 3.0], [39.0, 2.0], [41.0, 2.5], [40.0, 1.0], [43.0, 1.5], [42.0, 1.0], [44.0, 2.0], [45.0, 2.0], [47.0, 2.0], [46.0, 2.0], [48.0, 3.0], [49.0, 1.0], [50.0, 1.6666666666666667], [51.0, 2.25], [52.0, 2.0], [53.0, 2.0], [54.0, 3.0], [55.0, 2.25], [56.0, 2.0], [57.0, 2.5], [58.0, 2.3333333333333335], [59.0, 1.6666666666666667], [61.0, 3.0], [60.0, 1.0], [62.0, 3.0], [63.0, 1.5], [64.0, 1.25], [65.0, 2.0], [67.0, 0.0], [66.0, 1.0], [68.0, 2.0], [69.0, 1.75], [70.0, 2.0], [71.0, 2.0], [72.0, 1.7777777777777777], [73.0, 1.5], [75.0, 2.3333333333333335], [74.0, 0.0], [76.0, 1.8333333333333333], [77.0, 2.0], [78.0, 1.8333333333333333], [79.0, 1.4], [80.0, 2.0], [81.0, 1.5], [82.0, 1.8333333333333333], [83.0, 2.0], [84.0, 2.2], [85.0, 1.75], [86.0, 1.8333333333333333], [87.0, 1.0], [88.0, 2.0], [89.0, 1.3333333333333335], [90.0, 1.8], [91.0, 1.0], [92.0, 1.5], [93.0, 1.0], [94.0, 1.4], [95.0, 1.25], [96.0, 1.6666666666666665], [97.0, 1.2], [98.0, 1.0], [99.0, 1.2], [100.0, 1.3333333333333333], [101.0, 2.5], [102.0, 1.3333333333333333], [103.0, 2.3333333333333335], [104.0, 2.333333333333333], [105.0, 1.8571428571428574], [106.0, 1.0], [107.0, 1.25], [108.0, 1.6], [109.0, 1.0], [110.0, 1.5], [111.0, 1.6666666666666667], [112.0, 1.0], [113.0, 1.6666666666666667], [114.0, 2.5], [115.0, 2.125], [116.0, 1.75], [117.0, 1.75], [118.0, 1.4], [119.0, 1.4], [120.0, 1.6666666666666667], [121.0, 1.8333333333333333], [122.0, 1.625], [123.0, 1.5], [124.0, 1.4285714285714286], [125.0, 1.8], [126.0, 1.7142857142857142], [127.0, 0.75], [128.0, 0.75], [129.0, 6.5], [130.0, 1.6], [131.0, 1.0], [132.0, 1.0], [133.0, 1.3333333333333333], [134.0, 2.0], [135.0, 1.1428571428571428], [136.0, 2.0], [137.0, 1.5714285714285714], [138.0, 1.8333333333333333], [139.0, 1.8], [140.0, 1.1666666666666665], [141.0, 1.5], [142.0, 1.0], [143.0, 1.4], [144.0, 1.3333333333333333], [145.0, 1.0], [146.0, 1.0], [147.0, 2.0], [148.0, 1.5714285714285714], [149.0, 1.25], [150.0, 1.6666666666666667], [151.0, 1.6666666666666667], [152.0, 1.0], [153.0, 1.5714285714285714], [154.0, 1.7142857142857142], [155.0, 1.6666666666666667], [156.0, 1.5], [157.0, 1.6666666666666665], [158.0, 1.25], [159.0, 1.1428571428571428], [160.0, 1.3333333333333333], [161.0, 1.8888888888888888], [162.0, 1.7777777777777777], [163.0, 1.25], [164.0, 1.6923076923076923], [165.0, 1.090909090909091], [166.0, 1.6], [167.0, 1.1111111111111112], [168.0, 1.6363636363636362], [169.0, 1.25], [170.0, 2.6666666666666665], [171.0, 1.4444444444444444], [172.0, 1.5714285714285714], [173.0, 1.75], [174.0, 1.7999999999999998], [175.0, 1.2857142857142856], [176.0, 1.2], [177.0, 1.2222222222222223], [178.0, 1.2], [179.0, 1.1111111111111112], [180.0, 1.3333333333333333], [181.0, 1.8333333333333335], [182.0, 0.8], [183.0, 1.2857142857142858], [184.0, 1.2727272727272727], [185.0, 1.375], [186.0, 0.8333333333333334], [187.0, 1.0833333333333335], [188.0, 1.2], [189.0, 1.25], [190.0, 1.3333333333333333], [191.0, 1.5714285714285714], [192.0, 1.25], [193.0, 1.142857142857143], [194.0, 1.2999999999999998], [195.0, 0.7999999999999999], [196.0, 1.5], [197.0, 1.2727272727272727], [198.0, 1.0], [199.0, 1.5000000000000002], [200.0, 1.6], [201.0, 1.0], [202.0, 1.0], [203.0, 1.3076923076923077], [204.0, 1.1428571428571428], [205.0, 1.076923076923077], [206.0, 1.2], [207.0, 0.7999999999999999], [208.0, 1.2], [209.0, 1.6], [210.0, 1.375], [211.0, 1.1111111111111112], [212.0, 1.0], [213.0, 1.0833333333333335], [214.0, 0.8888888888888888], [215.0, 1.2222222222222223], [216.0, 1.2857142857142856], [217.0, 1.7], [218.0, 1.0], [219.0, 1.1428571428571428], [220.0, 1.5], [221.0, 0.8999999999999999], [222.0, 1.666666666666667], [223.0, 1.0], [224.0, 0.9166666666666665], [225.0, 1.142857142857143], [226.0, 1.1428571428571428], [227.0, 1.5], [228.0, 0.9999999999999999], [229.0, 1.5], [230.0, 1.1111111111111112], [231.0, 1.142857142857143], [232.0, 0.9], [233.0, 1.0], [234.0, 1.4], [235.0, 1.0], [236.0, 2.6666666666666665], [237.0, 1.0833333333333335], [238.0, 1.2], [239.0, 1.3571428571428572], [240.0, 1.4], [241.0, 1.1875000000000002], [242.0, 1.3333333333333333], [243.0, 0.7], [244.0, 0.7777777777777777], [245.0, 2.0], [246.0, 1.4], [247.0, 0.875], [248.0, 1.2727272727272725], [249.0, 1.4545454545454544], [250.0, 1.25], [251.0, 1.0714285714285716], [252.0, 1.2222222222222223], [253.0, 1.5], [254.0, 1.2222222222222223], [255.0, 1.0588235294117647], [257.0, 0.8333333333333333], [256.0, 1.2222222222222223], [258.0, 1.4444444444444444], [259.0, 1.0], [260.0, 0.9], [261.0, 1.7500000000000002], [262.0, 1.2999999999999998], [263.0, 0.9999999999999999], [264.0, 1.2857142857142856], [270.0, 1.0], [271.0, 1.0], [268.0, 1.0], [269.0, 1.090909090909091], [265.0, 2.0], [266.0, 0.8181818181818182], [267.0, 1.0000000000000002], [273.0, 1.5], [272.0, 1.1666666666666667], [274.0, 1.2307692307692306], [275.0, 1.3333333333333333], [276.0, 1.2857142857142858], [277.0, 1.2222222222222223], [278.0, 1.4999999999999998], [279.0, 1.2000000000000002], [280.0, 1.090909090909091], [286.0, 1.105263157894737], [287.0, 1.0], [284.0, 1.2666666666666668], [285.0, 1.1111111111111112], [281.0, 0.8], [282.0, 1.0], [283.0, 1.3125], [289.0, 1.0833333333333335], [288.0, 1.4285714285714286], [290.0, 1.0], [291.0, 1.1875], [292.0, 0.8], [293.0, 1.1818181818181819], [294.0, 0.8749999999999999], [295.0, 1.2631578947368425], [296.0, 0.8888888888888888], [302.0, 0.6666666666666667], [303.0, 1.0833333333333335], [300.0, 0.5], [301.0, 1.0000000000000002], [297.0, 0.9473684210526315], [298.0, 1.4375], [299.0, 1.2000000000000002], [305.0, 1.0], [304.0, 1.2], [306.0, 1.2857142857142858], [307.0, 0.8823529411764706], [308.0, 0.8333333333333333], [309.0, 1.0], [310.0, 1.1538461538461537], [311.0, 1.5000000000000002], [312.0, 1.1], [318.0, 0.6666666666666666], [319.0, 1.6666666666666667], [316.0, 0.9285714285714288], [317.0, 1.153846153846154], [313.0, 1.0588235294117647], [314.0, 1.1818181818181819], [315.0, 0.9999999999999999], [321.0, 1.0000000000000004], [320.0, 1.2142857142857144], [322.0, 1.1666666666666667], [323.0, 1.0], [324.0, 1.0], [325.0, 0.7058823529411765], [326.0, 1.0], [327.0, 1.2000000000000002], [328.0, 0.9047619047619047], [334.0, 1.125], [335.0, 0.8999999999999999], [332.0, 1.2000000000000002], [333.0, 0.8571428571428571], [329.0, 0.7142857142857143], [330.0, 0.6923076923076923], [331.0, 1.0000000000000002], [337.0, 1.0], [336.0, 0.857142857142857], [338.0, 1.153846153846154], [339.0, 1.3529411764705883], [340.0, 1.0909090909090908], [341.0, 0.875], [342.0, 0.7999999999999999], [343.0, 1.2000000000000004], [344.0, 0.8823529411764706], [350.0, 0.75], [351.0, 0.823529411764706], [348.0, 1.4705882352941178], [349.0, 1.0000000000000002], [345.0, 1.1875000000000002], [346.0, 1.2000000000000002], [347.0, 1.4545454545454546], [353.0, 1.2857142857142858], [352.0, 1.3076923076923075], [354.0, 1.0], [355.0, 1.076923076923077], [356.0, 1.3333333333333335], [357.0, 1.0], [358.0, 1.3157894736842106], [359.0, 1.1333333333333335], [360.0, 1.0625000000000002], [366.0, 0.8], [367.0, 1.142857142857143], [364.0, 1.166666666666667], [365.0, 1.3], [361.0, 1.0555555555555558], [362.0, 1.2307692307692308], [363.0, 1.2500000000000002], [369.0, 0.9166666666666666], [368.0, 1.1578947368421053], [370.0, 1.2142857142857144], [371.0, 0.9999999999999999], [372.0, 1.0625000000000004], [373.0, 2.466666666666667], [374.0, 1.0], [375.0, 0.9411764705882353], [376.0, 1.1818181818181823], [382.0, 1.1764705882352942], [383.0, 1.0499999999999998], [380.0, 1.153846153846154], [381.0, 0.9285714285714288], [377.0, 0.9285714285714288], [378.0, 1.1875000000000002], [379.0, 1.090909090909091], [385.0, 1.0625], [384.0, 1.2857142857142856], [386.0, 0.8124999999999999], [387.0, 0.6315789473684211], [388.0, 1.3571428571428572], [389.0, 0.9375000000000002], [390.0, 1.0], [391.0, 0.875], [392.0, 0.9473684210526314], [398.0, 0.9130434782608694], [399.0, 0.7000000000000001], [396.0, 1.1052631578947372], [397.0, 1.0588235294117647], [393.0, 0.9999999999999999], [394.0, 1.1111111111111114], [395.0, 1.2000000000000002], [401.0, 1.2500000000000002], [400.0, 1.2941176470588238], [402.0, 1.1176470588235294], [403.0, 0.7368421052631579], [404.0, 0.75], [405.0, 1.0], [406.0, 1.1363636363636367], [407.0, 0.85], [408.0, 1.3333333333333333], [414.0, 0.7777777777777777], [415.0, 1.0714285714285714], [412.0, 0.9999999999999999], [413.0, 1.1764705882352942], [409.0, 1.1818181818181819], [410.0, 0.857142857142857], [411.0, 0.8799999999999999], [417.0, 0.8888888888888887], [416.0, 1.0666666666666669], [418.0, 0.9444444444444445], [419.0, 1.15], [420.0, 0.894736842105263], [421.0, 1.0000000000000004], [422.0, 0.9444444444444444], [423.0, 0.7499999999999998], [424.0, 1.142857142857143], [430.0, 1.1875000000000002], [431.0, 0.6666666666666666], [428.0, 0.9230769230769231], [429.0, 0.9444444444444442], [425.0, 0.8421052631578947], [426.0, 1.4375000000000002], [427.0, 1.0000000000000002], [433.0, 0.9444444444444444], [432.0, 1.0800000000000003], [434.0, 1.3157894736842108], [435.0, 1.0000000000000002], [436.0, 1.0625], [437.0, 0.95], [438.0, 0.9285714285714286], [439.0, 2.0588235294117645], [440.0, 1.1200000000000003], [446.0, 0.9411764705882353], [447.0, 1.047619047619048], [444.0, 0.92], [445.0, 1.0], [441.0, 1.1538461538461537], [442.0, 1.2500000000000002], [443.0, 0.8571428571428571], [449.0, 1.058823529411765], [448.0, 0.9333333333333333], [450.0, 0.9473684210526315], [451.0, 0.9199999999999999], [452.0, 1.0], [453.0, 0.9444444444444444], [454.0, 1.041666666666667], [455.0, 1.0], [456.0, 0.8], [462.0, 1.0], [463.0, 0.9599999999999999], [460.0, 1.1363636363636362], [461.0, 1.1], [457.0, 0.9411764705882351], [458.0, 0.8421052631578947], [459.0, 1.1], [465.0, 0.92], [464.0, 1.0952380952380951], [466.0, 0.9565217391304345], [467.0, 0.6875], [468.0, 0.9047619047619047], [469.0, 1.0000000000000002], [470.0, 0.9999999999999998], [471.0, 0.8749999999999999], [472.0, 0.9259259259259258], [478.0, 0.95], [479.0, 0.8095238095238093], [476.0, 0.9230769230769231], [477.0, 0.7777777777777777], [473.0, 0.7999999999999999], [474.0, 0.7142857142857143], [475.0, 1.041666666666667], [481.0, 0.8999999999999999], [480.0, 0.7727272727272726], [482.0, 0.9629629629629631], [483.0, 0.9600000000000002], [484.0, 0.9523809523809526], [485.0, 1.5263157894736843], [486.0, 1.3157894736842106], [487.0, 1.125], [488.0, 0.7777777777777777], [494.0, 1.1875], [495.0, 1.041666666666667], [492.0, 0.875], [493.0, 0.8636363636363635], [489.0, 1.1818181818181825], [490.0, 1.1538461538461537], [491.0, 1.2631578947368423], [497.0, 0.7999999999999998], [496.0, 0.84], [498.0, 0.7000000000000001], [499.0, 0.7222222222222222], [500.0, 0.9130434782608695], [501.0, 1.058823529411765], [502.0, 1.2631578947368423], [503.0, 0.9200000000000003], [504.0, 0.8750000000000003], [510.0, 0.8333333333333333], [511.0, 1.1250000000000002], [508.0, 1.130434782608696], [509.0, 0.9090909090909093], [505.0, 1.0999999999999999], [506.0, 1.2608695652173916], [507.0, 0.9130434782608694], [515.0, 1.0], [512.0, 0.909090909090909], [526.0, 0.9642857142857142], [527.0, 1.0952380952380953], [524.0, 1.2000000000000002], [525.0, 0.7999999999999997], [522.0, 1.0000000000000002], [523.0, 0.9032258064516128], [513.0, 1.0], [514.0, 0.9473684210526314], [516.0, 0.8235294117647057], [517.0, 0.8695652173913043], [518.0, 1.0454545454545459], [519.0, 1.0588235294117647], [528.0, 0.8461538461538461], [542.0, 0.9500000000000002], [543.0, 0.8999999999999999], [540.0, 0.9285714285714285], [541.0, 0.8888888888888887], [538.0, 1.1739130434782612], [539.0, 0.9], [536.0, 0.9090909090909091], [537.0, 1.291666666666667], [529.0, 0.8695652173913042], [530.0, 2.0476190476190483], [531.0, 1.0500000000000003], [532.0, 1.277777777777778], [533.0, 0.9259259259259259], [534.0, 0.875], [535.0, 0.8999999999999999], [520.0, 1.4999999999999996], [521.0, 1.0952380952380953], [547.0, 1.0], [544.0, 0.7777777777777778], [558.0, 0.8421052631578947], [559.0, 1.0526315789473686], [556.0, 1.1111111111111114], [557.0, 1.0], [554.0, 1.2083333333333335], [555.0, 0.7272727272727272], [545.0, 0.7307692307692308], [546.0, 1.2142857142857144], [548.0, 0.9259259259259262], [549.0, 1.0000000000000002], [550.0, 1.1], [551.0, 1.0000000000000002], [560.0, 0.7297297297297297], [574.0, 1.08], [575.0, 0.6896551724137934], [572.0, 0.9199999999999999], [573.0, 0.8461538461538461], [570.0, 1.0714285714285714], [571.0, 1.0], [568.0, 0.9285714285714287], [569.0, 1.0645161290322585], [561.0, 0.9615384615384618], [562.0, 0.9199999999999999], [563.0, 0.8666666666666666], [564.0, 1.0], [565.0, 0.7727272727272726], [566.0, 1.1851851851851856], [567.0, 1.0689655172413794], [552.0, 0.7692307692307692], [553.0, 0.8888888888888886], [579.0, 1.0526315789473686], [576.0, 0.6086956521739132], [590.0, 1.041666666666667], [591.0, 1.1153846153846156], [588.0, 0.8235294117647056], [589.0, 0.814814814814815], [586.0, 1.125], [587.0, 1.0800000000000003], [577.0, 0.9523809523809523], [578.0, 1.0909090909090913], [580.0, 0.8888888888888891], [581.0, 1.1875000000000002], [582.0, 1.076923076923077], [583.0, 0.8400000000000001], [592.0, 0.8571428571428573], [606.0, 0.8387096774193549], [607.0, 0.5263157894736842], [604.0, 0.9200000000000003], [605.0, 0.9130434782608695], [602.0, 0.923076923076923], [603.0, 1.090909090909091], [600.0, 0.8], [601.0, 0.8846153846153848], [593.0, 1.0000000000000002], [594.0, 0.894736842105263], [595.0, 0.9259259259259257], [596.0, 1.0], [597.0, 1.1], [598.0, 1.0588235294117654], [599.0, 0.851851851851852], [584.0, 0.8947368421052632], [585.0, 0.8695652173913042], [611.0, 1.0], [608.0, 1.0384615384615388], [622.0, 1.1764705882352942], [623.0, 0.8799999999999999], [620.0, 0.8275862068965517], [621.0, 0.7499999999999999], [618.0, 0.8484848484848485], [619.0, 0.7857142857142857], [609.0, 0.8749999999999999], [610.0, 1.5999999999999994], [612.0, 0.8095238095238093], [613.0, 1.0344827586206897], [614.0, 0.7352941176470591], [615.0, 0.7083333333333333], [624.0, 0.7727272727272726], [638.0, 0.8333333333333331], [639.0, 0.7999999999999999], [636.0, 0.7407407407407407], [637.0, 0.8333333333333333], [634.0, 1.1379310344827587], [635.0, 0.962962962962963], [632.0, 0.9166666666666666], [633.0, 1.0000000000000002], [625.0, 0.9285714285714284], [626.0, 0.7333333333333334], [627.0, 0.9333333333333336], [628.0, 0.9375], [629.0, 1.0], [630.0, 0.9142857142857141], [631.0, 0.9166666666666666], [616.0, 1.047619047619048], [617.0, 0.95], [643.0, 0.8518518518518519], [640.0, 1.1333333333333335], [654.0, 0.7741935483870966], [655.0, 1.0476190476190477], [652.0, 1.3], [653.0, 1.166666666666667], [650.0, 0.68], [651.0, 1.041666666666667], [641.0, 0.925925925925926], [642.0, 0.8095238095238094], [644.0, 1.1363636363636365], [645.0, 0.6896551724137933], [646.0, 0.8529411764705883], [647.0, 1.0], [656.0, 1.0606060606060606], [670.0, 0.8285714285714287], [671.0, 0.84], [668.0, 1.1851851851851856], [669.0, 0.7200000000000002], [666.0, 1.0526315789473686], [667.0, 1.0689655172413792], [664.0, 0.9130434782608694], [665.0, 0.764705882352941], [657.0, 1.1481481481481484], [658.0, 1.0000000000000002], [659.0, 0.935483870967742], [660.0, 0.9473684210526315], [661.0, 0.9655172413793106], [662.0, 0.8857142857142856], [663.0, 1.0277777777777777], [648.0, 0.7499999999999998], [649.0, 0.8437500000000001], [675.0, 0.9615384615384617], [672.0, 0.7777777777777777], [686.0, 0.9473684210526313], [687.0, 0.8709677419354837], [684.0, 0.763157894736842], [685.0, 0.9032258064516132], [682.0, 0.9642857142857142], [683.0, 1.0000000000000002], [673.0, 1.0344827586206895], [674.0, 0.6060606060606061], [676.0, 0.8857142857142856], [677.0, 0.8636363636363635], [678.0, 0.8484848484848485], [679.0, 0.8846153846153845], [688.0, 0.7222222222222222], [702.0, 0.7575757575757576], [703.0, 0.8965517241379312], [700.0, 0.8461538461538463], [701.0, 0.8333333333333333], [698.0, 1.0810810810810811], [699.0, 1.0370370370370372], [696.0, 1.1071428571428574], [697.0, 0.891891891891892], [689.0, 0.7027027027027027], [690.0, 0.942857142857143], [691.0, 0.935483870967742], [692.0, 0.9166666666666665], [693.0, 1.0769230769230773], [694.0, 0.8148148148148147], [695.0, 0.7931034482758621], [680.0, 0.7692307692307692], [681.0, 0.9523809523809523], [707.0, 0.9615384615384617], [704.0, 1.0526315789473688], [718.0, 0.9090909090909091], [719.0, 1.0000000000000002], [716.0, 0.8484848484848486], [717.0, 0.9411764705882353], [714.0, 0.8275862068965516], [715.0, 0.7837837837837837], [705.0, 1.04], [706.0, 1.1034482758620698], [708.0, 0.9], [709.0, 0.8536585365853658], [710.0, 1.0000000000000004], [711.0, 1.0000000000000004], [720.0, 1.041666666666667], [734.0, 0.7931034482758619], [735.0, 1.020408163265306], [732.0, 0.9393939393939397], [733.0, 0.9259259259259259], [730.0, 0.8965517241379308], [731.0, 0.9285714285714285], [728.0, 0.7272727272727272], [729.0, 0.769230769230769], [721.0, 0.9166666666666667], [722.0, 1.1], [723.0, 1.0], [724.0, 0.7999999999999999], [725.0, 0.8846153846153845], [726.0, 0.7777777777777778], [727.0, 0.9999999999999999], [712.0, 0.9130434782608696], [713.0, 0.9130434782608693], [739.0, 0.8974358974358976], [736.0, 0.7407407407407406], [750.0, 0.865392831947192], [748.0, 0.6999999999999998], [749.0, 0.6944444444444444], [746.0, 0.9230769230769231], [747.0, 0.9374999999999998], [737.0, 0.9210526315789473], [738.0, 0.8823529411764706], [740.0, 1.0000000000000002], [741.0, 0.8108108108108105], [742.0, 0.868421052631579], [743.0, 0.7924528301886793], [744.0, 0.6808510638297872], [745.0, 1.0888888888888886], [1.0, 1.0]], "isOverall": false, "label": "GET /test.php", "isController": false}, {"data": [[736.0143678160947, 0.8752695430425019]], "isOverall": false, "label": "GET /test.php-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 750.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4446.75, "minX": 1.74321438E12, "maxY": 119547.96666666666, "series": [{"data": [[1.74321474E12, 119328.43333333333], [1.74321456E12, 119373.53333333334], [1.74321462E12, 119158.11666666667], [1.74321492E12, 118736.98333333334], [1.74321444E12, 85151.48333333334], [1.74321498E12, 63179.85], [1.7432145E12, 118482.65], [1.7432148E12, 118527.9], [1.74321486E12, 119284.13333333333], [1.74321438E12, 7570.5], [1.74321468E12, 119547.96666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74321474E12, 42537.55], [1.74321456E12, 42573.85], [1.74321462E12, 42533.51666666667], [1.74321492E12, 42630.316666666666], [1.74321444E12, 37074.4], [1.74321498E12, 23469.966666666667], [1.7432145E12, 42521.416666666664], [1.7432148E12, 42674.683333333334], [1.74321486E12, 42541.583333333336], [1.74321438E12, 4446.75], [1.74321468E12, 42777.53333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74321498E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 0.8570410617261974, "minX": 1.74321438E12, "maxY": 1.4176870748299362, "series": [{"data": [[1.74321474E12, 0.8570410617261974], [1.74321456E12, 0.8614213875662019], [1.74321462E12, 0.8691584621552969], [1.74321492E12, 0.8629771331969015], [1.74321444E12, 0.9159964253798015], [1.74321498E12, 0.8801072211843053], [1.7432145E12, 0.863170100793864], [1.7432148E12, 0.8685754935088053], [1.74321486E12, 0.8646120958403886], [1.74321438E12, 1.4176870748299362], [1.74321468E12, 0.8648469003412077]], "isOverall": false, "label": "GET /test.php", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74321498E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.8458181170392841, "minX": 1.74321438E12, "maxY": 1.3696145124716528, "series": [{"data": [[1.74321474E12, 0.8458181170392841], [1.74321456E12, 0.8485158648925297], [1.74321462E12, 0.8564173386198608], [1.74321492E12, 0.8513212919298847], [1.74321444E12, 0.8999106344950858], [1.74321498E12, 0.8667858013158924], [1.7432145E12, 0.8506377664793495], [1.7432148E12, 0.8553707985061353], [1.74321486E12, 0.8511178409192116], [1.74321438E12, 1.3696145124716528], [1.74321468E12, 0.8527052776177603]], "isOverall": false, "label": "GET /test.php", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74321498E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.04500044599054515, "minX": 1.74321438E12, "maxY": 0.23356009070294814, "series": [{"data": [[1.74321474E12, 0.04751937294023317], [1.74321456E12, 0.047527924880957584], [1.74321462E12, 0.049227068205105445], [1.74321492E12, 0.04528872675504953], [1.74321444E12, 0.052042264627030835], [1.74321498E12, 0.04743725123872961], [1.7432145E12, 0.04500044599054515], [1.7432148E12, 0.045171616574782004], [1.74321486E12, 0.04653959205486755], [1.74321438E12, 0.23356009070294814], [1.74321468E12, 0.04723711614304079]], "isOverall": false, "label": "GET /test.php", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74321498E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74321438E12, "maxY": 68.0, "series": [{"data": [[1.74321474E12, 18.0], [1.74321456E12, 20.0], [1.74321462E12, 21.0], [1.74321492E12, 21.0], [1.74321444E12, 29.0], [1.74321498E12, 20.0], [1.7432145E12, 26.0], [1.7432148E12, 25.0], [1.74321486E12, 20.0], [1.74321438E12, 68.0], [1.74321468E12, 18.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74321474E12, 0.0], [1.74321456E12, 0.0], [1.74321462E12, 0.0], [1.74321492E12, 0.0], [1.74321444E12, 0.0], [1.74321498E12, 0.0], [1.7432145E12, 0.0], [1.7432148E12, 0.0], [1.74321486E12, 0.0], [1.74321438E12, 0.0], [1.74321468E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74321474E12, 2.0], [1.74321456E12, 2.0], [1.74321462E12, 2.0], [1.74321492E12, 2.0], [1.74321444E12, 2.0], [1.74321498E12, 2.0], [1.7432145E12, 2.0], [1.7432148E12, 2.0], [1.74321486E12, 2.0], [1.74321438E12, 2.0], [1.74321468E12, 2.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74321474E12, 2.0], [1.74321456E12, 2.0], [1.74321462E12, 2.0], [1.74321492E12, 2.0], [1.74321444E12, 3.0], [1.74321498E12, 2.0], [1.7432145E12, 2.0], [1.7432148E12, 2.0], [1.74321486E12, 2.0], [1.74321438E12, 4.0], [1.74321468E12, 2.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74321474E12, 1.0], [1.74321456E12, 1.0], [1.74321462E12, 1.0], [1.74321492E12, 1.0], [1.74321444E12, 1.0], [1.74321498E12, 1.0], [1.7432145E12, 1.0], [1.7432148E12, 1.0], [1.74321486E12, 1.0], [1.74321438E12, 1.0], [1.74321468E12, 1.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.74321474E12, 2.0], [1.74321456E12, 2.0], [1.74321462E12, 2.0], [1.74321492E12, 2.0], [1.74321444E12, 2.0], [1.74321498E12, 2.0], [1.7432145E12, 2.0], [1.7432148E12, 2.0], [1.74321486E12, 2.0], [1.74321438E12, 3.0], [1.74321468E12, 2.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74321498E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 7.0, "maxY": 5.0, "series": [{"data": [[7.0, 5.0], [14.0, 3.5], [20.0, 3.0], [22.0, 2.0], [40.0, 2.0], [41.0, 2.0], [44.0, 2.0], [54.0, 2.0], [61.0, 1.0], [71.0, 1.0], [72.0, 1.0], [81.0, 1.0], [85.0, 1.0], [91.0, 1.0], [100.0, 1.0], [111.0, 1.0], [115.0, 1.0], [117.0, 1.0], [121.0, 1.0], [128.0, 1.0], [132.0, 1.0], [147.0, 1.0], [144.0, 1.0], [149.0, 1.0], [154.0, 1.0], [177.0, 1.0], [176.0, 1.0], [189.0, 1.0], [190.0, 1.0], [194.0, 1.0], [204.0, 1.0], [209.0, 1.0], [212.0, 1.0], [221.0, 1.0], [220.0, 1.0], [217.0, 1.0], [233.0, 1.0], [242.0, 1.0], [263.0, 1.0], [267.0, 1.0], [259.0, 1.0], [264.0, 1.0], [272.0, 1.0], [273.0, 1.0], [297.0, 1.0], [301.0, 1.0], [300.0, 1.0], [316.0, 1.0], [313.0, 1.0], [320.0, 1.0], [325.0, 1.0], [334.0, 1.0], [332.0, 1.0], [350.0, 1.0], [338.0, 1.0], [343.0, 1.0], [351.0, 1.0], [344.0, 1.0], [341.0, 1.0], [340.0, 1.0], [345.0, 1.0], [342.0, 1.0], [348.0, 1.0], [349.0, 1.0], [346.0, 1.0], [364.0, 1.0], [360.0, 1.0], [358.0, 1.0], [357.0, 1.0], [356.0, 1.0], [361.0, 1.0], [362.0, 1.0], [363.0, 1.0], [366.0, 1.0], [359.0, 1.0], [353.0, 1.0], [352.0, 1.0], [355.0, 1.0], [354.0, 1.0], [365.0, 1.0], [367.0, 1.0], [370.0, 1.0], [368.0, 1.0], [376.0, 1.0], [380.0, 1.0], [382.0, 1.0], [383.0, 1.0], [381.0, 1.0], [371.0, 1.0], [379.0, 1.0], [372.0, 1.0], [377.0, 1.0], [378.0, 1.0], [369.0, 1.0], [375.0, 1.0], [374.0, 1.0], [373.0, 1.0], [386.0, 1.0], [395.0, 1.0], [391.0, 1.0], [385.0, 1.0], [387.0, 1.0], [396.0, 1.0], [397.0, 1.0], [384.0, 1.0], [389.0, 1.0], [388.0, 1.0], [390.0, 1.0], [394.0, 1.0], [398.0, 1.0], [399.0, 1.0], [393.0, 1.0], [392.0, 1.0], [400.0, 1.0], [404.0, 1.0], [411.0, 1.0], [403.0, 1.0], [412.0, 1.0], [406.0, 1.0], [401.0, 1.0], [402.0, 1.0], [408.0, 1.0], [407.0, 1.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[348.0, 0.0], [351.0, 0.0], [350.0, 0.0], [349.0, 0.0], [344.0, 0.0], [341.0, 0.0], [340.0, 0.0], [345.0, 0.0], [342.0, 0.0], [346.0, 0.0], [343.0, 0.0], [338.0, 0.0], [366.0, 0.0], [361.0, 0.0], [358.0, 0.0], [357.0, 0.0], [356.0, 0.0], [362.0, 0.0], [364.0, 0.0], [359.0, 0.0], [353.0, 0.0], [352.0, 0.0], [355.0, 0.0], [354.0, 0.0], [365.0, 0.0], [367.0, 0.0], [360.0, 0.0], [363.0, 0.0], [380.0, 0.0], [368.0, 0.0], [376.0, 0.0], [383.0, 0.0], [382.0, 0.0], [381.0, 0.0], [379.0, 0.0], [372.0, 0.0], [377.0, 0.0], [369.0, 0.0], [375.0, 0.0], [374.0, 0.0], [373.0, 0.0], [371.0, 0.0], [370.0, 0.0], [378.0, 0.0], [386.0, 0.0], [395.0, 0.0], [391.0, 0.0], [385.0, 0.0], [387.0, 0.0], [396.0, 0.0], [397.0, 0.0], [384.0, 0.0], [389.0, 0.0], [388.0, 0.0], [390.0, 0.0], [394.0, 0.0], [398.0, 0.0], [399.0, 0.0], [393.0, 0.0], [392.0, 0.0], [400.0, 0.0], [404.0, 0.0], [411.0, 0.0], [403.0, 0.0], [412.0, 0.0], [406.0, 0.0], [401.0, 0.0], [402.0, 0.0], [408.0, 0.0], [407.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 412.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 7.0, "maxY": 5.0, "series": [{"data": [[7.0, 5.0], [14.0, 3.0], [20.0, 3.0], [22.0, 2.0], [40.0, 2.0], [41.0, 2.0], [44.0, 2.0], [54.0, 2.0], [61.0, 1.0], [71.0, 1.0], [72.0, 1.0], [81.0, 1.0], [85.0, 1.0], [91.0, 1.0], [100.0, 1.0], [111.0, 1.0], [115.0, 1.0], [117.0, 1.0], [121.0, 1.0], [128.0, 1.0], [132.0, 1.0], [147.0, 1.0], [144.0, 1.0], [149.0, 1.0], [154.0, 1.0], [177.0, 1.0], [176.0, 1.0], [189.0, 1.0], [190.0, 1.0], [194.0, 1.0], [204.0, 1.0], [209.0, 1.0], [212.0, 1.0], [221.0, 1.0], [220.0, 1.0], [217.0, 1.0], [233.0, 1.0], [242.0, 1.0], [263.0, 1.0], [267.0, 1.0], [259.0, 1.0], [264.0, 1.0], [272.0, 1.0], [273.0, 1.0], [297.0, 1.0], [301.0, 1.0], [300.0, 1.0], [316.0, 1.0], [313.0, 1.0], [320.0, 1.0], [325.0, 1.0], [334.0, 1.0], [332.0, 1.0], [350.0, 1.0], [338.0, 1.0], [343.0, 1.0], [351.0, 1.0], [344.0, 1.0], [341.0, 1.0], [340.0, 1.0], [345.0, 1.0], [342.0, 1.0], [348.0, 1.0], [349.0, 1.0], [346.0, 1.0], [364.0, 1.0], [360.0, 1.0], [358.0, 1.0], [357.0, 1.0], [356.0, 1.0], [361.0, 1.0], [362.0, 1.0], [363.0, 1.0], [366.0, 1.0], [359.0, 1.0], [353.0, 1.0], [352.0, 1.0], [355.0, 1.0], [354.0, 1.0], [365.0, 1.0], [367.0, 1.0], [370.0, 1.0], [368.0, 1.0], [376.0, 1.0], [380.0, 1.0], [382.0, 1.0], [383.0, 1.0], [381.0, 1.0], [371.0, 1.0], [379.0, 1.0], [372.0, 1.0], [377.0, 1.0], [378.0, 1.0], [369.0, 1.0], [375.0, 1.0], [374.0, 1.0], [373.0, 1.0], [386.0, 1.0], [395.0, 1.0], [391.0, 1.0], [385.0, 1.0], [387.0, 1.0], [396.0, 1.0], [397.0, 1.0], [384.0, 1.0], [389.0, 1.0], [388.0, 1.0], [390.0, 1.0], [394.0, 1.0], [398.0, 1.0], [399.0, 1.0], [393.0, 1.0], [392.0, 1.0], [400.0, 1.0], [404.0, 1.0], [411.0, 1.0], [403.0, 1.0], [412.0, 1.0], [406.0, 1.0], [401.0, 1.0], [402.0, 1.0], [408.0, 1.0], [407.0, 1.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[348.0, 0.0], [351.0, 0.0], [350.0, 0.0], [349.0, 0.0], [344.0, 0.0], [341.0, 0.0], [340.0, 0.0], [345.0, 0.0], [342.0, 0.0], [346.0, 0.0], [343.0, 0.0], [338.0, 0.0], [366.0, 0.0], [361.0, 0.0], [358.0, 0.0], [357.0, 0.0], [356.0, 0.0], [362.0, 0.0], [364.0, 0.0], [359.0, 0.0], [353.0, 0.0], [352.0, 0.0], [355.0, 0.0], [354.0, 0.0], [365.0, 0.0], [367.0, 0.0], [360.0, 0.0], [363.0, 0.0], [380.0, 0.0], [368.0, 0.0], [376.0, 0.0], [383.0, 0.0], [382.0, 0.0], [381.0, 0.0], [379.0, 0.0], [372.0, 0.0], [377.0, 0.0], [369.0, 0.0], [375.0, 0.0], [374.0, 0.0], [373.0, 0.0], [371.0, 0.0], [370.0, 0.0], [378.0, 0.0], [386.0, 0.0], [395.0, 0.0], [391.0, 0.0], [385.0, 0.0], [387.0, 0.0], [396.0, 0.0], [397.0, 0.0], [384.0, 0.0], [389.0, 0.0], [388.0, 0.0], [390.0, 0.0], [394.0, 0.0], [398.0, 0.0], [399.0, 0.0], [393.0, 0.0], [392.0, 0.0], [400.0, 0.0], [404.0, 0.0], [411.0, 0.0], [403.0, 0.0], [412.0, 0.0], [406.0, 0.0], [401.0, 0.0], [402.0, 0.0], [408.0, 0.0], [407.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 412.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 36.75, "minX": 1.74321438E12, "maxY": 376.0833333333333, "series": [{"data": [[1.74321474E12, 374.23333333333335], [1.74321456E12, 374.51666666666665], [1.74321462E12, 374.15], [1.74321492E12, 374.65], [1.74321444E12, 317.06666666666666], [1.74321498E12, 205.16666666666666], [1.7432145E12, 373.68333333333334], [1.7432148E12, 374.8666666666667], [1.74321486E12, 374.23333333333335], [1.74321438E12, 36.75], [1.74321468E12, 376.0833333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74321498E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.74321438E12, "maxY": 353.53333333333336, "series": [{"data": [[1.74321474E12, 351.55], [1.74321456E12, 351.85], [1.74321462E12, 351.51666666666665], [1.74321492E12, 352.31666666666666], [1.74321444E12, 306.4], [1.74321498E12, 193.96666666666667], [1.7432145E12, 351.4166666666667], [1.7432148E12, 352.68333333333334], [1.74321486E12, 351.5833333333333], [1.74321438E12, 36.75], [1.74321468E12, 353.53333333333336]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.74321474E12, 22.683333333333334], [1.74321456E12, 22.633333333333333], [1.74321462E12, 22.583333333333332], [1.74321492E12, 22.3], [1.74321444E12, 10.633333333333333], [1.74321498E12, 11.166666666666666], [1.7432145E12, 22.266666666666666], [1.7432148E12, 22.183333333333334], [1.74321486E12, 22.616666666666667], [1.74321468E12, 22.55]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.74321456E12, 0.03333333333333333], [1.74321462E12, 0.016666666666666666], [1.74321492E12, 0.016666666666666666], [1.74321444E12, 0.016666666666666666], [1.74321498E12, 0.05], [1.7432145E12, 0.016666666666666666], [1.74321486E12, 0.03333333333333333], [1.74321468E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74321498E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 10.65, "minX": 1.74321438E12, "maxY": 353.53333333333336, "series": [{"data": [[1.74321474E12, 351.55], [1.74321456E12, 351.85], [1.74321462E12, 351.51666666666665], [1.74321492E12, 352.31666666666666], [1.74321444E12, 306.4], [1.74321498E12, 193.96666666666667], [1.7432145E12, 351.4166666666667], [1.7432148E12, 352.68333333333334], [1.74321486E12, 351.5833333333333], [1.74321438E12, 36.75], [1.74321468E12, 353.53333333333336]], "isOverall": false, "label": "GET /test.php-success", "isController": false}, {"data": [[1.74321474E12, 22.683333333333334], [1.74321456E12, 22.666666666666668], [1.74321462E12, 22.6], [1.74321492E12, 22.316666666666666], [1.74321444E12, 10.65], [1.74321498E12, 11.216666666666667], [1.7432145E12, 22.283333333333335], [1.7432148E12, 22.183333333333334], [1.74321486E12, 22.65], [1.74321468E12, 22.583333333333332]], "isOverall": false, "label": "GET /test.php-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74321498E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10.65, "minX": 1.74321438E12, "maxY": 353.53333333333336, "series": [{"data": [[1.74321474E12, 351.55], [1.74321456E12, 351.85], [1.74321462E12, 351.51666666666665], [1.74321492E12, 352.31666666666666], [1.74321444E12, 306.4], [1.74321498E12, 193.96666666666667], [1.7432145E12, 351.4166666666667], [1.7432148E12, 352.68333333333334], [1.74321486E12, 351.5833333333333], [1.74321438E12, 36.75], [1.74321468E12, 353.53333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74321474E12, 22.683333333333334], [1.74321456E12, 22.666666666666668], [1.74321462E12, 22.6], [1.74321492E12, 22.316666666666666], [1.74321444E12, 10.65], [1.74321498E12, 11.216666666666667], [1.7432145E12, 22.283333333333335], [1.7432148E12, 22.183333333333334], [1.74321486E12, 22.65], [1.74321468E12, 22.583333333333332]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74321498E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

