/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 60.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 0.0], [26.9, 0.0], [27.0, 0.0], [27.1, 0.0], [27.2, 0.0], [27.3, 0.0], [27.4, 0.0], [27.5, 0.0], [27.6, 0.0], [27.7, 0.0], [27.8, 0.0], [27.9, 0.0], [28.0, 0.0], [28.1, 0.0], [28.2, 0.0], [28.3, 0.0], [28.4, 0.0], [28.5, 0.0], [28.6, 0.0], [28.7, 0.0], [28.8, 0.0], [28.9, 0.0], [29.0, 0.0], [29.1, 0.0], [29.2, 0.0], [29.3, 0.0], [29.4, 0.0], [29.5, 0.0], [29.6, 0.0], [29.7, 0.0], [29.8, 0.0], [29.9, 0.0], [30.0, 0.0], [30.1, 0.0], [30.2, 0.0], [30.3, 0.0], [30.4, 0.0], [30.5, 0.0], [30.6, 0.0], [30.7, 0.0], [30.8, 0.0], [30.9, 0.0], [31.0, 0.0], [31.1, 0.0], [31.2, 0.0], [31.3, 0.0], [31.4, 0.0], [31.5, 0.0], [31.6, 0.0], [31.7, 0.0], [31.8, 0.0], [31.9, 0.0], [32.0, 0.0], [32.1, 0.0], [32.2, 0.0], [32.3, 0.0], [32.4, 0.0], [32.5, 0.0], [32.6, 0.0], [32.7, 0.0], [32.8, 0.0], [32.9, 0.0], [33.0, 0.0], [33.1, 0.0], [33.2, 0.0], [33.3, 0.0], [33.4, 0.0], [33.5, 0.0], [33.6, 0.0], [33.7, 0.0], [33.8, 0.0], [33.9, 0.0], [34.0, 0.0], [34.1, 0.0], [34.2, 0.0], [34.3, 0.0], [34.4, 0.0], [34.5, 0.0], [34.6, 0.0], [34.7, 0.0], [34.8, 0.0], [34.9, 0.0], [35.0, 0.0], [35.1, 0.0], [35.2, 0.0], [35.3, 0.0], [35.4, 0.0], [35.5, 0.0], [35.6, 0.0], [35.7, 0.0], [35.8, 0.0], [35.9, 0.0], [36.0, 0.0], [36.1, 0.0], [36.2, 0.0], [36.3, 0.0], [36.4, 0.0], [36.5, 0.0], [36.6, 0.0], [36.7, 0.0], [36.8, 0.0], [36.9, 0.0], [37.0, 0.0], [37.1, 0.0], [37.2, 0.0], [37.3, 0.0], [37.4, 0.0], [37.5, 0.0], [37.6, 0.0], [37.7, 0.0], [37.8, 0.0], [37.9, 0.0], [38.0, 0.0], [38.1, 0.0], [38.2, 0.0], [38.3, 0.0], [38.4, 0.0], [38.5, 0.0], [38.6, 0.0], [38.7, 0.0], [38.8, 0.0], [38.9, 0.0], [39.0, 0.0], [39.1, 0.0], [39.2, 0.0], [39.3, 0.0], [39.4, 0.0], [39.5, 0.0], [39.6, 0.0], [39.7, 0.0], [39.8, 0.0], [39.9, 0.0], [40.0, 0.0], [40.1, 0.0], [40.2, 0.0], [40.3, 0.0], [40.4, 0.0], [40.5, 0.0], [40.6, 0.0], [40.7, 0.0], [40.8, 0.0], [40.9, 0.0], [41.0, 0.0], [41.1, 0.0], [41.2, 0.0], [41.3, 0.0], [41.4, 0.0], [41.5, 0.0], [41.6, 0.0], [41.7, 0.0], [41.8, 0.0], [41.9, 0.0], [42.0, 0.0], [42.1, 0.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 1.0], [44.9, 1.0], [45.0, 1.0], [45.1, 1.0], [45.2, 1.0], [45.3, 1.0], [45.4, 1.0], [45.5, 1.0], [45.6, 1.0], [45.7, 1.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 1.0], [46.3, 1.0], [46.4, 1.0], [46.5, 1.0], [46.6, 1.0], [46.7, 1.0], [46.8, 1.0], [46.9, 1.0], [47.0, 1.0], [47.1, 1.0], [47.2, 1.0], [47.3, 1.0], [47.4, 1.0], [47.5, 1.0], [47.6, 1.0], [47.7, 1.0], [47.8, 1.0], [47.9, 1.0], [48.0, 1.0], [48.1, 1.0], [48.2, 1.0], [48.3, 1.0], [48.4, 1.0], [48.5, 1.0], [48.6, 1.0], [48.7, 1.0], [48.8, 1.0], [48.9, 1.0], [49.0, 1.0], [49.1, 1.0], [49.2, 1.0], [49.3, 1.0], [49.4, 1.0], [49.5, 1.0], [49.6, 1.0], [49.7, 1.0], [49.8, 1.0], [49.9, 1.0], [50.0, 1.0], [50.1, 1.0], [50.2, 1.0], [50.3, 1.0], [50.4, 1.0], [50.5, 1.0], [50.6, 1.0], [50.7, 1.0], [50.8, 1.0], [50.9, 1.0], [51.0, 1.0], [51.1, 1.0], [51.2, 1.0], [51.3, 1.0], [51.4, 1.0], [51.5, 1.0], [51.6, 1.0], [51.7, 1.0], [51.8, 1.0], [51.9, 1.0], [52.0, 1.0], [52.1, 1.0], [52.2, 1.0], [52.3, 1.0], [52.4, 1.0], [52.5, 1.0], [52.6, 1.0], [52.7, 1.0], [52.8, 1.0], [52.9, 1.0], [53.0, 1.0], [53.1, 1.0], [53.2, 1.0], [53.3, 1.0], [53.4, 1.0], [53.5, 1.0], [53.6, 1.0], [53.7, 1.0], [53.8, 1.0], [53.9, 1.0], [54.0, 1.0], [54.1, 1.0], [54.2, 1.0], [54.3, 1.0], [54.4, 1.0], [54.5, 1.0], [54.6, 1.0], [54.7, 1.0], [54.8, 1.0], [54.9, 1.0], [55.0, 1.0], [55.1, 1.0], [55.2, 1.0], [55.3, 1.0], [55.4, 1.0], [55.5, 1.0], [55.6, 1.0], [55.7, 1.0], [55.8, 1.0], [55.9, 1.0], [56.0, 1.0], [56.1, 1.0], [56.2, 1.0], [56.3, 1.0], [56.4, 1.0], [56.5, 1.0], [56.6, 1.0], [56.7, 1.0], [56.8, 1.0], [56.9, 1.0], [57.0, 1.0], [57.1, 1.0], [57.2, 1.0], [57.3, 1.0], [57.4, 1.0], [57.5, 1.0], [57.6, 1.0], [57.7, 1.0], [57.8, 1.0], [57.9, 1.0], [58.0, 1.0], [58.1, 1.0], [58.2, 1.0], [58.3, 1.0], [58.4, 1.0], [58.5, 1.0], [58.6, 1.0], [58.7, 1.0], [58.8, 1.0], [58.9, 1.0], [59.0, 1.0], [59.1, 1.0], [59.2, 1.0], [59.3, 1.0], [59.4, 1.0], [59.5, 1.0], [59.6, 1.0], [59.7, 1.0], [59.8, 1.0], [59.9, 1.0], [60.0, 1.0], [60.1, 1.0], [60.2, 1.0], [60.3, 1.0], [60.4, 1.0], [60.5, 1.0], [60.6, 1.0], [60.7, 1.0], [60.8, 1.0], [60.9, 1.0], [61.0, 1.0], [61.1, 1.0], [61.2, 1.0], [61.3, 1.0], [61.4, 1.0], [61.5, 1.0], [61.6, 1.0], [61.7, 1.0], [61.8, 1.0], [61.9, 1.0], [62.0, 1.0], [62.1, 1.0], [62.2, 1.0], [62.3, 1.0], [62.4, 1.0], [62.5, 1.0], [62.6, 1.0], [62.7, 1.0], [62.8, 1.0], [62.9, 1.0], [63.0, 1.0], [63.1, 1.0], [63.2, 1.0], [63.3, 1.0], [63.4, 1.0], [63.5, 1.0], [63.6, 1.0], [63.7, 1.0], [63.8, 1.0], [63.9, 1.0], [64.0, 1.0], [64.1, 1.0], [64.2, 1.0], [64.3, 1.0], [64.4, 1.0], [64.5, 1.0], [64.6, 1.0], [64.7, 1.0], [64.8, 1.0], [64.9, 1.0], [65.0, 1.0], [65.1, 1.0], [65.2, 1.0], [65.3, 1.0], [65.4, 1.0], [65.5, 1.0], [65.6, 1.0], [65.7, 1.0], [65.8, 1.0], [65.9, 1.0], [66.0, 1.0], [66.1, 1.0], [66.2, 1.0], [66.3, 1.0], [66.4, 1.0], [66.5, 1.0], [66.6, 1.0], [66.7, 1.0], [66.8, 1.0], [66.9, 1.0], [67.0, 1.0], [67.1, 1.0], [67.2, 1.0], [67.3, 1.0], [67.4, 1.0], [67.5, 1.0], [67.6, 1.0], [67.7, 1.0], [67.8, 1.0], [67.9, 1.0], [68.0, 1.0], [68.1, 1.0], [68.2, 1.0], [68.3, 1.0], [68.4, 1.0], [68.5, 1.0], [68.6, 1.0], [68.7, 1.0], [68.8, 1.0], [68.9, 1.0], [69.0, 1.0], [69.1, 1.0], [69.2, 1.0], [69.3, 1.0], [69.4, 1.0], [69.5, 1.0], [69.6, 1.0], [69.7, 1.0], [69.8, 1.0], [69.9, 1.0], [70.0, 1.0], [70.1, 1.0], [70.2, 1.0], [70.3, 1.0], [70.4, 1.0], [70.5, 1.0], [70.6, 1.0], [70.7, 1.0], [70.8, 1.0], [70.9, 1.0], [71.0, 1.0], [71.1, 1.0], [71.2, 1.0], [71.3, 1.0], [71.4, 1.0], [71.5, 1.0], [71.6, 1.0], [71.7, 1.0], [71.8, 1.0], [71.9, 1.0], [72.0, 1.0], [72.1, 1.0], [72.2, 1.0], [72.3, 1.0], [72.4, 1.0], [72.5, 1.0], [72.6, 1.0], [72.7, 1.0], [72.8, 1.0], [72.9, 1.0], [73.0, 1.0], [73.1, 1.0], [73.2, 1.0], [73.3, 1.0], [73.4, 1.0], [73.5, 1.0], [73.6, 1.0], [73.7, 1.0], [73.8, 1.0], [73.9, 1.0], [74.0, 1.0], [74.1, 1.0], [74.2, 1.0], [74.3, 1.0], [74.4, 1.0], [74.5, 1.0], [74.6, 1.0], [74.7, 1.0], [74.8, 1.0], [74.9, 1.0], [75.0, 1.0], [75.1, 1.0], [75.2, 1.0], [75.3, 1.0], [75.4, 1.0], [75.5, 1.0], [75.6, 1.0], [75.7, 1.0], [75.8, 1.0], [75.9, 1.0], [76.0, 1.0], [76.1, 1.0], [76.2, 1.0], [76.3, 1.0], [76.4, 1.0], [76.5, 1.0], [76.6, 1.0], [76.7, 1.0], [76.8, 1.0], [76.9, 1.0], [77.0, 1.0], [77.1, 1.0], [77.2, 1.0], [77.3, 1.0], [77.4, 1.0], [77.5, 1.0], [77.6, 1.0], [77.7, 1.0], [77.8, 1.0], [77.9, 1.0], [78.0, 1.0], [78.1, 1.0], [78.2, 1.0], [78.3, 1.0], [78.4, 1.0], [78.5, 1.0], [78.6, 1.0], [78.7, 1.0], [78.8, 1.0], [78.9, 1.0], [79.0, 1.0], [79.1, 1.0], [79.2, 1.0], [79.3, 1.0], [79.4, 1.0], [79.5, 1.0], [79.6, 1.0], [79.7, 1.0], [79.8, 1.0], [79.9, 1.0], [80.0, 1.0], [80.1, 1.0], [80.2, 1.0], [80.3, 1.0], [80.4, 1.0], [80.5, 1.0], [80.6, 1.0], [80.7, 1.0], [80.8, 1.0], [80.9, 1.0], [81.0, 1.0], [81.1, 1.0], [81.2, 1.0], [81.3, 1.0], [81.4, 1.0], [81.5, 1.0], [81.6, 1.0], [81.7, 1.0], [81.8, 1.0], [81.9, 1.0], [82.0, 1.0], [82.1, 1.0], [82.2, 1.0], [82.3, 1.0], [82.4, 1.0], [82.5, 1.0], [82.6, 1.0], [82.7, 1.0], [82.8, 1.0], [82.9, 1.0], [83.0, 1.0], [83.1, 1.0], [83.2, 1.0], [83.3, 1.0], [83.4, 1.0], [83.5, 1.0], [83.6, 1.0], [83.7, 1.0], [83.8, 1.0], [83.9, 1.0], [84.0, 1.0], [84.1, 1.0], [84.2, 1.0], [84.3, 1.0], [84.4, 1.0], [84.5, 1.0], [84.6, 1.0], [84.7, 1.0], [84.8, 1.0], [84.9, 1.0], [85.0, 1.0], [85.1, 1.0], [85.2, 1.0], [85.3, 1.0], [85.4, 1.0], [85.5, 1.0], [85.6, 1.0], [85.7, 1.0], [85.8, 1.0], [85.9, 1.0], [86.0, 1.0], [86.1, 1.0], [86.2, 1.0], [86.3, 1.0], [86.4, 1.0], [86.5, 1.0], [86.6, 1.0], [86.7, 1.0], [86.8, 1.0], [86.9, 1.0], [87.0, 1.0], [87.1, 1.0], [87.2, 1.0], [87.3, 1.0], [87.4, 1.0], [87.5, 1.0], [87.6, 1.0], [87.7, 1.0], [87.8, 1.0], [87.9, 1.0], [88.0, 1.0], [88.1, 1.0], [88.2, 1.0], [88.3, 1.0], [88.4, 1.0], [88.5, 1.0], [88.6, 1.0], [88.7, 1.0], [88.8, 1.0], [88.9, 1.0], [89.0, 1.0], [89.1, 1.0], [89.2, 1.0], [89.3, 1.0], [89.4, 1.0], [89.5, 1.0], [89.6, 1.0], [89.7, 1.0], [89.8, 1.0], [89.9, 1.0], [90.0, 1.0], [90.1, 1.0], [90.2, 1.0], [90.3, 1.0], [90.4, 2.0], [90.5, 2.0], [90.6, 2.0], [90.7, 2.0], [90.8, 2.0], [90.9, 2.0], [91.0, 2.0], [91.1, 2.0], [91.2, 2.0], [91.3, 2.0], [91.4, 2.0], [91.5, 2.0], [91.6, 2.0], [91.7, 2.0], [91.8, 2.0], [91.9, 2.0], [92.0, 2.0], [92.1, 2.0], [92.2, 2.0], [92.3, 2.0], [92.4, 2.0], [92.5, 2.0], [92.6, 2.0], [92.7, 2.0], [92.8, 2.0], [92.9, 2.0], [93.0, 2.0], [93.1, 2.0], [93.2, 2.0], [93.3, 2.0], [93.4, 2.0], [93.5, 2.0], [93.6, 2.0], [93.7, 2.0], [93.8, 2.0], [93.9, 2.0], [94.0, 2.0], [94.1, 2.0], [94.2, 2.0], [94.3, 2.0], [94.4, 2.0], [94.5, 2.0], [94.6, 2.0], [94.7, 2.0], [94.8, 2.0], [94.9, 2.0], [95.0, 2.0], [95.1, 2.0], [95.2, 2.0], [95.3, 2.0], [95.4, 2.0], [95.5, 2.0], [95.6, 2.0], [95.7, 2.0], [95.8, 2.0], [95.9, 2.0], [96.0, 2.0], [96.1, 2.0], [96.2, 2.0], [96.3, 2.0], [96.4, 2.0], [96.5, 2.0], [96.6, 2.0], [96.7, 2.0], [96.8, 2.0], [96.9, 2.0], [97.0, 2.0], [97.1, 2.0], [97.2, 2.0], [97.3, 2.0], [97.4, 2.0], [97.5, 2.0], [97.6, 2.0], [97.7, 2.0], [97.8, 2.0], [97.9, 2.0], [98.0, 2.0], [98.1, 2.0], [98.2, 2.0], [98.3, 2.0], [98.4, 2.0], [98.5, 2.0], [98.6, 2.0], [98.7, 2.0], [98.8, 2.0], [98.9, 2.0], [99.0, 3.0], [99.1, 3.0], [99.2, 3.0], [99.3, 3.0], [99.4, 3.0], [99.5, 3.0], [99.6, 3.0], [99.7, 3.0], [99.8, 3.0], [99.9, 4.0]], "isOverall": false, "label": "GET /index.html", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 284687.0, "minX": 0.0, "maxY": 284687.0, "series": [{"data": [[0.0, 284687.0]], "isOverall": false, "label": "GET /index.html", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4.9E-324, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 69404.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 215283.0, "series": [{"data": [[0.0, 215283.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 69404.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 58.830188679245275, "minX": 1.74312756E12, "maxY": 1000.0, "series": [{"data": [[1.74312768E12, 1000.0], [1.74312816E12, 980.2589834898033], [1.74312786E12, 1000.0], [1.74312804E12, 1000.0], [1.74312774E12, 1000.0], [1.74312792E12, 1000.0], [1.74312756E12, 58.830188679245275], [1.74312762E12, 720.6602332603146], [1.7431281E12, 1000.0], [1.7431278E12, 1000.0], [1.74312798E12, 1000.0]], "isOverall": false, "label": "Static HTML Stress Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74312816E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 30.5, "series": [{"data": [[2.0, 1.0], [3.0, 2.0], [4.0, 0.0], [5.0, 1.0], [6.0, 0.0], [7.0, 0.0], [8.0, 2.0], [9.0, 1.0], [10.0, 1.0], [11.0, 1.0], [12.0, 1.0], [13.0, 1.0], [14.0, 1.0], [15.0, 1.0], [16.0, 1.0], [17.0, 0.0], [18.0, 1.0], [19.0, 0.0], [20.0, 1.0], [21.0, 0.0], [22.0, 0.0], [23.0, 1.0], [24.0, 1.0], [25.0, 30.5], [26.0, 2.5], [27.0, 2.0], [28.0, 0.0], [29.0, 1.0], [30.0, 1.0], [31.0, 0.0], [32.0, 1.5], [33.0, 2.0], [34.0, 2.0], [35.0, 0.0], [37.0, 0.0], [36.0, 0.0], [38.0, 1.6666666666666665], [39.0, 2.6666666666666665], [41.0, 1.0], [40.0, 1.0], [43.0, 3.0], [42.0, 1.0], [45.0, 0.0], [44.0, 1.0], [47.0, 1.0], [46.0, 2.0], [49.0, 0.0], [48.0, 0.0], [50.0, 2.0], [51.0, 4.0], [53.0, 2.0], [52.0, 0.0], [54.0, 2.5], [55.0, 3.0], [56.0, 2.3333333333333335], [57.0, 2.0], [58.0, 2.8333333333333335], [59.0, 0.0], [60.0, 2.3333333333333335], [61.0, 2.0], [62.0, 2.0], [63.0, 11.0], [65.0, 1.8], [67.0, 1.5], [66.0, 0.0], [64.0, 1.0], [69.0, 1.5], [70.0, 3.0], [71.0, 2.2], [68.0, 1.0], [72.0, 2.333333333333333], [75.0, 2.333333333333333], [74.0, 0.0], [73.0, 0.0], [76.0, 2.0], [77.0, 1.5], [78.0, 1.5], [79.0, 2.0], [80.0, 2.0], [82.0, 0.5], [83.0, 1.0], [81.0, 0.0], [84.0, 1.6666666666666667], [85.0, 1.6666666666666667], [86.0, 2.25], [87.0, 2.333333333333333], [88.0, 1.5], [89.0, 2.5], [90.0, 2.0], [91.0, 2.5], [92.0, 2.0], [93.0, 0.5], [94.0, 2.8], [95.0, 2.0], [96.0, 2.5], [97.0, 1.0], [98.0, 1.75], [99.0, 1.3333333333333333], [101.0, 2.75], [102.0, 1.0], [103.0, 1.25], [100.0, 1.0], [104.0, 1.5], [105.0, 2.5], [106.0, 1.8], [107.0, 1.5], [108.0, 2.0], [109.0, 1.0], [110.0, 1.5], [111.0, 3.2], [112.0, 2.0], [113.0, 1.5], [114.0, 1.3333333333333333], [115.0, 1.8333333333333333], [116.0, 2.3333333333333335], [117.0, 1.5714285714285714], [118.0, 0.5], [119.0, 1.3333333333333333], [120.0, 1.0], [121.0, 2.5], [122.0, 1.0], [123.0, 1.0], [124.0, 1.75], [125.0, 2.2222222222222223], [126.0, 1.4285714285714286], [127.0, 2.0], [128.0, 1.3333333333333333], [129.0, 1.5], [130.0, 1.8], [131.0, 1.8], [132.0, 0.8], [133.0, 1.9999999999999998], [134.0, 1.2], [135.0, 1.5], [136.0, 1.0], [137.0, 1.5], [138.0, 1.6666666666666665], [139.0, 1.0], [140.0, 1.25], [141.0, 1.8], [142.0, 0.6666666666666667], [143.0, 1.0], [144.0, 1.5], [145.0, 1.8], [146.0, 1.25], [147.0, 1.1428571428571428], [148.0, 1.3333333333333335], [149.0, 1.0], [150.0, 1.25], [151.0, 1.6], [152.0, 2.4], [153.0, 1.0], [154.0, 1.0], [155.0, 1.1666666666666665], [156.0, 1.0], [157.0, 1.75], [158.0, 1.5], [159.0, 1.75], [160.0, 1.0], [161.0, 2.4444444444444446], [162.0, 1.6666666666666667], [163.0, 1.1666666666666665], [164.0, 1.5], [165.0, 1.4444444444444444], [166.0, 1.8750000000000004], [167.0, 1.75], [168.0, 2.0], [169.0, 3.7777777777777777], [170.0, 0.5], [171.0, 1.1428571428571428], [172.0, 1.375], [173.0, 1.1666666666666665], [174.0, 1.0], [175.0, 1.375], [176.0, 0.8333333333333334], [177.0, 1.3333333333333333], [178.0, 1.6666666666666667], [179.0, 1.4], [180.0, 1.1666666666666665], [181.0, 1.1666666666666665], [182.0, 1.3333333333333335], [183.0, 1.5714285714285714], [184.0, 1.3333333333333335], [185.0, 1.3333333333333333], [186.0, 1.25], [187.0, 1.2857142857142856], [188.0, 1.25], [189.0, 1.5], [190.0, 1.2], [191.0, 1.2857142857142856], [192.0, 1.6666666666666667], [193.0, 1.142857142857143], [194.0, 0.5], [195.0, 1.0], [196.0, 1.3333333333333333], [197.0, 1.8], [198.0, 1.5], [199.0, 1.75], [200.0, 0.9090909090909091], [201.0, 1.75], [202.0, 1.7142857142857142], [203.0, 1.5], [204.0, 1.1111111111111112], [205.0, 1.25], [206.0, 0.9999999999999999], [207.0, 1.125], [208.0, 0.6], [209.0, 1.1666666666666665], [210.0, 1.0], [211.0, 0.75], [212.0, 1.1428571428571428], [213.0, 1.0], [214.0, 0.25], [215.0, 1.25], [216.0, 1.1666666666666665], [217.0, 1.8571428571428572], [218.0, 1.0], [219.0, 1.7777777777777777], [220.0, 1.2857142857142856], [221.0, 1.0], [222.0, 0.8571428571428572], [223.0, 1.6666666666666667], [224.0, 1.25], [225.0, 1.7777777777777777], [226.0, 1.0], [227.0, 1.75], [228.0, 2.3333333333333335], [229.0, 1.1428571428571428], [230.0, 1.0], [231.0, 1.4], [232.0, 1.3333333333333333], [233.0, 1.2222222222222223], [234.0, 1.6249999999999998], [235.0, 1.3333333333333333], [236.0, 1.1818181818181819], [237.0, 1.3333333333333333], [238.0, 0.6666666666666667], [239.0, 1.0], [240.0, 0.8571428571428572], [241.0, 1.5], [242.0, 1.5714285714285714], [243.0, 1.25], [244.0, 1.0], [245.0, 1.0], [246.0, 1.0], [247.0, 1.1428571428571428], [248.0, 1.0], [249.0, 1.0], [250.0, 1.1250000000000002], [251.0, 1.5], [252.0, 1.3333333333333333], [253.0, 0.875], [254.0, 1.090909090909091], [255.0, 1.2142857142857144], [257.0, 1.3333333333333333], [256.0, 1.0], [258.0, 1.25], [259.0, 1.8], [260.0, 1.1666666666666665], [261.0, 0.8999999999999999], [262.0, 1.375], [263.0, 1.5], [264.0, 1.125], [270.0, 0.8999999999999999], [271.0, 1.2857142857142858], [268.0, 1.4], [269.0, 1.0], [265.0, 1.1111111111111112], [266.0, 2.0], [267.0, 0.7142857142857143], [273.0, 1.5555555555555556], [272.0, 0.8], [274.0, 0.875], [275.0, 0.8333333333333334], [276.0, 1.3333333333333333], [277.0, 1.0], [278.0, 1.5555555555555556], [279.0, 1.1], [280.0, 1.166666666666667], [286.0, 1.0000000000000002], [287.0, 1.375], [284.0, 1.125], [285.0, 1.1764705882352944], [281.0, 1.4285714285714286], [282.0, 1.375], [283.0, 1.0], [289.0, 1.0], [288.0, 1.4], [290.0, 1.1], [291.0, 1.0], [292.0, 0.7999999999999999], [293.0, 1.2222222222222223], [294.0, 1.3333333333333333], [295.0, 0.8333333333333334], [296.0, 2.0], [302.0, 1.0], [303.0, 0.9999999999999999], [300.0, 0.75], [301.0, 1.1111111111111112], [297.0, 1.7142857142857144], [298.0, 0.875], [299.0, 0.8888888888888888], [305.0, 0.9285714285714286], [304.0, 1.076923076923077], [306.0, 1.0], [307.0, 0.625], [308.0, 0.7692307692307693], [309.0, 1.0], [310.0, 1.0833333333333335], [311.0, 1.4545454545454546], [312.0, 1.3333333333333333], [318.0, 0.857142857142857], [319.0, 1.090909090909091], [316.0, 1.1818181818181819], [317.0, 0.75], [313.0, 1.0000000000000002], [314.0, 1.0], [315.0, 0.8333333333333334], [321.0, 1.2000000000000002], [320.0, 1.3333333333333335], [322.0, 0.6666666666666666], [323.0, 0.6666666666666667], [324.0, 1.0], [325.0, 1.1666666666666665], [326.0, 0.8823529411764705], [327.0, 1.1], [328.0, 0.7142857142857143], [334.0, 0.8571428571428572], [335.0, 0.9230769230769231], [332.0, 1.0833333333333333], [333.0, 0.5333333333333334], [329.0, 1.3], [330.0, 1.3636363636363635], [331.0, 1.5714285714285714], [337.0, 1.0], [336.0, 2.666666666666667], [338.0, 0.75], [339.0, 1.1111111111111112], [340.0, 1.0], [341.0, 1.1176470588235297], [342.0, 0.7], [343.0, 1.1666666666666667], [344.0, 0.6666666666666666], [350.0, 1.0], [351.0, 0.75], [348.0, 0.8333333333333334], [349.0, 1.1818181818181819], [345.0, 1.2000000000000002], [346.0, 1.125], [347.0, 1.210526315789474], [353.0, 1.25], [352.0, 0.75], [354.0, 0.5384615384615385], [355.0, 1.125], [356.0, 1.2000000000000002], [357.0, 1.0], [358.0, 0.8235294117647061], [359.0, 0.8], [360.0, 1.0], [366.0, 1.0625], [367.0, 1.1666666666666667], [364.0, 1.076923076923077], [365.0, 0.6], [361.0, 1.411764705882353], [362.0, 1.375], [363.0, 0.5454545454545455], [369.0, 0.8333333333333333], [368.0, 1.75], [370.0, 1.076923076923077], [371.0, 0.7], [372.0, 0.7272727272727272], [373.0, 0.8], [374.0, 1.1538461538461537], [375.0, 0.7692307692307693], [376.0, 1.285714285714286], [382.0, 1.0], [383.0, 0.9], [380.0, 0.7692307692307692], [381.0, 1.4444444444444444], [377.0, 1.0], [378.0, 1.0], [379.0, 0.5454545454545454], [385.0, 1.1428571428571428], [384.0, 0.6], [386.0, 1.105263157894737], [387.0, 0.9444444444444444], [388.0, 1.4285714285714286], [389.0, 0.9090909090909091], [390.0, 0.7894736842105261], [391.0, 1.0], [392.0, 0.9285714285714286], [398.0, 1.1], [399.0, 0.8333333333333334], [396.0, 0.7647058823529411], [397.0, 0.8333333333333333], [393.0, 0.8888888888888888], [394.0, 0.7999999999999999], [395.0, 1.0000000000000002], [401.0, 0.9473684210526314], [400.0, 1.2999999999999998], [402.0, 0.7272727272727273], [403.0, 1.375], [404.0, 0.6923076923076923], [405.0, 1.125], [406.0, 1.0909090909090908], [407.0, 0.8333333333333333], [408.0, 1.1], [414.0, 1.1333333333333335], [415.0, 1.3636363636363635], [412.0, 0.9333333333333333], [413.0, 0.8333333333333333], [409.0, 0.8823529411764705], [410.0, 0.8333333333333331], [411.0, 0.8181818181818181], [417.0, 0.75], [416.0, 0.9285714285714285], [418.0, 1.1], [419.0, 0.7272727272727272], [420.0, 0.6875], [421.0, 0.9999999999999999], [422.0, 0.857142857142857], [423.0, 0.7272727272727273], [424.0, 1.777777777777778], [430.0, 1.6666666666666667], [431.0, 1.0000000000000002], [428.0, 0.8], [429.0, 0.9411764705882353], [425.0, 0.923076923076923], [426.0, 0.8461538461538461], [427.0, 1.0588235294117647], [433.0, 0.8888888888888886], [432.0, 1.2727272727272725], [434.0, 1.0000000000000002], [435.0, 1.0], [436.0, 0.9166666666666666], [437.0, 0.7333333333333333], [438.0, 1.0625], [439.0, 0.8999999999999999], [440.0, 0.9411764705882355], [446.0, 1.1333333333333333], [447.0, 1.6666666666666667], [444.0, 1.0769230769230769], [445.0, 0.857142857142857], [441.0, 0.9375], [442.0, 1.0000000000000002], [443.0, 1.0], [449.0, 0.7142857142857143], [448.0, 0.9411764705882355], [450.0, 0.7999999999999999], [451.0, 1.0], [452.0, 0.9090909090909091], [453.0, 0.8333333333333331], [454.0, 0.7692307692307693], [455.0, 1.0666666666666667], [456.0, 0.7142857142857143], [462.0, 0.75], [463.0, 0.7647058823529411], [460.0, 0.5714285714285715], [461.0, 1.0], [457.0, 0.9444444444444444], [458.0, 0.8999999999999999], [459.0, 0.8571428571428572], [465.0, 0.857142857142857], [464.0, 1.0], [466.0, 0.5], [467.0, 0.9999999999999999], [468.0, 1.0714285714285716], [469.0, 1.090909090909091], [470.0, 0.9130434782608697], [471.0, 0.7692307692307692], [472.0, 0.9090909090909092], [478.0, 1.2000000000000002], [479.0, 1.142857142857143], [476.0, 0.875], [477.0, 1.0], [473.0, 0.625], [474.0, 0.6666666666666666], [475.0, 0.7647058823529411], [481.0, 1.0000000000000002], [480.0, 0.9000000000000001], [482.0, 1.2000000000000002], [483.0, 0.8666666666666667], [484.0, 0.7142857142857143], [485.0, 0.8333333333333334], [486.0, 1.272727272727273], [487.0, 0.8999999999999999], [488.0, 0.6956521739130436], [494.0, 1.9499999999999997], [495.0, 0.8749999999999998], [492.0, 1.2857142857142856], [493.0, 0.8666666666666666], [489.0, 0.8888888888888888], [490.0, 0.8181818181818181], [491.0, 0.9444444444444443], [497.0, 1.1428571428571428], [496.0, 1.0000000000000002], [498.0, 0.8124999999999999], [499.0, 0.875], [500.0, 0.923076923076923], [501.0, 0.5714285714285715], [502.0, 0.49999999999999994], [503.0, 0.8666666666666666], [504.0, 0.6923076923076924], [510.0, 0.875], [511.0, 0.9473684210526315], [508.0, 0.7999999999999998], [509.0, 0.8235294117647057], [505.0, 0.39999999999999997], [506.0, 1.0714285714285716], [507.0, 0.5882352941176471], [515.0, 0.9444444444444444], [512.0, 1.1052631578947372], [526.0, 0.8823529411764705], [527.0, 1.0], [524.0, 0.8571428571428571], [525.0, 0.9999999999999999], [522.0, 0.5789473684210527], [523.0, 0.8333333333333334], [513.0, 0.7999999999999999], [514.0, 1.1111111111111112], [516.0, 0.7307692307692306], [517.0, 0.6666666666666665], [518.0, 1.1], [519.0, 0.9375], [528.0, 0.6799999999999999], [542.0, 0.8124999999999999], [543.0, 0.909090909090909], [540.0, 0.7142857142857143], [541.0, 0.6363636363636364], [538.0, 0.8888888888888888], [539.0, 1.1333333333333337], [536.0, 0.85], [537.0, 0.9090909090909091], [529.0, 0.5454545454545455], [530.0, 0.9285714285714286], [531.0, 0.9374999999999999], [532.0, 0.9090909090909091], [533.0, 0.75], [534.0, 0.7272727272727273], [535.0, 1.0], [520.0, 0.6666666666666666], [521.0, 1.0800000000000003], [547.0, 0.52], [544.0, 0.7142857142857143], [558.0, 0.7916666666666667], [559.0, 0.8235294117647057], [556.0, 0.7727272727272727], [557.0, 0.5000000000000001], [554.0, 0.8823529411764703], [555.0, 0.75], [545.0, 0.75], [546.0, 0.7272727272727272], [548.0, 1.0], [549.0, 0.7647058823529411], [550.0, 0.4444444444444444], [551.0, 0.6666666666666666], [560.0, 0.7083333333333333], [574.0, 0.8749999999999998], [575.0, 0.7999999999999999], [572.0, 0.7142857142857144], [573.0, 0.9499999999999998], [570.0, 0.7407407407407407], [571.0, 0.7999999999999998], [568.0, 0.8666666666666667], [569.0, 0.8333333333333334], [561.0, 1.0000000000000002], [562.0, 1.153846153846154], [563.0, 0.8260869565217389], [564.0, 0.95], [565.0, 1.0], [566.0, 0.6666666666666666], [567.0, 0.7333333333333332], [552.0, 0.8666666666666666], [553.0, 0.7777777777777777], [579.0, 0.6666666666666667], [576.0, 0.9565217391304348], [590.0, 0.857142857142857], [591.0, 0.9473684210526315], [588.0, 0.7777777777777777], [589.0, 0.8636363636363635], [586.0, 1.0], [587.0, 0.65], [577.0, 0.6666666666666667], [578.0, 1.0], [580.0, 1.0476190476190474], [581.0, 1.2000000000000002], [582.0, 0.923076923076923], [583.0, 1.0869565217391304], [592.0, 1.3636363636363635], [606.0, 0.3333333333333333], [607.0, 0.9166666666666667], [604.0, 0.8181818181818181], [605.0, 0.7272727272727272], [602.0, 0.7727272727272726], [603.0, 0.8999999999999999], [600.0, 0.84], [601.0, 1.0], [593.0, 1.0000000000000004], [594.0, 0.8888888888888887], [595.0, 0.6818181818181819], [596.0, 0.9999999999999999], [597.0, 0.7647058823529411], [598.0, 0.9], [599.0, 0.7083333333333334], [584.0, 0.8999999999999999], [585.0, 1.1578947368421055], [611.0, 0.7999999999999999], [608.0, 0.7692307692307692], [622.0, 0.8888888888888891], [623.0, 0.8888888888888888], [620.0, 0.9999999999999999], [621.0, 0.9375], [618.0, 0.6363636363636364], [619.0, 1.2222222222222225], [609.0, 0.4705882352941177], [610.0, 1.0588235294117647], [612.0, 0.909090909090909], [613.0, 0.6666666666666667], [614.0, 1.2857142857142856], [615.0, 0.9500000000000002], [624.0, 0.857142857142857], [638.0, 0.7333333333333332], [639.0, 0.7142857142857143], [636.0, 1.0000000000000002], [637.0, 0.7368421052631577], [634.0, 0.8421052631578947], [635.0, 0.7500000000000001], [632.0, 1.0869565217391304], [633.0, 0.7391304347826085], [625.0, 0.9999999999999998], [626.0, 0.7500000000000001], [627.0, 0.7307692307692308], [628.0, 0.6363636363636364], [629.0, 1.0], [630.0, 0.9583333333333334], [631.0, 0.6000000000000001], [616.0, 0.9333333333333332], [617.0, 0.5], [643.0, 0.6923076923076923], [640.0, 0.8235294117647057], [654.0, 0.7647058823529411], [655.0, 0.8461538461538461], [652.0, 0.5882352941176471], [653.0, 0.6111111111111112], [650.0, 0.7999999999999999], [651.0, 0.5416666666666666], [641.0, 1.0833333333333333], [642.0, 0.7333333333333333], [644.0, 0.8235294117647057], [645.0, 1.105263157894737], [646.0, 0.9411764705882353], [647.0, 0.9285714285714287], [656.0, 0.6956521739130436], [670.0, 0.6818181818181819], [671.0, 1.0500000000000003], [668.0, 0.43478260869565216], [669.0, 0.7916666666666667], [666.0, 0.7391304347826089], [667.0, 0.8235294117647057], [664.0, 0.7000000000000001], [665.0, 0.8333333333333333], [657.0, 0.55], [658.0, 0.7142857142857144], [659.0, 1.3076923076923077], [660.0, 0.6923076923076923], [661.0, 0.6206896551724137], [662.0, 0.45], [663.0, 0.7777777777777777], [648.0, 0.8636363636363635], [649.0, 0.8571428571428569], [675.0, 0.8636363636363634], [672.0, 0.7777777777777777], [686.0, 1.05], [687.0, 0.5454545454545455], [684.0, 0.48], [685.0, 0.818181818181818], [682.0, 0.7241379310344827], [683.0, 1.0952380952380953], [673.0, 0.7272727272727272], [674.0, 0.5238095238095238], [676.0, 0.8571428571428571], [677.0, 0.8695652173913041], [678.0, 0.6875000000000001], [679.0, 0.5882352941176471], [688.0, 1.0], [702.0, 0.7500000000000001], [703.0, 0.7407407407407407], [700.0, 0.8333333333333331], [701.0, 0.8749999999999999], [698.0, 0.7241379310344827], [699.0, 0.6666666666666667], [696.0, 0.5555555555555556], [697.0, 0.8181818181818182], [689.0, 0.7058823529411765], [690.0, 0.8518518518518517], [691.0, 0.6111111111111112], [692.0, 0.7142857142857144], [693.0, 0.5789473684210528], [694.0, 0.8571428571428571], [695.0, 0.7333333333333334], [680.0, 0.6086956521739131], [681.0, 0.65], [707.0, 0.818181818181818], [704.0, 1.8333333333333335], [718.0, 0.7777777777777777], [719.0, 0.8125], [716.0, 0.7916666666666667], [717.0, 0.6333333333333334], [714.0, 0.4736842105263158], [715.0, 0.8333333333333331], [705.0, 0.7741935483870966], [706.0, 0.7894736842105262], [708.0, 1.0434782608695654], [709.0, 0.8888888888888888], [710.0, 0.8636363636363635], [711.0, 0.5217391304347827], [720.0, 0.6315789473684211], [734.0, 1.0000000000000002], [735.0, 0.5172413793103449], [732.0, 0.8333333333333334], [733.0, 0.8333333333333333], [730.0, 0.8076923076923076], [731.0, 0.7777777777777779], [728.0, 0.7647058823529411], [729.0, 0.826086956521739], [721.0, 0.6666666666666665], [722.0, 0.6], [723.0, 0.5600000000000002], [724.0, 0.8000000000000003], [725.0, 0.7999999999999998], [726.0, 0.8260869565217389], [727.0, 0.6521739130434784], [712.0, 0.9230769230769231], [713.0, 0.8571428571428572], [739.0, 0.8421052631578946], [736.0, 0.7499999999999998], [750.0, 0.7599999999999999], [751.0, 0.6666666666666667], [748.0, 0.6111111111111112], [749.0, 0.9354838709677422], [746.0, 0.6153846153846155], [747.0, 0.5333333333333333], [737.0, 0.7727272727272727], [738.0, 0.9999999999999998], [740.0, 0.7692307692307692], [741.0, 1.1176470588235297], [742.0, 0.8214285714285714], [743.0, 0.833333333333333], [752.0, 0.6818181818181817], [766.0, 0.8095238095238094], [767.0, 0.6666666666666669], [764.0, 0.7857142857142857], [765.0, 0.7727272727272726], [762.0, 0.8695652173913044], [763.0, 0.8095238095238093], [760.0, 1.1818181818181819], [761.0, 0.95], [753.0, 0.9333333333333332], [754.0, 1.2068965517241381], [755.0, 0.9459459459459459], [756.0, 0.9130434782608694], [757.0, 1.130434782608696], [758.0, 0.5384615384615384], [759.0, 0.6785714285714285], [744.0, 0.8666666666666666], [745.0, 0.8999999999999999], [771.0, 0.9411764705882352], [768.0, 1.12], [782.0, 1.0], [783.0, 0.6399999999999999], [780.0, 0.7500000000000001], [781.0, 0.6400000000000001], [778.0, 0.5], [779.0, 0.6923076923076923], [769.0, 0.7916666666666667], [770.0, 0.9999999999999998], [772.0, 0.774193548387097], [773.0, 1.2727272727272727], [774.0, 0.8333333333333333], [775.0, 0.7407407407407407], [784.0, 0.7083333333333333], [798.0, 0.8571428571428572], [799.0, 0.8076923076923076], [796.0, 0.48275862068965536], [797.0, 0.5384615384615384], [794.0, 0.6190476190476191], [795.0, 0.40909090909090906], [792.0, 0.8999999999999999], [793.0, 0.9743589743589741], [785.0, 1.2424242424242424], [786.0, 0.8333333333333333], [787.0, 0.923076923076923], [788.0, 0.7307692307692308], [789.0, 0.9130434782608697], [790.0, 0.7058823529411766], [791.0, 0.8666666666666665], [776.0, 0.9285714285714288], [777.0, 0.7368421052631579], [803.0, 0.7391304347826085], [800.0, 0.8571428571428572], [814.0, 0.8695652173913042], [815.0, 0.9545454545454546], [812.0, 0.5200000000000002], [813.0, 1.0833333333333337], [810.0, 0.5862068965517241], [811.0, 0.7083333333333333], [801.0, 0.8529411764705883], [802.0, 0.8499999999999999], [804.0, 0.7916666666666666], [805.0, 2.7391304347826084], [806.0, 0.5999999999999998], [807.0, 0.8846153846153848], [816.0, 0.5555555555555556], [830.0, 0.7272727272727274], [831.0, 0.9565217391304346], [828.0, 0.7391304347826088], [829.0, 0.7241379310344829], [826.0, 0.9999999999999999], [827.0, 0.5769230769230771], [824.0, 0.7142857142857144], [825.0, 0.7307692307692308], [817.0, 0.5217391304347827], [818.0, 1.1851851851851851], [819.0, 0.8636363636363635], [820.0, 0.5862068965517242], [821.0, 0.6153846153846155], [822.0, 0.8], [823.0, 0.65625], [808.0, 1.2222222222222225], [809.0, 0.625], [835.0, 0.7999999999999999], [832.0, 0.9199999999999998], [846.0, 0.6000000000000001], [847.0, 0.5454545454545452], [844.0, 0.9090909090909092], [845.0, 0.9411764705882353], [842.0, 0.6153846153846153], [843.0, 0.7666666666666667], [833.0, 0.7500000000000002], [834.0, 0.7272727272727273], [836.0, 0.8928571428571427], [837.0, 0.6086956521739132], [838.0, 0.7307692307692307], [839.0, 0.6], [848.0, 0.8333333333333333], [862.0, 0.7407407407407408], [863.0, 0.8235294117647058], [860.0, 0.8846153846153845], [861.0, 0.5454545454545454], [858.0, 0.8461538461538463], [859.0, 0.8666666666666667], [856.0, 0.85], [857.0, 0.7419354838709677], [849.0, 0.5], [850.0, 0.6944444444444445], [851.0, 0.8421052631578945], [852.0, 0.6551724137931036], [853.0, 0.8484848484848484], [854.0, 0.6153846153846153], [855.0, 0.6764705882352942], [840.0, 0.8437499999999998], [841.0, 0.5217391304347826], [867.0, 0.6060606060606061], [864.0, 0.5714285714285714], [878.0, 0.7058823529411764], [879.0, 0.6818181818181818], [876.0, 0.7894736842105263], [877.0, 0.6071428571428572], [874.0, 0.8275862068965518], [875.0, 0.7058823529411764], [865.0, 0.75], [866.0, 0.793103448275862], [868.0, 0.6571428571428573], [869.0, 0.7499999999999999], [870.0, 0.8536585365853658], [871.0, 0.7142857142857143], [880.0, 0.9444444444444446], [894.0, 0.7241379310344828], [895.0, 0.6666666666666666], [892.0, 1.0], [893.0, 0.8888888888888888], [890.0, 0.909090909090909], [891.0, 0.9333333333333335], [888.0, 0.7333333333333332], [889.0, 0.7499999999999999], [881.0, 0.48], [882.0, 0.7083333333333333], [883.0, 0.7272727272727273], [884.0, 0.6153846153846154], [885.0, 0.7407407407407406], [886.0, 0.8709677419354838], [887.0, 0.8125000000000002], [872.0, 0.7931034482758621], [873.0, 0.8064516129032259], [899.0, 0.9333333333333335], [896.0, 1.391304347826087], [910.0, 0.72], [911.0, 0.6666666666666667], [908.0, 0.6896551724137931], [909.0, 0.6562500000000002], [906.0, 0.5333333333333333], [907.0, 0.7567567567567569], [897.0, 1.0869565217391306], [898.0, 1.0], [900.0, 1.318181818181818], [901.0, 1.129032258064516], [902.0, 0.6000000000000001], [903.0, 0.8750000000000001], [912.0, 1.1666666666666667], [926.0, 0.8787878787878787], [927.0, 0.7619047619047618], [924.0, 0.8823529411764706], [925.0, 0.8333333333333334], [922.0, 0.6153846153846153], [923.0, 0.7241379310344827], [920.0, 0.7567567567567567], [921.0, 0.814814814814815], [913.0, 0.7916666666666666], [914.0, 0.7878787878787878], [915.0, 0.8333333333333333], [916.0, 0.8928571428571428], [917.0, 0.7586206896551724], [918.0, 0.903225806451613], [919.0, 0.9523809523809524], [904.0, 0.7741935483870969], [905.0, 0.5714285714285714], [931.0, 0.7499999999999999], [928.0, 0.6944444444444443], [942.0, 1.0322580645161292], [943.0, 1.054054054054054], [940.0, 0.9583333333333334], [941.0, 0.7307692307692306], [938.0, 0.8095238095238093], [939.0, 0.8214285714285716], [929.0, 0.8787878787878787], [930.0, 0.896551724137931], [932.0, 0.7187499999999999], [933.0, 0.935483870967742], [934.0, 0.6666666666666667], [935.0, 0.6764705882352942], [944.0, 0.9629629629629629], [958.0, 0.7999999999999999], [959.0, 0.9166666666666667], [956.0, 0.39999999999999997], [957.0, 0.6785714285714286], [954.0, 0.5833333333333333], [955.0, 0.5199999999999999], [952.0, 0.6060606060606063], [953.0, 0.8214285714285715], [945.0, 1.04], [946.0, 0.8333333333333334], [947.0, 0.9230769230769231], [948.0, 0.7173913043478263], [949.0, 0.9642857142857143], [950.0, 0.8125000000000001], [951.0, 0.7916666666666664], [936.0, 0.7142857142857141], [937.0, 0.6666666666666666], [963.0, 0.6052631578947368], [960.0, 0.6756756756756757], [974.0, 0.9285714285714286], [975.0, 0.7435897435897435], [972.0, 0.6938775510204082], [973.0, 0.923076923076923], [970.0, 0.7187499999999998], [971.0, 0.5172413793103449], [961.0, 0.814814814814815], [962.0, 0.7999999999999999], [964.0, 0.782608695652174], [965.0, 0.659090909090909], [966.0, 0.7142857142857142], [967.0, 1.037037037037037], [976.0, 0.8148148148148147], [990.0, 0.7096774193548386], [991.0, 0.8181818181818182], [988.0, 0.8214285714285716], [989.0, 0.5945945945945945], [986.0, 0.8249999999999997], [987.0, 0.8846153846153847], [984.0, 0.7777777777777777], [985.0, 0.8571428571428571], [977.0, 0.8717948717948719], [978.0, 0.8599999999999999], [979.0, 0.8372093023255816], [980.0, 0.6923076923076924], [981.0, 0.543478260869565], [982.0, 0.6756756756756757], [983.0, 0.625], [968.0, 0.8928571428571427], [969.0, 0.9166666666666666], [995.0, 0.6666666666666666], [992.0, 0.6730769230769231], [993.0, 0.7021276595744681], [994.0, 0.6153846153846152], [996.0, 0.72], [997.0, 0.706422018348624], [998.0, 0.7931034482758621], [999.0, 0.6744186046511627], [1000.0, 0.6869568778715093], [1.0, 1.0]], "isOverall": false, "label": "GET /index.html", "isController": false}, {"data": [[981.3232427192031, 0.6979419502822597]], "isOverall": false, "label": "GET /index.html-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 108.65, "minX": 1.74312756E12, "maxY": 374648.98333333334, "series": [{"data": [[1.74312768E12, 374391.56666666665], [1.74312816E12, 337841.4], [1.74312786E12, 371979.56666666665], [1.74312804E12, 374648.98333333334], [1.74312774E12, 374402.95], [1.74312792E12, 373412.85], [1.74312756E12, 262.35], [1.74312762E12, 131976.51666666666], [1.7431281E12, 373429.0333333333], [1.7431278E12, 373604.51666666666], [1.74312798E12, 372127.68333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74312768E12, 45768.3], [1.74312816E12, 43088.95], [1.74312786E12, 45979.45], [1.74312804E12, 45725.25], [1.74312774E12, 46122.95], [1.74312792E12, 45780.6], [1.74312756E12, 108.65], [1.74312762E12, 31268.65], [1.7431281E12, 45883.1], [1.7431278E12, 45827.75], [1.74312798E12, 45776.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74312816E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 0.6818409706206711, "minX": 1.74312756E12, "maxY": 4.962264150943394, "series": [{"data": [[1.74312768E12, 0.6889696807978354], [1.74312816E12, 0.6941836624581841], [1.74312786E12, 0.6819666666666692], [1.74312804E12, 0.6841613559774485], [1.74312774E12, 0.6854298041818813], [1.74312792E12, 0.6887308899125377], [1.74312756E12, 4.962264150943394], [1.74312762E12, 0.8482031851281765], [1.7431281E12, 0.6975333333333329], [1.7431278E12, 0.6862221925757916], [1.74312798E12, 0.6818409706206711]], "isOverall": false, "label": "GET /index.html", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74312816E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.648083157859551, "minX": 1.74312756E12, "maxY": 4.698113207547171, "series": [{"data": [[1.74312768E12, 0.6543477535772712], [1.74312816E12, 0.6617028164454504], [1.74312786E12, 0.6500999999999998], [1.74312804E12, 0.6512295218711415], [1.74312774E12, 0.6526053767009634], [1.74312792E12, 0.6570532078242857], [1.74312756E12, 4.698113207547171], [1.74312762E12, 0.8245219347581545], [1.7431281E12, 0.6644333333333352], [1.7431278E12, 0.6523363239168882], [1.74312798E12, 0.648083157859551]], "isOverall": false, "label": "GET /index.html", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74312816E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.12610265822035405, "minX": 1.74312756E12, "maxY": 2.5849056603773586, "series": [{"data": [[1.74312768E12, 0.1767786264634257], [1.74312816E12, 0.1740944570339198], [1.74312786E12, 0.17630000000000015], [1.74312804E12, 0.17673751292916448], [1.74312774E12, 0.1722535678725517], [1.74312792E12, 0.175612524200547], [1.74312756E12, 2.5849056603773586], [1.74312762E12, 0.12610265822035405], [1.7431281E12, 0.17813333333333417], [1.7431278E12, 0.17553280192108708], [1.74312798E12, 0.1733346702764142]], "isOverall": false, "label": "GET /index.html", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74312816E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74312756E12, "maxY": 60.0, "series": [{"data": [[1.74312768E12, 34.0], [1.74312816E12, 28.0], [1.74312786E12, 28.0], [1.74312804E12, 30.0], [1.74312774E12, 29.0], [1.74312792E12, 31.0], [1.74312756E12, 60.0], [1.74312762E12, 37.0], [1.7431281E12, 28.0], [1.7431278E12, 30.0], [1.74312798E12, 31.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74312768E12, 0.0], [1.74312816E12, 0.0], [1.74312786E12, 0.0], [1.74312804E12, 0.0], [1.74312774E12, 0.0], [1.74312792E12, 0.0], [1.74312756E12, 1.0], [1.74312762E12, 0.0], [1.7431281E12, 0.0], [1.7431278E12, 0.0], [1.74312798E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74312768E12, 2.0], [1.74312816E12, 2.0], [1.74312786E12, 2.0], [1.74312804E12, 2.0], [1.74312774E12, 2.0], [1.74312792E12, 2.0], [1.74312756E12, 5.0], [1.74312762E12, 2.0], [1.7431281E12, 2.0], [1.7431278E12, 2.0], [1.74312798E12, 2.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74312768E12, 3.0], [1.74312816E12, 3.0], [1.74312786E12, 3.0], [1.74312804E12, 3.0], [1.74312774E12, 3.0], [1.74312792E12, 3.0], [1.74312756E12, 60.0], [1.74312762E12, 3.0], [1.7431281E12, 3.0], [1.7431278E12, 3.0], [1.74312798E12, 3.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74312768E12, 1.0], [1.74312816E12, 1.0], [1.74312786E12, 1.0], [1.74312804E12, 1.0], [1.74312774E12, 1.0], [1.74312792E12, 1.0], [1.74312756E12, 3.0], [1.74312762E12, 1.0], [1.7431281E12, 1.0], [1.7431278E12, 1.0], [1.74312798E12, 1.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.74312768E12, 2.0], [1.74312816E12, 2.0], [1.74312786E12, 2.0], [1.74312804E12, 2.0], [1.74312774E12, 2.0], [1.74312792E12, 2.0], [1.74312756E12, 15.699999999999918], [1.74312762E12, 2.0], [1.7431281E12, 2.0], [1.7431278E12, 2.0], [1.74312798E12, 2.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74312816E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 32.0, "series": [{"data": [[2.0, 32.0], [8.0, 3.5], [21.0, 3.0], [22.0, 4.0], [39.0, 3.0], [45.0, 2.0], [56.0, 2.0], [60.0, 1.0], [67.0, 2.0], [77.0, 1.0], [85.0, 1.0], [100.0, 1.0], [107.0, 1.0], [106.0, 1.0], [110.0, 1.0], [119.0, 1.0], [134.0, 1.0], [152.0, 1.0], [160.0, 1.0], [172.0, 1.0], [171.0, 1.0], [177.0, 1.0], [185.0, 1.0], [188.0, 1.0], [204.0, 1.0], [223.0, 1.0], [219.0, 1.0], [224.0, 1.0], [239.0, 1.0], [238.0, 1.0], [241.0, 1.0], [270.0, 1.0], [281.0, 1.0], [283.0, 1.0], [289.0, 1.0], [295.0, 1.0], [304.0, 1.0], [311.0, 1.0], [319.0, 1.0], [322.0, 1.0], [320.0, 1.0], [337.0, 1.0], [349.0, 1.0], [360.0, 1.0], [361.0, 1.0], [369.0, 1.0], [371.0, 1.0], [397.0, 1.0], [399.0, 1.0], [402.0, 1.0], [405.0, 1.0], [410.0, 1.0], [428.0, 1.0], [439.0, 1.0], [438.0, 1.0], [444.0, 1.0], [449.0, 1.0], [456.0, 1.0], [452.0, 1.0], [463.0, 1.0], [453.0, 1.0], [477.0, 1.0], [473.0, 1.0], [474.0, 1.0], [467.0, 1.0], [475.0, 1.0], [469.0, 1.0], [470.0, 1.0], [471.0, 1.0], [478.0, 1.0], [472.0, 1.0], [476.0, 1.0], [465.0, 1.0], [464.0, 1.0], [492.0, 1.0], [481.0, 1.0], [495.0, 1.0], [484.0, 1.0], [486.0, 1.0], [485.0, 1.0], [487.0, 1.0], [480.0, 1.0], [489.0, 1.0], [488.0, 1.0], [491.0, 1.0], [490.0, 1.0], [483.0, 1.0], [493.0, 1.0], [494.0, 1.0], [482.0, 1.0], [497.0, 1.0], [502.0, 1.0], [501.0, 1.0], [500.0, 1.0], [509.0, 1.0], [508.0, 1.0], [507.0, 1.0], [506.0, 1.0], [498.0, 1.0], [499.0, 1.0], [505.0, 1.0], [510.0, 1.0], [504.0, 1.0], [511.0, 1.0], [503.0, 1.0], [496.0, 1.0], [517.0, 1.0], [525.0, 1.0], [526.0, 1.0], [523.0, 1.0], [524.0, 1.0], [520.0, 1.0], [521.0, 1.0], [522.0, 1.0], [518.0, 1.0], [513.0, 1.0], [514.0, 1.0], [516.0, 1.0], [515.0, 1.0], [527.0, 1.0], [512.0, 1.0], [528.0, 1.0], [530.0, 1.0], [529.0, 1.0], [532.0, 1.0], [534.0, 1.0], [535.0, 1.0], [519.0, 1.0], [538.0, 1.0], [541.0, 1.0], [540.0, 1.0], [537.0, 1.0], [547.0, 1.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[517.0, 0.0], [518.0, 0.0], [525.0, 0.0], [526.0, 0.0], [523.0, 0.0], [524.0, 0.0], [520.0, 0.0], [521.0, 0.0], [522.0, 0.0], [513.0, 0.0], [514.0, 0.0], [516.0, 0.0], [515.0, 0.0], [527.0, 0.0], [512.0, 0.0], [528.0, 0.0], [538.0, 0.0], [541.0, 0.0], [540.0, 0.0], [537.0, 0.0], [529.0, 0.0], [519.0, 0.0], [530.0, 0.0], [532.0, 0.0], [534.0, 0.0], [535.0, 0.0], [547.0, 0.0], [369.0, 0.0], [371.0, 0.0], [397.0, 0.0], [399.0, 0.0], [402.0, 0.0], [405.0, 0.0], [410.0, 0.0], [428.0, 0.0], [439.0, 0.0], [438.0, 0.0], [444.0, 0.0], [449.0, 0.0], [456.0, 0.0], [452.0, 0.0], [463.0, 0.0], [453.0, 0.0], [477.0, 0.0], [473.0, 0.0], [474.0, 0.0], [467.0, 0.0], [475.0, 0.0], [469.0, 0.0], [470.0, 0.0], [471.0, 0.0], [478.0, 0.0], [472.0, 0.0], [476.0, 0.0], [465.0, 0.0], [464.0, 0.0], [492.0, 0.0], [481.0, 0.0], [495.0, 0.0], [484.0, 0.0], [486.0, 0.0], [485.0, 0.0], [487.0, 0.0], [480.0, 0.0], [489.0, 0.0], [488.0, 0.0], [491.0, 0.0], [490.0, 0.0], [483.0, 0.0], [493.0, 0.0], [494.0, 0.0], [482.0, 0.0], [497.0, 0.0], [502.0, 0.0], [501.0, 0.0], [500.0, 0.0], [509.0, 0.0], [508.0, 0.0], [507.0, 0.0], [506.0, 0.0], [498.0, 0.0], [499.0, 0.0], [505.0, 0.0], [510.0, 0.0], [504.0, 0.0], [511.0, 0.0], [503.0, 0.0], [496.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 547.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 27.0, "series": [{"data": [[2.0, 27.0], [8.0, 3.5], [21.0, 3.0], [22.0, 3.5], [39.0, 3.0], [45.0, 2.0], [56.0, 2.0], [60.0, 1.0], [67.0, 1.0], [77.0, 1.0], [85.0, 1.0], [100.0, 1.0], [107.0, 1.0], [106.0, 1.0], [110.0, 1.0], [119.0, 1.0], [134.0, 1.0], [152.0, 1.0], [160.0, 1.0], [172.0, 1.0], [171.0, 1.0], [177.0, 1.0], [185.0, 1.0], [188.0, 1.0], [204.0, 1.0], [223.0, 1.0], [219.0, 1.0], [224.0, 1.0], [239.0, 1.0], [238.0, 1.0], [241.0, 1.0], [270.0, 1.0], [281.0, 1.0], [283.0, 1.0], [289.0, 1.0], [295.0, 1.0], [304.0, 1.0], [311.0, 1.0], [319.0, 1.0], [322.0, 1.0], [320.0, 1.0], [337.0, 1.0], [349.0, 1.0], [360.0, 1.0], [361.0, 1.0], [369.0, 1.0], [371.0, 1.0], [397.0, 1.0], [399.0, 1.0], [402.0, 1.0], [405.0, 1.0], [410.0, 1.0], [428.0, 1.0], [439.0, 1.0], [438.0, 1.0], [444.0, 1.0], [449.0, 1.0], [456.0, 1.0], [452.0, 1.0], [463.0, 1.0], [453.0, 1.0], [477.0, 1.0], [473.0, 1.0], [474.0, 1.0], [467.0, 1.0], [475.0, 1.0], [469.0, 1.0], [470.0, 1.0], [471.0, 1.0], [478.0, 1.0], [472.0, 1.0], [476.0, 1.0], [465.0, 1.0], [464.0, 1.0], [492.0, 1.0], [481.0, 1.0], [495.0, 1.0], [484.0, 1.0], [486.0, 1.0], [485.0, 1.0], [487.0, 1.0], [480.0, 1.0], [489.0, 1.0], [488.0, 1.0], [491.0, 1.0], [490.0, 1.0], [483.0, 1.0], [493.0, 1.0], [494.0, 1.0], [482.0, 1.0], [497.0, 1.0], [502.0, 1.0], [501.0, 1.0], [500.0, 1.0], [509.0, 1.0], [508.0, 1.0], [507.0, 1.0], [506.0, 1.0], [498.0, 1.0], [499.0, 1.0], [505.0, 1.0], [510.0, 1.0], [504.0, 1.0], [511.0, 1.0], [503.0, 1.0], [496.0, 1.0], [517.0, 1.0], [525.0, 1.0], [526.0, 1.0], [523.0, 1.0], [524.0, 1.0], [520.0, 1.0], [521.0, 1.0], [522.0, 1.0], [518.0, 1.0], [513.0, 1.0], [514.0, 1.0], [516.0, 1.0], [515.0, 1.0], [527.0, 1.0], [512.0, 1.0], [528.0, 1.0], [530.0, 1.0], [529.0, 1.0], [532.0, 1.0], [534.0, 1.0], [535.0, 1.0], [519.0, 1.0], [538.0, 1.0], [541.0, 1.0], [540.0, 1.0], [537.0, 1.0], [547.0, 1.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[517.0, 0.0], [518.0, 0.0], [525.0, 0.0], [526.0, 0.0], [523.0, 0.0], [524.0, 0.0], [520.0, 0.0], [521.0, 0.0], [522.0, 0.0], [513.0, 0.0], [514.0, 0.0], [516.0, 0.0], [515.0, 0.0], [527.0, 0.0], [512.0, 0.0], [528.0, 0.0], [538.0, 0.0], [541.0, 0.0], [540.0, 0.0], [537.0, 0.0], [529.0, 0.0], [519.0, 0.0], [530.0, 0.0], [532.0, 0.0], [534.0, 0.0], [535.0, 0.0], [547.0, 0.0], [369.0, 0.0], [371.0, 0.0], [397.0, 0.0], [399.0, 0.0], [402.0, 0.0], [405.0, 0.0], [410.0, 0.0], [428.0, 0.0], [439.0, 0.0], [438.0, 0.0], [444.0, 0.0], [449.0, 0.0], [456.0, 0.0], [452.0, 0.0], [463.0, 0.0], [453.0, 0.0], [477.0, 0.0], [473.0, 0.0], [474.0, 0.0], [467.0, 0.0], [475.0, 0.0], [469.0, 0.0], [470.0, 0.0], [471.0, 0.0], [478.0, 0.0], [472.0, 0.0], [476.0, 0.0], [465.0, 0.0], [464.0, 0.0], [492.0, 0.0], [481.0, 0.0], [495.0, 0.0], [484.0, 0.0], [486.0, 0.0], [485.0, 0.0], [487.0, 0.0], [480.0, 0.0], [489.0, 0.0], [488.0, 0.0], [491.0, 0.0], [490.0, 0.0], [483.0, 0.0], [493.0, 0.0], [494.0, 0.0], [482.0, 0.0], [497.0, 0.0], [502.0, 0.0], [501.0, 0.0], [500.0, 0.0], [509.0, 0.0], [508.0, 0.0], [507.0, 0.0], [506.0, 0.0], [498.0, 0.0], [499.0, 0.0], [505.0, 0.0], [510.0, 0.0], [504.0, 0.0], [511.0, 0.0], [503.0, 0.0], [496.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 547.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.8833333333333333, "minX": 1.74312756E12, "maxY": 502.1666666666667, "series": [{"data": [[1.74312768E12, 499.68333333333334], [1.74312816E12, 463.3333333333333], [1.74312786E12, 500.0], [1.74312804E12, 499.5], [1.74312774E12, 502.1666666666667], [1.74312792E12, 499.3], [1.74312756E12, 0.8833333333333333], [1.74312762E12, 281.51666666666665], [1.7431281E12, 500.01666666666665], [1.7431278E12, 499.73333333333335], [1.74312798E12, 498.65]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74312816E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.74312756E12, "maxY": 374.98333333333335, "series": [{"data": [[1.74312768E12, 372.1], [1.74312816E12, 350.31666666666666], [1.74312786E12, 373.81666666666666], [1.74312804E12, 371.75], [1.74312774E12, 374.98333333333335], [1.74312792E12, 372.2], [1.74312756E12, 0.8833333333333333], [1.74312762E12, 254.21666666666667], [1.7431281E12, 373.03333333333336], [1.7431278E12, 372.5833333333333], [1.74312798E12, 372.1666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.74312768E12, 127.51666666666667], [1.74312816E12, 112.95], [1.74312786E12, 126.16666666666667], [1.74312804E12, 127.73333333333333], [1.74312774E12, 127.15], [1.74312792E12, 127.05], [1.74312762E12, 27.266666666666666], [1.7431281E12, 126.83333333333333], [1.7431278E12, 127.06666666666666], [1.74312798E12, 126.43333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.74312768E12, 0.06666666666666667], [1.74312816E12, 0.08333333333333333], [1.74312786E12, 0.016666666666666666], [1.74312804E12, 0.03333333333333333], [1.74312774E12, 0.03333333333333333], [1.74312792E12, 0.05], [1.74312762E12, 0.03333333333333333], [1.7431281E12, 0.13333333333333333], [1.7431278E12, 0.06666666666666667], [1.74312798E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74312816E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8833333333333333, "minX": 1.74312756E12, "maxY": 374.98333333333335, "series": [{"data": [[1.74312768E12, 372.1], [1.74312816E12, 350.31666666666666], [1.74312786E12, 373.81666666666666], [1.74312804E12, 371.75], [1.74312774E12, 374.98333333333335], [1.74312792E12, 372.2], [1.74312756E12, 0.8833333333333333], [1.74312762E12, 254.21666666666667], [1.7431281E12, 373.03333333333336], [1.7431278E12, 372.5833333333333], [1.74312798E12, 372.1666666666667]], "isOverall": false, "label": "GET /index.html-success", "isController": false}, {"data": [[1.74312768E12, 127.58333333333333], [1.74312816E12, 113.03333333333333], [1.74312786E12, 126.18333333333334], [1.74312804E12, 127.76666666666667], [1.74312774E12, 127.18333333333334], [1.74312792E12, 127.1], [1.74312762E12, 27.3], [1.7431281E12, 126.96666666666667], [1.7431278E12, 127.13333333333334], [1.74312798E12, 126.48333333333333]], "isOverall": false, "label": "GET /index.html-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74312816E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.8833333333333333, "minX": 1.74312756E12, "maxY": 374.98333333333335, "series": [{"data": [[1.74312768E12, 372.1], [1.74312816E12, 350.31666666666666], [1.74312786E12, 373.81666666666666], [1.74312804E12, 371.75], [1.74312774E12, 374.98333333333335], [1.74312792E12, 372.2], [1.74312756E12, 0.8833333333333333], [1.74312762E12, 254.21666666666667], [1.7431281E12, 373.03333333333336], [1.7431278E12, 372.5833333333333], [1.74312798E12, 372.1666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74312768E12, 127.58333333333333], [1.74312816E12, 113.03333333333333], [1.74312786E12, 126.18333333333334], [1.74312804E12, 127.76666666666667], [1.74312774E12, 127.18333333333334], [1.74312792E12, 127.1], [1.74312762E12, 27.3], [1.7431281E12, 126.96666666666667], [1.7431278E12, 127.13333333333334], [1.74312798E12, 126.48333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74312816E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

